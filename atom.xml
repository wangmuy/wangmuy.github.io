<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangmuy 的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-05T14:27:00.894Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wangmuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>keras examples 总结</title>
    <link href="http://yoursite.com/mldl/keras-examples/"/>
    <id>http://yoursite.com/mldl/keras-examples/</id>
    <published>2017-09-07T07:55:18.000Z</published>
    <updated>2019-05-05T14:27:00.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h1><h2 id="imdb-评论分类"><a href="#imdb-评论分类" class="headerlink" title="imdb 评论分类"></a>imdb 评论分类</h2><p>目标: 划分 imdb 评论电影好坏</p><h3 id="imdb-bidirectional-lstm-py"><a href="#imdb-bidirectional-lstm-py" class="headerlink" title="imdb_bidirectional_lstm.py"></a>imdb_bidirectional_lstm.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dense</span><br><span class="line">bidirectional lstm</span><br><span class="line">Embedding</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sentence len     = 100</span><br><span class="line">vocab size       = 20000</span><br><span class="line">embedding size   = 128</span><br><span class="line">lstm unroll      = 64</span><br><span class="line">lstm dropout     = 0.5</span><br><span class="line">optimizer        = adam</span><br><span class="line">loss = binary_crossentropy</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>~0.8146 after 4 epochs</p><h3 id="imdb-cnn-py"><a href="#imdb-cnn-py" class="headerlink" title="imdb_cnn.py"></a>imdb_cnn.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dense</span><br><span class="line">GlobalMaxPooling1D</span><br><span class="line">Conv1D</span><br><span class="line">Embedding</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sentence len     = 400</span><br><span class="line">vocab size       = 5000</span><br><span class="line">embedding size   = 50</span><br><span class="line"># filters        = 250</span><br><span class="line">kernel size      = 3</span><br><span class="line">activation       = relu</span><br><span class="line">filter strides   = 1</span><br><span class="line">optimizer        = adam</span><br><span class="line">loss = binary_crossentropy</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>~0.89 after 2 epochs</p><h3 id="imdb-cnn-lstm-py"><a href="#imdb-cnn-lstm-py" class="headerlink" title="imdb_cnn_lstm.py"></a>imdb_cnn_lstm.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dense</span><br><span class="line">LSTM</span><br><span class="line">Conv1D</span><br><span class="line">Embedding</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sentence len     = 100</span><br><span class="line">vocab size       = 20000</span><br><span class="line">embedding size   = 128</span><br><span class="line"># filters        = 64</span><br><span class="line">kernel size      = 5</span><br><span class="line">activation       = relu</span><br><span class="line">filter strides   = 1</span><br><span class="line">lstm unroll      = 70</span><br><span class="line">optimizer        = adam</span><br><span class="line">loss = binary_crossentropy</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>~0.8498 after 2epochs</p><h3 id="imdb-fasttext-py"><a href="#imdb-fasttext-py" class="headerlink" title="imdb_fasttext.py"></a>imdb_fasttext.py</h3><ul><li>方案<a href="https://arxiv.org/abs/1607.01759" rel="external nofollow noopener noreferrer" target="_blank">fasttext</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dense</span><br><span class="line">GlobalAveragePooling1D</span><br><span class="line">Embedding</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentence len     = 400</span><br><span class="line">vocab size       = 20000</span><br><span class="line">embedding size   = 50</span><br><span class="line">if ngram_range &gt; 1: add_ngram() 添加匹配的 ngram 到 x_train/x_test</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>~0.8813 after 5epochs for Uni-gram</p><p>~0.9056 after 5 epochs for Bi-gram</p><h3 id="imdb-lstm-py"><a href="#imdb-lstm-py" class="headerlink" title="imdb_lstm.py"></a>imdb_lstm.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dense</span><br><span class="line">LSTM</span><br><span class="line">Embedding</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sentence len     = 80</span><br><span class="line">vocab size       = 20000</span><br><span class="line">embedding size   = 128</span><br><span class="line">optimizer        = adam</span><br><span class="line">loss = binary_crossentropy</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>test set: ~0.8084</p><h3 id="lstm-benchmark-py"><a href="#lstm-benchmark-py" class="headerlink" title="lstm_benchmark.py"></a>lstm_benchmark.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dense</span><br><span class="line">LSTM(不同实现)</span><br><span class="line">Embedding</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sentence len     = 80</span><br><span class="line">vocab size       = 20000</span><br><span class="line">embedding size   = 256</span><br><span class="line">optimizer        = adam</span><br><span class="line">loss = binary_crossentropy</span><br><span class="line">for modes in [0, 1, 2]:</span><br><span class="line">  lstm unroll         = 256</span><br><span class="line">  lstm dropout        = 0.2</span><br><span class="line">  lstm implementation = mode</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model=0: val_acc ~= 0.8108</span><br><span class="line">model=1: val_acc ~= 0.8163</span><br><span class="line">model=2: val_acc ~= 0.7946</span><br></pre></td></tr></table></figure><h2 id="reuters-新闻分类"><a href="#reuters-新闻分类" class="headerlink" title="reuters 新闻分类"></a>reuters 新闻分类</h2><h3 id="reuters-mlp-py"><a href="#reuters-mlp-py" class="headerlink" title="reuters_mlp.py"></a>reuters_mlp.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dense(10, activation=&apos;softmax&apos;)</span><br><span class="line">Dense(512, activation=&apos;relu&apos;, dropout=0.5)</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setence len = 1000</span><br><span class="line">optimizer   = adam</span><br><span class="line">loss = categorical_crossentropy</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>test set: ~0.7911</p><h3 id="reuters-mlp-relu-vs-selu-py"><a href="#reuters-mlp-relu-vs-selu-py" class="headerlink" title="reuters_mlp_relu_vs_selu.py"></a>reuters_mlp_relu_vs_selu.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dense(num_classes, activation=&apos;softmax&apos;)</span><br><span class="line">n_dense 个 Dense(dense_units, kernel_initializer, activation, dropoutImpl, droput_rate)</span><br><span class="line">Dense(dense_units, kernel_initializer)</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">num_classes = 分类个数</span><br><span class="line"></span><br><span class="line">network1:</span><br><span class="line">  n_dense            = 6</span><br><span class="line">  dense_units        = 16</span><br><span class="line">  activation         = relu</span><br><span class="line">  droputImpl         = Dropout</span><br><span class="line">  droptout_rate      = 0.5</span><br><span class="line">  kernel_initializer = glorot_uniform</span><br><span class="line">  optimizer = sgd</span><br><span class="line">  loss = categorical_crossentropy</span><br><span class="line"></span><br><span class="line">network2:</span><br><span class="line">  n_dense            = 6</span><br><span class="line">  dense_units        = 16</span><br><span class="line">  activation         = selu</span><br><span class="line">  droputImpl         = AlphaDropout</span><br><span class="line">  droptout_rate      = 0.1</span><br><span class="line">  kernel_initializer = lecun_normal</span><br><span class="line">  optimizer = sgd</span><br><span class="line">  loss = categorical_crossentropy</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>network1: test set ~0.5124</p><p>network2: test set ~0.6745</p><h2 id="20-Newsgroup"><a href="#20-Newsgroup" class="headerlink" title="20 Newsgroup"></a>20 Newsgroup</h2><p>目标: Newsgroup 文章分类</p><h3 id="pretrained-word-embeddings-py"><a href="#pretrained-word-embeddings-py" class="headerlink" title="pretrained_word_embeddings.py"></a>pretrained_word_embeddings.py</h3><ul><li>方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">导入 glove embedding(不可训练)</span><br><span class="line"></span><br><span class="line">Dense(128)</span><br><span class="line">Flatten</span><br><span class="line">MaxPooling1D(35)</span><br><span class="line">Conv1D(128, 5, activation=&apos;relu&apos;)</span><br><span class="line">MaxPooling1D(5)</span><br><span class="line">Conv1D(128, 5, activation=&apos;relu&apos;)</span><br><span class="line">MaxPooling1D(5)</span><br><span class="line">Conv1D(128, 5, activation=&apos;relu&apos;)</span><br><span class="line">Embedding</span><br></pre></td></tr></table></figure><ul><li>超参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sentence len   = 1000</span><br><span class="line">vocab size     = min(20000, dataset实际token数)</span><br><span class="line">embedding size = 100</span><br><span class="line">optimizer      = rmsprop</span><br><span class="line">loss = categorical_crossentropy</span><br></pre></td></tr></table></figure><ul><li>指标</li></ul><p>val_acc = ~0.7417</p><h1 id="Visual-Recognition"><a href="#Visual-Recognition" class="headerlink" title="Visual Recognition"></a>Visual Recognition</h1><h2 id="MNIST-数字识别"><a href="#MNIST-数字识别" class="headerlink" title="MNIST 数字识别"></a>MNIST 数字识别</h2><p>TBD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NLP&quot;&gt;&lt;a href=&quot;#NLP&quot; class=&quot;headerlink&quot; title=&quot;NLP&quot;&gt;&lt;/a&gt;NLP&lt;/h1&gt;&lt;h2 id=&quot;imdb-评论分类&quot;&gt;&lt;a href=&quot;#imdb-评论分类&quot; class=&quot;headerlink&quot; title=&quot;imd
      
    
    </summary>
    
      <category term="mldl" scheme="http://yoursite.com/categories/mldl/"/>
    
    
  </entry>
  
  <entry>
    <title>Alert Window 弹窗控制</title>
    <link href="http://yoursite.com/android/alert-window-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/android/alert-window-权限控制/</id>
    <published>2017-08-30T06:56:59.000Z</published>
    <updated>2019-05-03T14:20:46.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="aosp-5-1-1-r6"><a href="#aosp-5-1-1-r6" class="headerlink" title="aosp-5.1.1_r6"></a>aosp-5.1.1_r6</h2><ul><li>源码分析</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">WMS.addWindow()</span><br><span class="line">-&gt; PhoneWindowManager.checkAddPermission() &#123;</span><br><span class="line">  switch TYPE_SYSTEM_ALERT/TYPE_SYSTEM_OVERLAY/TYPE_SYSTEM_ERROR/TYPE_PHONE/TYPE_PRIORITY_PHONE:</span><br><span class="line">    permission = android.Manifest.permission.SYSTEM_ALERT_WINDOW</span><br><span class="line">    outAppOp[0] = AppOpsManager.OP_SYSTEM_ALERT_WINDOW (int数值24)</span><br><span class="line">  if mContext.checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED:</span><br><span class="line">    return WindowManagerGlobal.ADD_PERMISSION_DENIED</span><br><span class="line">&#125;</span><br><span class="line">-&gt; ContextImpl.checkCallingOrSelfPermission(String permission)</span><br><span class="line">-&gt; ContextImpl.checkPermission(permission, Binder.getCallingPid(), Binder.getCallingUid())</span><br><span class="line">-binder-&gt; AMS.checkPermission(permission, pid, uid)</span><br><span class="line">-&gt; AMS.checkComponentPermission(permission, pid, UserHandle.getAppId(uid), owningUid=-1, exported=true)</span><br><span class="line">-&gt; ActivityManager.checkComponentPermission(permission, uid, owningUid, exported) &#123;</span><br><span class="line">  if uid==0 || uid == Process.SYSTEM_UID: 允许</span><br><span class="line">  if UserHandle.isIsolated(uid): 禁止</span><br><span class="line">  if owningUid &gt;= 0 &amp;&amp; UserHandle.isSameApp(uid, owningUid): 允许</span><br><span class="line">  if !exported: 禁止</span><br><span class="line">  if permission == null: 允许</span><br><span class="line">  return AppGlobals.getPackageManager().checkUidPermission(permission, uid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="aosp-6-0-0-r1"><a href="#aosp-6-0-0-r1" class="headerlink" title="aosp-6.0.0_r1"></a>aosp-6.0.0_r1</h2><ul><li>源码分析</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">WMS.addWindow()</span><br><span class="line">-&gt; PhoneWindowManager.checkAddPermission() &#123;</span><br><span class="line">    switch TYPE_SYSTEM_ALERT/TYPE_SYSTEM_OVERLAY/TYPE_SYSTEM_ERROR/TYPE_PHONE/TYPE_PRIORITY_PHONE:</span><br><span class="line">      permission = android.Manifest.permission.SYSTEM_ALERT_WINDOW</span><br><span class="line">      outAppOp[0] = AppOpsManager.OP_SYSTEM_ALERT_WINDOW (int数值24)</span><br><span class="line">      if permission == android.Manifest.permission.SYSTEM_ALERT_WINDOW:</span><br><span class="line">        mode = mAppOpsManager.checkOp(outAppOp[0], callingUid, attrs.packageName)</span><br><span class="line">        switch mode == MODE_ALLOWED/MODE_IGNORED 返回 ADD_OKAY. 其中 MODE_IGNORED 会让添加的window在WMS中隐藏</span><br><span class="line">          mode == MODE_ERRORED 返回 ADD_PERMISSION_DENIED</span><br><span class="line">          default: mContext.checkCallingPermission(permission) == PERMISSION_GRANTED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1. AppOpsManager.checkOp(op=outAppOp[0], uid=callingUid, packageName=attrs.packageName)</span><br><span class="line">-&gt; AppOpsService.checkOperation(code=op, uid, packageName) &#123;</span><br><span class="line">    if isOpRestricted(uid, code, packageName): return MODE_IGNORED</span><br><span class="line">    code = AppOpsManager.opToSwitch(code)</span><br><span class="line">    UidState uidState = getUidStateLocked(uid, false)</span><br><span class="line">    if uidState != null &amp;&amp; uidState.opModes != null:</span><br><span class="line">      uidMode = uidState.opModes.get(code)</span><br><span class="line">      if uidMode 有设置不是ALLOWED: return uidMode</span><br><span class="line">    Op op = getOpLocked(code, uid, packageName, false)</span><br><span class="line">    if op == null: return AppOpsManager.opToDefaultMode(code)</span><br><span class="line">    else: return op.mode</span><br><span class="line">&#125;</span><br><span class="line">1.1 AppOpsService.isOpRestricted(uid, code, packageName) &#123;</span><br><span class="line">    userHandle = UserHandle.getUserId(uid) 多用户时 uid/100000, 否则 0</span><br><span class="line">    opRestrictions = mOpRestrictions.get(userHandle)</span><br><span class="line">    if opRestrictions != null &amp;&amp; opRestrictions[code]:</span><br><span class="line">      if AppOpsManager.opAllowSystemBypassRestriction(code):</span><br><span class="line">        ops = getOpsLocked(uid, packageName, true)</span><br><span class="line">        if ops != null &amp;&amp; ops.isPrivileged: return false</span><br><span class="line">      return true</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. ContextImpl.checkCallingPermission(String permission)</span><br><span class="line">-&gt; checkPermission(permission, pid=Binder.getCallingPid(), Binder.getCallingUid())</span><br><span class="line">--binder--&gt; AMS.checkPermission(permission, pid, uid)</span><br><span class="line">-&gt; ActivityManager.checkComponentPermission(permission, pid, uid, owningUid=-1, exported=true) &#123;</span><br><span class="line">    appid = UserHandle.getAppId(uid) uid 取模 100000</span><br><span class="line">    PackageManager.checkUidPermission(permission, uid)</span><br><span class="line">&#125;</span><br><span class="line">--binder--&gt; PMS.checkUidPermission(permission, uid) &#123;</span><br><span class="line">    userId = UserHandle.getUserId(uid)</span><br><span class="line">    obj = mSettings.getUserIdLPr(UserHandle.getAppId(uid))</span><br><span class="line">    if(obj != null):</span><br><span class="line">      PermissionState permissionState = ((SettingBase)obj).getPermissionState()</span><br><span class="line">      if permissionState.hasPermission(permName, userId): return PERMISSION_GRANTED</span><br><span class="line">    else:</span><br><span class="line">      if mSystemPermissions.get(uid).contains(permName): return PERMISSION_GRANTED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--* 5.1.1_r6 解决方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (permission == android.Manifest.permission.SYSTEM_ALERT_WINDOW) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">if</span> (callingUid == Process.SYSTEM_UID) &#123;</span><br><span class="line">        <span class="keyword">return</span> WindowManagerGlobal.ADD_OKAY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 方法1: 查相同uid的有无visible的进程</span></span><br><span class="line">        List&lt;RunningAppProcessInfo&gt; processInfos = ActivityManagerNative.getDefault().getRunningAppProcesses();</span><br><span class="line">        <span class="keyword">for</span>(RunningAppProcessInfo p: processInfos) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.uid == callingUid) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"checkAddPermission callingUid=p "</span> + p);</span><br><span class="line">                <span class="keyword">if</span> (p.importance &lt;= RunningAppProcessInfo.IMPORTANCE_VISIBLE) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"checkAddPermission p.importance="</span> + p.importance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法2: 查 top uid 是否与调用者相同</span></span><br><span class="line">        List&lt;RunningTaskInfo&gt; tasks = ActivityManagerNative.getDefault().getTasks(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (tasks.size() &gt; <span class="number">0</span> &amp;&amp; tasks.get(<span class="number">0</span>).baseActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> String topPkgName = tasks.get(<span class="number">0</span>).baseActivity.getPackageName();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> topUid = mContext.getPackageManager().getPackageUid(topPkgName, <span class="number">0</span>);</span><br><span class="line">            Log.d(TAG, <span class="string">"checkAddPermission callingUid="</span> + callingUid + <span class="string">", topPkgName="</span> + topPkgName + <span class="string">", topUid="</span> + topUid);</span><br><span class="line">            <span class="keyword">if</span> (topUid == callingUid) &#123;</span><br><span class="line">                <span class="keyword">return</span> WindowManagerGlobal.ADD_OKAY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(RemoteException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"checkAddPermission: "</span> + e);</span><br><span class="line">        <span class="comment">// ignored</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(NameNotFoundException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"checkAddPermission: "</span> + e);</span><br><span class="line">        <span class="comment">// ignored</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"checkAddPermission: "</span> + e);</span><br><span class="line">        <span class="comment">// ignored</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–&gt;</p><!--* 6.0.0_r1 解决方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppOpsManager.checkOperation() 改为 AppOpsManager.checkOperationInner(), 新 AppOpsManager.checkOperation() 在末尾再加判断</span><br></pre></td></tr></table></figure><p>–&gt;</p>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;aosp-5-1-1-r6&quot;&gt;&lt;a href=&quot;#aosp-5-1-1-r6&quot; class=&quot;headerlink&quot; title=&quot;aosp-5.1.1_r6&quot;&gt;&lt;/a&gt;aosp-5.1.1_r6&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;源码分析&lt;/li&gt;
&lt;/ul&gt;
&lt;fig
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>tensorflow rnn embedding</title>
    <link href="http://yoursite.com/mldl/tensorflow-core_rnn_cell-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/mldl/tensorflow-core_rnn_cell-源码分析/</id>
    <published>2017-08-30T06:51:58.000Z</published>
    <updated>2019-05-03T14:23:26.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="seq2seq-中的-rnn-embedding-是-trainable-的"><a href="#seq2seq-中的-rnn-embedding-是-trainable-的" class="headerlink" title="seq2seq 中的 rnn embedding 是 trainable 的"></a>seq2seq 中的 rnn embedding 是 trainable 的</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">legacy_seq2seq</span><br><span class="line">embedding_attention_seq2seq</span><br><span class="line"></span><br><span class="line">core_rnn_cell.py:line111: EmbeddingWrapper.call(self, inputs, state) inputs仍是list(token id)</span><br><span class="line">  embedding = vs.get_variable(&quot;embedding&quot;, [self._embedding_classes, self._embedding_size], initializer=initializer, dtype=data_type)</span><br><span class="line">-&gt; line1135 variable_scope.py: get_variable() # custom_getter=None, use_resource=None, Trainable=True</span><br><span class="line">-&gt; line991 variable_scope.py: VariableScope.get_variable(</span><br><span class="line">    _get_default_variable_store(), name, shape=shape, dtype=dtype, initializer=initializer, regularizer=regularizer,</span><br><span class="line">    trainable=trainable, collections=collections, caching_device=caching_device, partitioner=partitioner, valid_shape=valid_shape,</span><br><span class="line">    use_resource=use_resource, custom_getter=custom_getter, constraint=constraint)</span><br><span class="line">    return var_store.get_variable(full_name, ...) # full_name = self.name + &quot;/&quot; + name</span><br><span class="line">-&gt; line225 _VariableStore.get_variable(name, ...)</span><br><span class="line">   custom_getter == None: return _true_getter()</span><br><span class="line">-&gt; line329 _VariableScope.get_variable._true_getter()</span><br><span class="line">-&gt; line663 _VariableScope._get_single_variable()</span><br><span class="line">-&gt; variables.Variable(trainable=True)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;seq2seq-中的-rnn-embedding-是-trainable-的&quot;&gt;&lt;a href=&quot;#seq2seq-中的-rnn-embedding-是-trainable-的&quot; class=&quot;headerlink&quot; title=&quot;seq2seq 中的 rnn e
      
    
    </summary>
    
      <category term="mldl" scheme="http://yoursite.com/categories/mldl/"/>
    
    
  </entry>
  
  <entry>
    <title>uiautomator 启动流程</title>
    <link href="http://yoursite.com/android/uiautomator-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/android/uiautomator-启动流程/</id>
    <published>2017-06-23T03:59:57.000Z</published>
    <updated>2019-05-03T14:16:07.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-android-6-0-0-r1"><a href="#版本-android-6-0-0-r1" class="headerlink" title="版本: android-6.0.0_r1"></a>版本: android-6.0.0_r1</h1><h1 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uiautomator runtest AppiumBootstrap.jar -c io.appium.android.bootstrap.Bootstrap -e disableAndroidWatchers false -e acceptSslCerts false</span><br></pre></td></tr></table></figure><h1 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h1><ul><li>位置 frameworks/base/cmds/uiautomator/cmds/uiautomator/uiautomator</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基础 CLASSPATH=/system/framework/android.test.runner.jar:$&#123;base&#125;/framework/uiautomator.jar</span><br><span class="line">收集 runtest 后跟的所有 jar 添加到 CLASSPATH=$&#123;CLASSPATH&#125;:$&#123;jars&#125;, 设置 args=&quot;$&#123;cmd&#125; 其余参数$&#123;args&#125; -e jars $&#123;jars&#125;&quot;</span><br><span class="line"></span><br><span class="line">exec app_process /system/bin com.android.commands.uiautomator.Launcher $&#123;args&#125;</span><br></pre></td></tr></table></figure><h1 id="com-android-commands-uiautomator-Launcher-main"><a href="#com-android-commands-uiautomator-Launcher-main" class="headerlink" title="com.android.commands.uiautomator.Launcher#main()"></a>com.android.commands.uiautomator.Launcher#main()</h1><ul><li>位置 frameworks/base/cmds/uiautomator/cmds/uiautomator/src/com/android/commands/uiautomator/Launcher.java</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123; Command command = findCommand(args[0]); command.run(args[1:]); &#125;</span><br><span class="line">-&gt; command.name()==&quot;runtest&quot;: RunTestCommand.run(args[1:])</span><br><span class="line">-&gt; RunTestCommand.run()</span><br><span class="line">  -&gt; parseArgs() 解析命令行参数</span><br><span class="line">    -c com.myapp.myclass 和 -e class com.myapp.myclass 通过 addTestClasses() 加到 mTestClasses</span><br><span class="line">    -e runner com.myapp.myrunner 设置到 mRunnerClassName</span><br><span class="line">    -e debug true 设置到 mDebug</span><br><span class="line">    --monkey 设置到 mMonkey=true</span><br><span class="line">    -s 设置到 mParams[&quot;outputFormat&quot;]=&quot;simple&quot;</span><br><span class="line">    其余放到 mParams map</span><br><span class="line">  -&gt; if(mTestClasses.isEmpty()) addTestCalssesFromjars() 若命令行没指定test class, 查找 jars 指定的所有dex文件中 继承自 UiAutomatorTestCase 且是 top-level 的类, 加到 mTestClasses</span><br><span class="line">  -&gt; getRunner().run(mTestClasses, mParams, mDebug, mMonkey)</span><br><span class="line">      getRunner() 返回 UiAutomatorTestRunner() 或指定的 mRunnerClassName 类实例</span><br><span class="line"></span><br><span class="line">    -&gt; UiAutomatorTestRunner.run()</span><br><span class="line">      设置线程的 defaultUncaughtExceptionHandler 报告给 watcher 并退出</span><br><span class="line">      start()</span><br><span class="line">      退出 返回0</span><br><span class="line">        -&gt; start()</span><br><span class="line">          通过 (TestCaseCollector getTestCaseCollector()).addTestClasses(mTestClasses) 添加到 TestCaseCollector.mTestCases 每个 &lt;className, methodName&gt; 一条</span><br><span class="line">          启动 UiAutomatorTestRunner.mHandlerThread 线程 daemon 化(防止进程提前退出？)</span><br><span class="line">          (automationWrapper=new UiAutomationShellWrapper()).connect() 创建 UiAutomationShellWrapper.mHandlerThread 线程</span><br><span class="line">          UiAutomationShellWrapper.mUiAutomation = new UiAutomation(ShellWrapper的 looper, new UiAutomationConnection())</span><br><span class="line">            创建 mClient=IAccessibilityServiceClientImpl(ShellWrapper的 looper), UiAutomationConnection 是连接accessibilityService的binder实现?, 提供instrumentation和跨app测试能力</span><br><span class="line">          mUiAutomation.connect() 注册到accessibilityManagerService 并sleep循环等待binder回调设置 mConnectionId</span><br><span class="line">            -&gt; mUiAutomationConnection.connect(mClient)</span><br><span class="line">              &#123; AccessibilityManager.registerUiTestAutomationService(mToken, client, info) &#125;</span><br><span class="line"></span><br><span class="line">          以上是与 accessibilityManagerService 连接上的所有步骤</span><br><span class="line"></span><br><span class="line">          mUiDevice = UiDevice.getInstance(); mUiDevice.initialize(new ShellUiAutomatorBridge(automationWrapper.getUiAutomation()))</span><br><span class="line">            UiDevice 的初始化</span><br><span class="line"></span><br><span class="line">          testRunResult.addListener(resultPrinter); foreach mTestListeners: testRunResult.addListener() 添加listener</span><br><span class="line">          foreach testCases: preapreTestCase(testCase); testCase.run(testRunResult);</span><br><span class="line">            -&gt; prepareTestCase()</span><br><span class="line">              testCase.setAutomationSupport((mAutomationSupport=new IAutomationSupport() 负责 sendStatus 给 mWatcher ));</span><br><span class="line">              testCase.setUiDevice(mUiDevice);</span><br><span class="line">              testCase.setParams(mParams);</span><br><span class="line"></span><br><span class="line">          finally</span><br><span class="line">            resultPrinter.print(testRunResult, runTime, testRunOutput); 输出运行结果</span><br><span class="line">            automationWrapper.disconnect() 从 accessibilityManagerService 注销</span><br><span class="line">            automationWrapper.setRunAsMonkey(false)</span><br><span class="line">            mHandlerThread.quit() 退出线程, 进程结束</span><br></pre></td></tr></table></figure><h1 id="listener-watcher-结果输出-相关"><a href="#listener-watcher-结果输出-相关" class="headerlink" title="listener/watcher/结果输出 相关"></a>listener/watcher/结果输出 相关</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* UiAutomatorTestRunner.java</span><br><span class="line">  * run 线程设置 UncaughtExceptionHandler(): results=new Bundle(); results.putString(); mwatcher.instrumentationFinished(null,0,results);</span><br><span class="line">  * start()</span><br><span class="line">    resultPrinter = new WatcherResultPrinter(testCases.size())</span><br><span class="line">      或 mParams 里包含 &quot;outputFormat&quot;:&quot;simple&quot; 时 new SimpleResultPrinter(System.out, true)</span><br><span class="line">    testRunResult = new TestResult();</span><br><span class="line">    testRunResult.addListener(resultPrinter);</span><br><span class="line">    foreach mTestListeners: testRunResult.addListener(l)</span><br><span class="line"></span><br><span class="line">    运行测试 foreach testCase: testCase.run(testRunResult)</span><br><span class="line">    异常出错时 resultPrinter.printUnexpectedError(Throwable t); testRunOutput.putStirng(&quot;shortMsg&quot;, t.getMessage());</span><br><span class="line">    finally resultPrinter.print(testRunResult, runTime, testRunOutput)</span><br><span class="line"></span><br><span class="line">* UiAutomatorTestRunner.WatcherResultPrinter.print(result, runTime, Bundle testOutput)</span><br><span class="line">  mPrinter.print(result, runTime, testOutput)</span><br><span class="line">    WatcherResultPrinter 构造函数中</span><br><span class="line">      mStream=new ByteArrayOutputStream();</span><br><span class="line">      mWriter=new PrintStream(mStream);</span><br><span class="line">      mPrinter=new SimpleResultPrinter(mWriter,fullOutput=false) 输出到 ByteArray</span><br><span class="line">  testOutput.putString(..., mStream.toString()) 输出到bundle中</span><br><span class="line">  mWriter.close()</span><br><span class="line">  mAutomationSupport.sendStatus(RESULT_OK, testOutput) 发送给 watcher</span><br><span class="line"></span><br><span class="line">  * UiAutomatorTestRunner.SimpleResultPrinter.print(result, runTime, testOutput)</span><br><span class="line">    printHeader(runTime);</span><br><span class="line">    if(fullOutput): printErrors(result); printFailures(result);</span><br><span class="line">    printFooter(result);</span><br><span class="line"></span><br><span class="line">* UiAutomatorTestRunner.WatcherResultPrinter.printUnexpectedError(Throwable t)</span><br><span class="line">  (getWriter()==mWriter).printf(&quot;...aborted...&quot;);</span><br><span class="line">  t.printStackTrace(getWriter())</span><br><span class="line"></span><br><span class="line">* 发送给 mWatcher = new FakeInstrumentationWatcher()</span><br><span class="line">FakeInstrumentationWatcher.instrumentationStatus(ComponentName null, int resultCode, Bundle status)</span><br><span class="line">  mRawMode==false: foreach status.keyValue: System.out.println(...)</span><br><span class="line">  notifyAll()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-android-6-0-0-r1&quot;&gt;&lt;a href=&quot;#版本-android-6-0-0-r1&quot; class=&quot;headerlink&quot; title=&quot;版本: android-6.0.0_r1&quot;&gt;&lt;/a&gt;版本: android-6.0.0_r1&lt;/h1&gt;&lt;h1
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>repo refs/remotes/m 来源分析</title>
    <link href="http://yoursite.com/android/repo-refs-m%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/android/repo-refs-m分析/</id>
    <published>2017-04-24T06:30:16.000Z</published>
    <updated>2019-05-03T14:13:13.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="refs-remotes-m-是什么"><a href="#refs-remotes-m-是什么" class="headerlink" title="refs/remotes/m 是什么"></a>refs/remotes/m 是什么</h1><p>m 代表 merge, 是 git 仓库里的 .gitconfig 里 branch 的 merge 字段</p><h1 id="refs-remotes-m-怎么来的"><a href="#refs-remotes-m-怎么来的" class="headerlink" title="refs/remotes/m 怎么来的"></a>refs/remotes/m 怎么来的</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">git_refs.py</span><br><span class="line">R_M = &apos;refs/remotes/m/&apos;</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line">info.py</span><br><span class="line">Info.findRemoteLocalDiff(project) 列出remote和local的diff</span><br><span class="line"></span><br><span class="line">设置/读取</span><br><span class="line">project.py Sync_NetworkHalf()</span><br><span class="line">-&gt; Project._InitMRef() &#123;</span><br><span class="line">  self._InitAnyMRef(R_M + self.manifest.branch) 传参 &apos;refs/remotes/m/&apos;+manifests仓库的currentBranch.merge</span><br><span class="line">  self.revisionId == None: Project的创建在 manifest_xml.py _AddMetaProjectMirror()/_ParseProject() 两处revisionId均为None</span><br><span class="line">    remote=self.GetRemote(self.remote.name)</span><br><span class="line">    dst=remote.ToLocal(self.revisionExpr)</span><br><span class="line">      revisionExpr 顺序: 1.项目的 revision 字段, 2. remote 指定的 revision 字段, 3. default 指定的 revision 字段</span><br><span class="line">      参考: https://gerrit.googlesource.com/git-repo/+/master/docs/manifest-format.txt</span><br><span class="line">    self.bare_git.symbolic_ref(&apos;-m&apos;, msg, ref, dst) 设置symbolic-ref &#125; 设置的ref log可通过 git reflog refs/remotes/m/rBranch 查看</span><br><span class="line">-&gt; Project._InitAnyMRef(ref) &#123; self.bare_ref.symref(ref) &#125;</span><br><span class="line">-&gt; git_refs.py GitRefs.symref(name) &#123; self._EnsureLoaded(); return self._symref[name] &#125;</span><br><span class="line">  -&gt; GitRefs._EnsureLoaded() &#123; if self._phyref is None or self._NeedUpdate(): self._LoadAll() &#125;</span><br><span class="line">  -&gt; GitRefs._LoadAll() &#123;</span><br><span class="line">    self._ReadPackedRefs() 读取 .git/packed_refs 忽略 # 和 ^ 打头行, foreach 其余每行 ref_id name: self.phyref[name]=ref_id</span><br><span class="line">    self._ReadLoose(&apos;refs/&apos;) &#123;</span><br><span class="line">      递归读取 .git/refs 目录</span><br><span class="line">      foreach 文件: _ReadLoose1(self, 文件路径path, 相对.git的文件名称name) &#123;</span><br><span class="line">        读取文件 if &apos;ref: &apos;打头: self._symref[name]=ref_id[5:] else: self._phyref[name]=ref_id</span><br><span class="line">    self._ReadLoose1(os.path.join(self._gitdir, HEAD), HEAD) &#125; 读取 .git/HEAD</span><br></pre></td></tr></table></figure><p>也就是说，refs/remotes/m/branchName 会在每次sync时候读取，若没有则创建，不需要自己创建并push到remote</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;refs-remotes-m-是什么&quot;&gt;&lt;a href=&quot;#refs-remotes-m-是什么&quot; class=&quot;headerlink&quot; title=&quot;refs/remotes/m 是什么&quot;&gt;&lt;/a&gt;refs/remotes/m 是什么&lt;/h1&gt;&lt;p&gt;m 代表 m
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Torch windows 编译</title>
    <link href="http://yoursite.com/mldl/torch-windows-build/"/>
    <id>http://yoursite.com/mldl/torch-windows-build/</id>
    <published>2017-04-16T14:31:21.000Z</published>
    <updated>2019-05-03T14:11:24.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prereq"><a href="#Prereq" class="headerlink" title="Prereq"></a>Prereq</h1><ul><li>VS2015 community</li><li>conda ( Anaconda / Miniconda )</li><li>conda 目录和其 Scripts 子目录加入 path</li></ul><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/BTNC/distro-win.git</span><br><span class="line"><span class="built_in">cd</span> distro-win; git checkout 2f95bf3ac5c6653b12ce7e5db1c8c0564c501b99 <span class="comment"># 此次编译成功的版本</span></span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><ul><li>install-deps.bat 可以注释掉开头对平台的判断, 直接写上要编译的平台, conda env 名称增加平台类型</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">REM if     "%TORCH_VS_PLATFORM%" == "x86"                       set TORCH_VS_TARGET=x86</span></span><br><span class="line"><span class="comment">REM if not "%TORCH_VS_PLATFORM%" == "%TORCH_VS_PLATFORM:_x86=%" set TORCH_VS_TARGET=x86</span></span><br><span class="line"><span class="comment">REM if not "%TORCH_VS_PLATFORM%" == "%TORCH_VS_PLATFORM:_arm=%" set TORCH_VS_TARGET=arm</span></span><br><span class="line"><span class="comment">REM if     "%TORCH_VS_TARGET%"   == ""                          set TORCH_VS_TARGET=x64</span></span><br><span class="line"><span class="comment">REM 直接设置 x86 或 x64</span></span><br><span class="line"><span class="built_in">set</span> TORCH_VS_PLATFORM=x86</span><br><span class="line"><span class="built_in">set</span> TORCH_VS_TARGET=x86</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">REM if "%TORCH_INSTALL_DIR%" == "" set TORCH_INSTALL_DIR=%TORCH_DISTRO%\install</span></span><br><span class="line"><span class="built_in">set</span> TORCH_INSTALL_DIR=<span class="variable">%TORCH_DISTRO%</span>\install</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">:CONDA_SETUP</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> "<span class="variable">%TORCH_CONDA_ENV%</span>" == "" <span class="built_in">set</span> TORCH_CONDA_ENV=torch-vc<span class="variable">%CONDA_VS_VERSION%</span>-<span class="variable">%TORCH_VS_TARGET%</span></span><br></pre></td></tr></table></figure><ul><li>pkg\torch\lib\TH 无法解析的外部符号 <em>_AVX, </em>_AVX2</li></ul><p>pkg\torch\lib\TH\THVector.c 修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_AVX)</span></span><br><span class="line"><span class="comment">/*#include "vector/AVX.h"*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __AVX__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector/AVX.c"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_AVX2)</span></span><br><span class="line"><span class="comment">/*#include "vector/AVX2.h"*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __AVX2__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector/AVX2.c"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>nn 编译报错 fatal error C1001</li></ul><p>extra\nn\lib\THNN\generic\TemporalRowConvolution.c:126 行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcpy 改为 memmove</span><br></pre></td></tr></table></figure><ul><li>其他错误</li></ul><p>多数 submodule lua pkg 编译/安装错误 可以删除对应 submodule, 重新运行 install-deps.bat</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.bat</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="输入行太长-错误"><a href="#输入行太长-错误" class="headerlink" title="输入行太长 错误"></a>输入行太长 错误</h2><p>install\luajit.cmd 按以下注释, 解决 path设置导致的 输入行太长 错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REM call %TORCH_INSTALL_DIR%\torch-activate.cmd</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install\torch-activate.cmd</span><br><span class="line">test.bat</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prereq&quot;&gt;&lt;a href=&quot;#Prereq&quot; class=&quot;headerlink&quot; title=&quot;Prereq&quot;&gt;&lt;/a&gt;Prereq&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;VS2015 community&lt;/li&gt;
&lt;li&gt;conda ( Anaconda / Min
      
    
    </summary>
    
      <category term="mldl" scheme="http://yoursite.com/categories/mldl/"/>
    
    
  </entry>
  
  <entry>
    <title>SystemUI 最近应用 源码分析</title>
    <link href="http://yoursite.com/android/systemui-recents/"/>
    <id>http://yoursite.com/android/systemui-recents/</id>
    <published>2017-01-04T06:38:43.000Z</published>
    <updated>2019-05-03T14:09:17.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-android-6-0-0-r1"><a href="#版本-android-6-0-0-r1" class="headerlink" title="版本: android-6.0.0_r1"></a>版本: android-6.0.0_r1</h1><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RecentsTaskLoader.initialize() &#123;</span><br><span class="line">  初始化 mApplicationIconCache/mThumbnailCache/mActivityLabelCache/mContentDescriptionCache</span><br><span class="line">  mLoadQueue = new TaskResourceLoadQueue()</span><br><span class="line">  new TaskResourceLoader(mLoadQueue) &#123;用HandlerThread起LoaderThread, post自身(Runnable)&#125; &#125;</span><br><span class="line">&lt;- Recents.start() systemui启动时各模块初始化调用</span><br></pre></td></tr></table></figure><h1 id="TaskResourceLoader-mLoadThread-加载线程"><a href="#TaskResourceLoader-mLoadThread-加载线程" class="headerlink" title="TaskResourceLoader.mLoadThread 加载线程"></a>TaskResourceLoader.mLoadThread 加载线程</h1><ul><li>逐个加载推到 mLoadQueue的 Task的相关内容 icon/thumbnail/label</li><li>加载完调用 (Task t).notifyTaskDataLoaded(thumbnail, icon) 通知更新</li></ul><h1 id="加载Task"><a href="#加载Task" class="headerlink" title="加载Task"></a>加载Task</h1><h2 id="加载所有task"><a href="#加载所有task" class="headerlink" title="加载所有task"></a>加载所有task</h2><p>每次加载所有task都使用一个 plan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. RecentTaskLoader.loadTasks(ctx, plan, opts)</span><br><span class="line">opts.numVisibleTasks 控制plan加载时是否加载icon, opts.numVisibleTaskThumbnails 控制plan加载时是否加载thumbnail</span><br><span class="line">1.1. &lt;- Recents.start() 最先调用</span><br><span class="line">1.2. &lt;- RecentsActivity.updateRecentsTasks() 启动最近应用时调用, 消费Recents.sInstanceLoadPlan</span><br><span class="line">  &lt;- RecentsActivity.onStart()</span><br><span class="line">1.3. &lt;- Recents.preloadIcon()</span><br><span class="line">  1.3.1. &lt;- Recents.getThumbnailTransitionActivityOptions() 没有thumbnailTransitionBitmapCache或不匹配时</span><br><span class="line">    &lt;- Recents.startRecentsActivity() if(useThumbnailTransition) 获取用来切换acitivity用</span><br><span class="line">  1.3.2. &lt;- Recents.preCacheThumbnailTransitionBitmapAsync()</span><br><span class="line">    &lt;- Recents.preloadRecentsInternal() &#123; 预加载 sInstanceLoadPlan(将来被RecentsActivity消费); if(topTask有变化) preCacheThumbnailTransitionBitmapAsync() &#125;</span><br><span class="line">    &lt;- Recents.preloadRecents() if user是owner</span><br><span class="line">    &lt;- BaseStatusBar.preloadRecents()</span><br><span class="line">    1.3.2.1 &lt;- BaseStatusBar.mRecentsPreloadOnTouchListener() navBar的最近应用按钮响应</span><br><span class="line">    1.3.2.2 &lt;- (Handler H) BaseStatusBar.preloadRecentApps() 用于响应IstatusBar binder调用</span><br><span class="line">1.4. &lt;- TaskStackListenerImpl.run()</span><br></pre></td></tr></table></figure><h2 id="加载单个task"><a href="#加载单个task" class="headerlink" title="加载单个task"></a>加载单个task</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2. RecentTaskLoader.loadTaskData(Task t) &#123;</span><br><span class="line">    requiresLoad = (applicationIcon==null 或 thumbnail==null)</span><br><span class="line">    if(requiresLoad) mLoadQueue.addTask(t)</span><br><span class="line">    t.notifyTaskDataLoaded() 先通知更新, 可能为默认图, 后面LoaderThread加载完还有通知</span><br><span class="line">&#125;</span><br><span class="line">&lt;- TaskStackView.prepareViewToLeavePool(taskView, task, isNewView)</span><br><span class="line">&lt;- ViewPool.pickUpViewFromPool()</span><br><span class="line">2.1. &lt;- TaskStackView.synchronizeStackViewsWithModel()</span><br><span class="line">  2.1.1 TaskStackView.computeScroll()</span><br><span class="line">  2.1.2 TaskStackView.onMeasure() &#123; if(mAwaitingFirstLayout) synchronizeStackViewsWithModel() &#125;</span><br><span class="line">  2处都是view的函数重载</span><br><span class="line">2.2. &lt;- TaskStackViewFilterAlgorithm.getEnterTransformsForFilterAnimation()</span><br></pre></td></tr></table></figure><h2 id="taskStack-变化监听"><a href="#taskStack-变化监听" class="headerlink" title="taskStack 变化监听"></a>taskStack 变化监听</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">注册</span><br><span class="line">Recents.start() &#123;</span><br><span class="line">  mSystemServiceProxy.registerTaskStackListener(new TaskStackListenerImpl())</span><br><span class="line">&#125;</span><br><span class="line">-&gt; SystemServiceProxy.registerTaskStackListener(l) &#123; mIam.registerTaskStackListener(l) &#125;</span><br><span class="line"></span><br><span class="line">变化</span><br><span class="line">TaskStackListenerImpl.onTaskStackChanged() &#123; mHandler.post(this) &#125;</span><br><span class="line">--SystemUIService主线程handler--&gt; TaskStackListenerImpl.run()</span><br></pre></td></tr></table></figure><h2 id="保存-加载-taskRecord"><a href="#保存-加载-taskRecord" class="headerlink" title="保存/加载 taskRecord"></a>保存/加载 taskRecord</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TaskRecord.saveToXml()</span><br><span class="line"></span><br><span class="line">TaskRecord.restoreFromXml() &#123; ActivityRecord.restoreFromXml() &#125;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AMS.startActivityFromRecents()</span><br><span class="line">-&gt; AMS.startActivityFromRecentsInner()</span><br></pre></td></tr></table></figure><h2 id="截屏大小"><a href="#截屏大小" class="headerlink" title="截屏大小"></a>截屏大小</h2><p>frameworks/base/core/res/res/values-sw720dp/dimens.xml 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"thumbnail_width"</span>&gt;</span>1280dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"thumbnail_height"</span>&gt;</span>720dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="长按启动"><a href="#长按启动" class="headerlink" title="长按启动"></a>长按启动</h2><p>frameworks/base/core/res/res/values-sw720dp/config.xml 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">integer</span> <span class="attr">name</span>=<span class="string">"config_longPressOnHomeBehavior"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="activity-按-back-键所走的流程"><a href="#activity-按-back-键所走的流程" class="headerlink" title="activity 按 back 键所走的流程"></a>activity 按 back 键所走的流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">按键down: Activity.onKeyDown(keyCode, event) &#123;event.startTracking();&#125;</span><br><span class="line">按键up: Activity.onKeyUp(keyCode, event) &#123;event.isTracking(): onBackPressed()&#125;</span><br><span class="line"></span><br><span class="line">Activity.onBackPressed() -&gt; Activity.finishAfterTransition() -&gt; Activity.finish()</span><br><span class="line">-&gt; Activity.finish(finishTask==false) 最后到 mParent==null: ActivityManagerNative.getDefault().finishActivity()</span><br><span class="line">--binder--&gt; AMS.finishActivity(token, resultCode, resultData, finishTask==false) &#123;</span><br><span class="line">  若同task仍有activity: mController.activityResuming(next.packageName)</span><br><span class="line">  finishTask==false: (TaskRecord tr).stack.requestFinishActivityLocked(token, resultCode, resultData, &quot;app-request&quot;, true) &#125;</span><br><span class="line">-&gt; ActivityStack.finishActivityLocked((当前的 ActivityRecord r), resultCode, resultData, reason, oomAdj) &#123;</span><br><span class="line">     adjustFocusedActivityLocked(r, &quot;finishActivity&quot;)</span><br><span class="line">     finishActivityResultLocked(r, resultCode, resultData)</span><br><span class="line">&#125;</span><br><span class="line">  -&gt; ActivityStack.adjustFocusedActivityLocked(ActivityRecord r, String reason) &#123;</span><br><span class="line">    myReason = reason + &quot; adjustFocus&quot;</span><br><span class="line">    // 当前stack是frontStack(top或可见), AMS当前焦点activity是r</span><br><span class="line">    mStackSupervisor.isFrontStack(this) &amp;&amp; (AMS mService).mFocusedActivity == r):</span><br><span class="line">      ActivityRecord next = topRunningActivityLocked(null) 该stack当前的top task的top running activity, 已排除 finishing</span><br><span class="line">      r.frontOfTask &amp;&amp; task == topTask() &amp;&amp; task.isOverHomeStack():</span><br><span class="line">        if 本stack非全屏: adjustFocusedToNextVisibleStackLocked(null, myReason)</span><br><span class="line">        否则 mStackSupervisor.moveHomeStackTaskToTop(task.getTaskToReturnTo(), myReason)</span><br><span class="line">      重新设置到AMS</span><br><span class="line">      ActivityRecord top = mStackSupervisor.topRunningActivityLocked()</span><br><span class="line">      (AMS mService).setFocusedActivityLocked(top, myReason)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">TaskRecord.mTaskToReturnTo 表示task销毁时返回的目标, 有</span><br><span class="line">* APPLICATION_ACTIVITY_TYPE=0 返回到 本task 下方的task</span><br><span class="line">* HOME_ACTIVITY_TYPE=1 返回到HOME</span><br><span class="line">* RECENTS_ACTIVITY_TYPE=2 返回到 recents</span><br><span class="line"></span><br><span class="line">初始化:</span><br><span class="line">field初始化为 APPLICATION_ACTIVITY_TYPE, 默认ctor初始化为 HOME_ACTIVITY_TYPE, voiceInteractor ctor保留field初始化值</span><br><span class="line"></span><br><span class="line">TaskRecord.setTaskToReturnTo(int)</span><br><span class="line">1. &lt;- AMS.moveTaskToFrontLocked(taskId, flags, options) &#123;</span><br><span class="line">  task = mStackSupervisor.anyTaskForId(taskId); if 当前的 topRunningActivity == 最近应用: task.setTaskToReturnTo(RECENTS_ACTIVITY_TYPE) &#125; 总结: moveTaskToFront() 时 设置返回到 最近应用</span><br><span class="line">2. &lt;- ActivityStackSupervisor.resumeHomeStackTask(homeStackTaskType, prev, reason) &#123;</span><br><span class="line">  prev != null: prev.task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE)</span><br><span class="line">  &#125;</span><br><span class="line">3. &lt;- ASS.startActivityUncheckedLocked() &#123; line:2116</span><br><span class="line">    launchFlags &amp; (Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_MULTIPLE_TASK) != 0 或 launchSingleInstance 或 launchSingleTask:</span><br><span class="line">      if(没有要求lauch到某个task &amp;&amp; 没有要result reply) &amp;&amp; 找到已有的task</span><br><span class="line">        &amp;&amp; 当前 (ActivityRecord curTop) 非空 &amp;&amp; curTop.task != (ActivityRecord 要启动的 intentActivity).task</span><br><span class="line">        &amp;&amp; (找不到启动来源(sourceRecord == null) || 启动来源是topActivity)</span><br><span class="line">        &amp;&amp; (launchFlags &amp; (FLAG_ACTIVITY_NEW_TASK|FLAG_ACTIVITY_TASK_ON_HOME) != 0):</span><br><span class="line">          movedHome = true</span><br><span class="line">          intentActivity.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE)</span><br><span class="line">    总结: TASK_ON_HOME启动时 设置返回到 HOME</span><br><span class="line">&#125;</span><br><span class="line">4. &lt;- ASS.startActivityUncheckedLocked() &#123; line:2334</span><br><span class="line">    if(!movedHome) &amp;&amp; launchFlags &amp; (NEW_TASK|TASK_ON_HOME) != 0:</span><br><span class="line">      r.task.setTaskToReturnTo(HOME_ACTIVITY_TYPE)</span><br><span class="line">&#125; 总结: TASK_ON_HOME启动时 设置返回到 HOME</span><br><span class="line">5. &lt;- ASS.startActivityUncheckedLocked() &#123; line:2452</span><br><span class="line">    if 启动来源 是 最近应用:</span><br><span class="line">      r.task.setTaskToReturnTo(RECENTS_ACTIVITY_TYPE)</span><br><span class="line">&#125; 总结: 启动来源 是 最近应用 时 设置返回到 最近应用</span><br><span class="line">6. &lt;- ASS.findTaskToMoveToFrontLocked() &#123;</span><br><span class="line">    if flags &amp; ActivityManager.MOVE_TASK_WITH_HOME:</span><br><span class="line">      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE)</span><br><span class="line">&#125;</span><br><span class="line">7. &lt;- ActivityStack.resumeTopActivityInnerLocked(prev, bundle) &#123; line:1637</span><br><span class="line">    nextTask = topRunningActivityLocked().task</span><br><span class="line">    if prevTask != nextTask &amp;&amp; prevTask != topTask():</span><br><span class="line">      taskNdx = mTaskHistory.indexOf(prevTask) + 1</span><br><span class="line">      mTaskHistory.get(taskNdx).setTaskToReturnTo(HOME_ACTIVITY_TYPE)</span><br><span class="line">&#125; 总结: resumeTopActivity 时 prevTask != topTask 设置prevTask顶上那个task 返回到 HOME</span><br><span class="line">8. &lt;- AS.insertTaskAtTop(task, newActivity) &#123; line:2033</span><br><span class="line">    if task.isOverHomeStack() &amp;&amp; nextTask != null:</span><br><span class="line">      nextTask.setTaskToReturnTo(task.getTaskToReturnTo())</span><br><span class="line">&#125; 总结: 要插入到top的task 原来的nextTask 也返回到 task.getTaskToReturnTo()</span><br><span class="line">9. &lt;- AS.insertTaskAtTop(task, newActivity) &#123; line:2043</span><br><span class="line">    if isOnHomeDisplay():</span><br><span class="line">      fromHome = lastStack.isHomeStack() 上次焦点stack</span><br><span class="line">      if !isHomeStack() &amp;&amp; (fromHome || topTask() != task):</span><br><span class="line">        task.setTaskToReturnTo(fromHome? lastStack.topTask() == null? HOME_ACTIVITY_TYPE : lastStack.topTask().taskType : APPLICATION_ACTIVITY_TYPE)</span><br><span class="line">    else:</span><br><span class="line">      task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE)</span><br><span class="line">&#125;</span><br><span class="line">10. &lt;- AS.moveTaskToBackLocked(taskId) &#123; line:3751</span><br><span class="line">    canGoHome = !tr.isHomeStack() &amp;&amp; tr.isOverHomeStack()</span><br><span class="line">    if canGoHome:</span><br><span class="line">      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo())</span><br><span class="line">&#125; 总结: if canGoHome 设置 要移动的task 原来的nextTask 返回到 task.getTaskToReturnTo()</span><br><span class="line">11. &lt;- AS.moveTaskToBackLocked(taskId) &#123; line:3770</span><br><span class="line">    遍历 mTaskHistory, 确保至少有一个task(自身)可以返回到home</span><br><span class="line">    if(taskNdx == 1): task.setTaskToReturnTo(HOME_ACTIVITY_TYPE)</span><br><span class="line">&#125;</span><br><span class="line">12. &lt;- AS.moveTaskToBackLocked(taskId) &#123; line:3788</span><br><span class="line">    if(prevIsHome || (task == tr &amp;&amp; canGoHome) || (numTasks &lt;= 1 &amp;&amp; isOnHomeDisplay())):</span><br><span class="line">      taskToReturnTo = tr.getTaskToReturnTo()</span><br><span class="line">      tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE)</span><br><span class="line">      return mStackSupervisor.resumeHomeStack(taskToReturnTo, null, &quot;moveTaskToBack&quot;)</span><br><span class="line">&#125;</span><br><span class="line">13. &lt;- AS.removeTask(task, reason, notMoving) &#123; line:4306</span><br><span class="line">    if task.isOverHomeStack() &amp;&amp; taskNdx &lt; topTask &amp;&amp; !nextTask.isOverHomeStack():</span><br><span class="line">        nextTask.setTaskToRetrunTo(HOME_ACTIVITY_TYPE)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BluetoothControllerImpl"><a href="#BluetoothControllerImpl" class="headerlink" title="BluetoothControllerImpl"></a>BluetoothControllerImpl</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>updateInfo() 调用线程不一致问题 导致的 NPE</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BCI.handleConnectionChange()</span><br><span class="line">1. &lt;-- BCI.handleUpdateConnectionStates()</span><br><span class="line">  1.1 &lt;- (BCI.H BCI.mHandler) MSG_UPDATE_CONNECTION_STATES</span><br><span class="line">  1.2 &lt;- (BCI.H BCI.mHandler) MSG_ADD_PROFILE</span><br><span class="line">  1.3 &lt;- (BCI.H BCI.mHandler) MSG_REM_PROFILE</span><br><span class="line">2. &lt;--handler-- (BCI.H BCI.mHandler) MSG_UPDATE_SINGLE_CONNECTION_STATE 构造函数传入的bgLooper, 即 PhoneStatusBar 传入的 mHandlerThread.getLooper()</span><br><span class="line"></span><br><span class="line">BCI.updateInfo() 保证 ArrayMap mDeviceInfo 键值对不为null</span><br><span class="line">1. &lt;- BCI.handleUpdateBondedDevices()</span><br><span class="line">  &lt;- (BCI.H BCI.mHandler) MSG_UPDATE_BONDED_DEVICES</span><br><span class="line">2. &lt;- BCI.handleUpdateConnectionStates()</span><br><span class="line">3. &lt;- BCI.handleUpdateConnectionState()</span><br><span class="line">  3.1 &lt;- BCI.handleUpdateConnectionStates()</span><br><span class="line">  3.2 &lt;- (BCI.H BCI.mHandler) MSG_UPDATE_SINGLE_CONNECTION_STATE</span><br><span class="line">4. &lt;- BCI.Receiver.onReceive() 跑在 receiver 回调线程. BCI.Receiver.ctor() 中 mContext.registerReceiver(this, filter) 指定了在ui主线程</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>mContext.registerReceiver(this, filter, null, mHandler) 指定在handler(bgLooper)线程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-android-6-0-0-r1&quot;&gt;&lt;a href=&quot;#版本-android-6-0-0-r1&quot; class=&quot;headerlink&quot; title=&quot;版本: android-6.0.0_r1&quot;&gt;&lt;/a&gt;版本: android-6.0.0_r1&lt;/h1&gt;&lt;h1
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Activity 透明/非透明 转换</title>
    <link href="http://yoursite.com/android/activity-%E9%80%8F%E6%98%8E%E9%9D%9E%E9%80%8F%E6%98%8E-%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/android/activity-透明非透明-转换/</id>
    <published>2016-12-01T02:16:21.000Z</published>
    <updated>2019-05-03T13:53:01.096Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Activity.convertFromTranslucent() &#123;</span><br><span class="line">ActivityManagerNative.getDefault().convertFromTranslucent(mToken)</span><br><span class="line">WindowManagerGlobal.getInstance().changeCanvasOpacity(mToken, true)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--binder--&gt; ActivityManagerService.convertFromTranslucent() &#123;</span><br><span class="line">(ActivityRecord r).changeWindowTranslucency(true)</span><br><span class="line">r.task.stack.releaseBackgroundResources(r)</span><br><span class="line">mStackSupervisor.ensureActivitiesVisibleLocked(null, 0)</span><br><span class="line">mWindowManager.setAppFullscreen(token, true)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; ActivityStackSupervisor.ensureActivitiesVisibleLocked() &#123;</span><br><span class="line">遍历 display, stack</span><br><span class="line">  ActivityStack.ensureActivitiesVisibleLocked() &#123;</span><br><span class="line">    behindFullscreen &amp;&amp; r.visible: 影响到的(ActivityRecord r) 根据r.state动作:</span><br><span class="line">    case RESUMED: mStackSupervisor.mStoppingActivities.add(r); mStackSupervisor.scheduleIdleLocked()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--IDLE_NOW_MSG--&gt; ActivityStackSupervisor.activityIdleInternelLocked() &#123;</span><br><span class="line">ArrayList&lt;ActivityRecord&gt; stops = processStoppingActivitiesLocked(true) 从mStoppingActivities取要stop的</span><br><span class="line">遍历stops: (ActivityStack stack).stopActivityLocked(r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-&gt; ActivityStack.stopActivityLocked(r) &#123; r.app.thread.scheduleStopActivity() &#125;</span><br><span class="line">-&gt; ApplicationThreadProxy.scheduleStopActivity(r.appToken, r.visible==false, r.configChangeFlags)</span><br><span class="line">--binder--&gt; (ActivityThread.ApplicationThread extends ApplicationThreadNative).scheduleStopActivity() &#123; scheduleStopActivity() &#125;</span><br><span class="line">--handler STOP_ACTIVITY_HIDE--&gt; ActivityThread.handleStopActivity()</span><br><span class="line">-&gt; ActivityThread.performStopActivityInner()</span><br><span class="line">-&gt; Activity.performStop()</span><br><span class="line">-&gt; Instrumentation.callActivityOnStop() &#123; activity.onStop() &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>PackageInstaller 中的 动态权限</title>
    <link href="http://yoursite.com/android/package-installer-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/android/package-installer-动态权限/</id>
    <published>2016-11-29T02:57:43.000Z</published>
    <updated>2019-05-03T13:51:20.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="manifest统计"><a href="#manifest统计" class="headerlink" title="manifest统计"></a>manifest统计</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.PackageInstallerActivity</span><br><span class="line">action=&quot;android.content.pm.action.CONFIRM_PERMISSIONS&quot;</span><br><span class="line">category=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line"></span><br><span class="line">.permission.ui.GrantPermissionsActivity</span><br><span class="line">action=&quot;android.content.pm.action.REQUEST_PERMISSIONS&quot;</span><br><span class="line">category=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line"></span><br><span class="line">.permission.ui.ManagePermissionsActivity</span><br><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSIONS&quot;</span><br><span class="line">action=&quot;android.intent.action.MANAGE_APP_PERMISSIONS&quot;</span><br><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSION_APPS&quot;</span><br><span class="line">category=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line"></span><br><span class="line">receiver=&quot;.permission.model.PermissionStatusReceiver&quot;</span><br><span class="line">android:permission=&quot;android.permission.GRANT_RUNTIME_PERMISSIONS&quot;</span><br><span class="line">intent-filter action=&quot;android.intent.action.GET_PERMISSIONS_COUNT&quot;</span><br></pre></td></tr></table></figure><h1 id="PackageInstallerActivity"><a href="#PackageInstallerActivity" class="headerlink" title="PackageInstallerActivity"></a>PackageInstallerActivity</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">入口activity</span><br><span class="line">CONFIRM_PERMISSIONS 通过session进来, 记住sessionId, 选择后回调给session mInstaller.setPermissionsResult()</span><br></pre></td></tr></table></figure><h1 id="GrantPermissionsActivity"><a href="#GrantPermissionsActivity" class="headerlink" title="GrantPermissionsActivity"></a>GrantPermissionsActivity</h1><ul><li>应用主动申请权限时出现的授权界面</li><li>授权权限按组进行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 初始化 updateDefaultResults() deny all</span><br><span class="line">2. devicePolicyManager.getPermissionPolicy() 获取默认permission类型(STATE_DEFAULT运行时/AUTO_DENY/AUTO_GRANT)</span><br><span class="line">根据 permissionPlicy 自动授权 AUTO_DENY/AUTO_GRANT 给 non-fixed( !group.isUserFixed() &amp;&amp; !group.isPolicyFixed())类型的权限</span><br><span class="line">3. 剩下的STATE_DEFAULT类型更新界面让用户授权</span><br></pre></td></tr></table></figure><h1 id="ManagePermissionsActivity"><a href="#ManagePermissionsActivity" class="headerlink" title="ManagePermissionsActivity"></a>ManagePermissionsActivity</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSIONS&quot;</span><br><span class="line">ManagePermissionsFragment</span><br><span class="line"></span><br><span class="line">action=&quot;android.intent.action.MANAGE_APP_PERMISSIONS&quot;</span><br><span class="line">AppPermissionsFragment</span><br><span class="line"></span><br><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSION_APPS&quot;</span><br><span class="line">PermissionAppsFragment</span><br></pre></td></tr></table></figure><h1 id="PermissionStatusReceiver"><a href="#PermissionStatusReceiver" class="headerlink" title="PermissionStatusReceiver"></a>PermissionStatusReceiver</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当有 Intent.ACTION_GET_PERMISSIONS_COUNT 广播询问时, 获取对应的package授权权限数量, 广播反馈</span><br><span class="line">/packages/apps/Settings 用到</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;manifest统计&quot;&gt;&lt;a href=&quot;#manifest统计&quot; class=&quot;headerlink&quot; title=&quot;manifest统计&quot;&gt;&lt;/a&gt;manifest统计&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>ResolverActivity 流程</title>
    <link href="http://yoursite.com/android/resolve-activity/"/>
    <id>http://yoursite.com/android/resolve-activity/</id>
    <published>2016-11-16T07:12:28.000Z</published>
    <updated>2019-05-03T13:48:14.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-aosp-5-1-1-r6"><a href="#版本-aosp-5-1-1-r6" class="headerlink" title="版本 aosp-5.1.1_r6"></a>版本 aosp-5.1.1_r6</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ResolverActivity.java ResolveListAdapter.ctor()</span><br><span class="line">-&gt; ResolveListAdapter.rebuildList()</span><br><span class="line">--binder--&gt; PackageManagerService.queryIntentActivities() &#123;</span><br><span class="line">    if intent有component, 直接返回component指定的;</span><br><span class="line">    if intent有packageName, ActivityIntentResolver.queryIntentForPackage()</span><br><span class="line">    else ActivityIntentResolver.queryIntent()</span><br><span class="line">&#125;</span><br><span class="line">-&gt;1. (ActivityIntentResolver父类 IntentResolver).queryIntent()</span><br><span class="line">-&gt;2. (ActivityIntentResolver父类 IntentResolver).queryIntentForPackage()</span><br><span class="line"></span><br><span class="line">-&gt; IntentResolver.buildResolveList()</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PMS.findPreferredActivity()</span><br><span class="line">1. &lt;- PMS.setLastChosenActivity()</span><br><span class="line">&lt;- ResolverActivity.onIntentSelected()</span><br><span class="line"></span><br><span class="line">2. &lt;- PMS.getLastChosenActivity()</span><br><span class="line">&lt;- ResolverActivity.rebuildList()</span><br><span class="line"></span><br><span class="line">3. &lt;- PMS.chooseBestActivity() &#123;findPreferredActivity(intent,resolvedType,flags,query,r0.priority,true==always,false==removeMatches,debug,userId)&#125;</span><br><span class="line">&lt;- PMS.resolveIntent()</span><br><span class="line"></span><br><span class="line">4. &lt;- PMS.getHomeActivities() &#123;</span><br><span class="line">  list=queryIntentActivities(); return findPreferredActivity(list) 返回NULL表示没有preferred &#125;</span><br><span class="line">&lt;--binder-- PM.getHomeActivities()</span><br><span class="line">4.1 &lt;- SystemUI SystemServicesProxy.getHomeActivityPackageName()</span><br><span class="line">  &lt;- SystemUI AlternateRecentsComponent.startRecentsActivity() 最近应用页面</span><br><span class="line">4.2 &lt;- ApplicationPackageManager.getHomeActivities() ContextImpl.mPackageManager==ApplicationPackageManager, 实际client端的PackageManager, api公开接口</span><br><span class="line">4.3 &lt;- PackageManagerBackupAgent.getPreferredHomeComponent()</span><br><span class="line">  &lt;- PMBA.onBackup()</span><br></pre></td></tr></table></figure><!--定死Home应用:初始方法:加在PMS.resolveIntent() {  query=queryIntentActivities();  if(query含Launcher){滤掉其他或直接返回唯一};  return chooseBestActivity(query) }缺陷:PMS.queryIntentActivities()没有走这个流程(Recents等有调用此接口)解决:queryIntentActivities() 有多个return出口, 不好直接改写将 queryIntentActivities() 包起来, 改名 queryIntentActivityesInner(), 重新提供一个queryIntentActivities() {  query=queryIntentActivityesInner();  if(query含Launcher){滤掉其他或直接返回唯一} }-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;版本-aosp-5-1-1-r6&quot;&gt;&lt;a href=&quot;#版本-aosp-5-1-1-r6&quot; class=&quot;headerlink&quot; title=&quot;版本 aosp-5.1.1_r6&quot;&gt;&lt;/a&gt;版本 aosp-5.1.1_r6&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ResolverActivity.java ResolveListAdapter.ctor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; ResolveListAdapter.rebuildList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--binder--&amp;gt; PackageManagerService.queryIntentActivities() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if intent有component, 直接返回component指定的;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if intent有packageName, ActivityIntentResolver.queryIntentForPackage()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else ActivityIntentResolver.queryIntent()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;1. (ActivityIntentResolver父类 IntentResolver).queryIntent()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;2. (ActivityIntentResolver父类 IntentResolver).queryIntentForPackage()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; IntentResolver.buildResolveList()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android debug-hwui-profile</title>
    <link href="http://yoursite.com/android/debug-hwui-profile/"/>
    <id>http://yoursite.com/android/debug-hwui-profile/</id>
    <published>2016-10-18T12:21:32.000Z</published>
    <updated>2019-05-03T13:45:43.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h1><h2 id="探索-gpu呈现模式-测量的是什么"><a href="#探索-gpu呈现模式-测量的是什么" class="headerlink" title="探索 gpu呈现模式 测量的是什么"></a>探索 gpu呈现模式 测量的是什么</h2><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="原生Settings"><a href="#原生Settings" class="headerlink" title="原生Settings"></a>原生Settings</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings -&gt; 开发者选项 -&gt; gpu呈现模式</span><br></pre></td></tr></table></figure><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setprop debug.hwui.profile visual_bars <span class="comment"># false关闭</span></span><br></pre></td></tr></table></figure><h1 id="图形解释"><a href="#图形解释" class="headerlink" title="图形解释"></a>图形解释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">蓝色: create/update DisplayList</span><br><span class="line">紫色: 同步到render thread</span><br><span class="line">红色: 将DisplayList转为gl命令调用</span><br><span class="line">黄色: cpu等待gpu完成</span><br></pre></td></tr></table></figure><h1 id="profile时机"><a href="#profile时机" class="headerlink" title="profile时机"></a>profile时机</h1><h2 id="4-4-4-r1"><a href="#4-4-4-r1" class="headerlink" title="4.4.4_r1"></a>4.4.4_r1</h2><h3 id="涉及文件"><a href="#涉及文件" class="headerlink" title="涉及文件"></a>涉及文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HardwareRenderer.java</span><br></pre></td></tr></table></figure><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HardwareRenderer.drawProfileData() &#123;</span><br><span class="line">  mProfileData 数据</span><br><span class="line">  for(i=0; i &lt; getFrameCount()*elementCount; i+=elementCount)</span><br><span class="line">    mProfileShapes[] &lt;- bar条rect</span><br><span class="line">    drawGraph() 画bar条</span><br><span class="line">    drawCurrentFrame() if(当前帧) 加深当前帧的bar条</span><br><span class="line">    drawThreadshold() 16ms水平线</span><br></pre></td></tr></table></figure><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dumpGfxInfo()</span><br><span class="line">  mProfileData[i]   == Draw</span><br><span class="line">  mProfileData[i+1] == Process</span><br><span class="line">  mProfileData[i+2] == Execute</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><h4 id="Draw"><a href="#Draw" class="headerlink" title="Draw"></a>Draw</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildDisplayList()</span><br><span class="line">  startBuildDisplayListProfiling()</span><br><span class="line">  Trace.traceBegin(TRACE_TAG_VIEW, &quot;getDisplayList&quot;)</span><br><span class="line">  view.getDisplayList()</span><br><span class="line">  Trace.traceEnd(TRACE_TAG_VIEW)</span><br><span class="line">  endBuildDisplayListProfiling()</span><br></pre></td></tr></table></figure><h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drawDisplayList()</span><br><span class="line">  Trace.traceBegin(Trace.TRACE_TAG_VIEW, &quot;drawDisplayList&quot;)</span><br><span class="line">  canvas.drawDisplayList()</span><br><span class="line">  Trace.traceEnd(Trace.TRACE_TAG_VIEW)</span><br><span class="line">&lt;- draw()</span><br></pre></td></tr></table></figure><h4 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapBuffers()</span><br><span class="line">  sEgl.eglSwapBuffers(sEglDisplay, mEglSurface)</span><br><span class="line">&lt;- draw()</span><br></pre></td></tr></table></figure><h2 id="6-0-0-r1"><a href="#6-0-0-r1" class="headerlink" title="6.0.0_r1"></a>6.0.0_r1</h2><h3 id="涉及文件-1"><a href="#涉及文件-1" class="headerlink" title="涉及文件"></a>涉及文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/libs/hwui/renderthread/CanvasContext.cpp</span><br><span class="line">frameworks/base/libs/hwui/renderthread/FrameInfoVisualizer.cpp</span><br></pre></td></tr></table></figure><h3 id="绘制-1"><a href="#绘制-1" class="headerlink" title="绘制"></a>绘制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FrameInfoVisualizer::draw()</span><br><span class="line">  mFrameSource[] 数据</span><br><span class="line">  initializeRects() 根据数据设置所有 bar rect(left/right, top=bottom=baseline)</span><br><span class="line">  drawGraph() &#123; foreach bar: nextBarSegment() 计算bar高度; canvas-&gt;drawRects() &#125;</span><br><span class="line">  drawThreshold() 16ms水平线</span><br></pre></td></tr></table></figure><h3 id="dump-1"><a href="#dump-1" class="headerlink" title="dump"></a>dump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FrameInfoVisulizer::dumpData()</span><br><span class="line">  [IntentdedVsync, SyncStart]           == Draw</span><br><span class="line">  [SyncStart, IssueDrawCommandsStart]   == Prepare</span><br><span class="line">  [IssueDrawCommandsStart, SwapBuffers] == Process</span><br><span class="line">  [SwapBuffers, FrameCompleted]         == Execute</span><br></pre></td></tr></table></figure><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ui线程 ThreadedRenderer.java draw() -&gt; nSyncAndDrawFrame()</span><br><span class="line">--jni--&gt; nSyncAndDrawFrame()</span><br><span class="line">-&gt; RenderProxy::syncAndDrawFrame()</span><br><span class="line">-&gt; DrawFrameTask::drawFrame() &#123; postAndWait() 等待render线程完成当前帧 &#125;</span><br><span class="line"></span><br><span class="line">DrawFrameTask 继承自 RenderTask</span><br><span class="line"></span><br><span class="line">render线程</span><br><span class="line">初始化在 RenderProxy::ctor() 中 RenderThread::getInstance(), 是个Looper Thread</span><br><span class="line">调用 threadLoop()</span><br><span class="line">-&gt; DrawFrameTask::run() &#123;</span><br><span class="line">  if(canUnblockUiThread) unblockUiThread() 发信号给ui线程</span><br><span class="line">  if(canDrawFrame) (CanvasContext context)-&gt;draw()</span><br><span class="line">  if(!canUnblockUiThread) unblockUiThread()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计-1"><a href="#统计-1" class="headerlink" title="统计"></a>统计</h3><h4 id="Draw-1"><a href="#Draw-1" class="headerlink" title="Draw"></a>Draw</h4><h5 id="IntentdedVsync"><a href="#IntentdedVsync" class="headerlink" title="IntentdedVsync"></a>IntentdedVsync</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FrameInfo.h</span><br><span class="line">UiFrameInfoBuilder::setVsync(vsyncTime, intendedVsync)</span><br><span class="line">1. &lt;- CanvasContext::doFrame() &#123;</span><br><span class="line">  setVsync() 标识vsync时间</span><br><span class="line">  prepareTree()</span><br><span class="line">  CanvasContext::draw() &#125;</span><br><span class="line">&lt;- RenderThread::dispatchFrameCallbacks()</span><br><span class="line">&lt;--queue-- RenderThread::drainDisplayEventQueue()</span><br><span class="line">&lt;- RenderThread::threadLoop()</span><br><span class="line"></span><br><span class="line">2. &lt;- frameworks/base/core/jni android_view_Surface.cpp ContextFactory::draw()</span><br></pre></td></tr></table></figure><h5 id="SyncStart"><a href="#SyncStart" class="headerlink" title="SyncStart"></a>SyncStart</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CanvasContext::prepareTree()</span><br><span class="line">  mCurrentFrameInfo-&gt;markSyncStart()</span><br><span class="line">&lt;- doFrame()</span><br></pre></td></tr></table></figure><h5 id="IssueDrawCommandsStart"><a href="#IssueDrawCommandsStart" class="headerlink" title="IssueDrawCommandsStart"></a>IssueDrawCommandsStart</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CanvasContext::draw()</span><br><span class="line">  mCurrentFrameInfo-&gt;markIssueDrawCommandsStart()</span><br></pre></td></tr></table></figure><h5 id="SwapBuffers"><a href="#SwapBuffers" class="headerlink" title="SwapBuffers"></a>SwapBuffers</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. CanvasContext::draw()</span><br><span class="line"></span><br><span class="line">2. FrameInfoVisualizer::draw() 临时mark当前帧</span><br></pre></td></tr></table></figure><h5 id="FrameCompleted"><a href="#FrameCompleted" class="headerlink" title="FrameCompleted"></a>FrameCompleted</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. CanvasContext::draw()</span><br><span class="line"></span><br><span class="line">2. FrameInfoVisualizer::draw() 临时mark当前帧</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本文目标&quot;&gt;&lt;a href=&quot;#本文目标&quot; class=&quot;headerlink&quot; title=&quot;本文目标&quot;&gt;&lt;/a&gt;本文目标&lt;/h1&gt;&lt;h2 id=&quot;探索-gpu呈现模式-测量的是什么&quot;&gt;&lt;a href=&quot;#探索-gpu呈现模式-测量的是什么&quot; class=&quot;he
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>aapt 源码分析</title>
    <link href="http://yoursite.com/android/aapt/"/>
    <id>http://yoursite.com/android/aapt/</id>
    <published>2016-09-11T08:42:19.000Z</published>
    <updated>2019-05-03T13:43:22.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resource Id 32位 = 8(packageId) + 8(typeId) + 16(nameId)</span><br><span class="line">ResourceTable.cpp::makeResId()</span><br></pre></td></tr></table></figure><h1 id="framework-res典型调用"><a href="#framework-res典型调用" class="headerlink" title="framework-res典型调用"></a>framework-res典型调用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out/host/linux-x86/bin/aapt package -u -x -z  --pseudo-localize   -M frameworks/base/core/res/AndroidManifest.xml -S device/myvendor/overlay/frameworks/base/core/res/res -S frameworks/base/core/res/res -A frameworks/base/core/res/assets  --min-sdk-version 22 --target-sdk-version 22 --product phone --version-code 22 --version-name 5.1.1-2.0.16   -F out/target/common/obj/APPS/framework-res_intermediates/package-export.apk</span><br></pre></td></tr></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><a id="more"></a><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">Main.cpp main() &#123; 收集命令行内容到bundle &#125;</span><br><span class="line">-&gt; handleCommand(bundle)</span><br><span class="line">-&gt; Command.cpp doPackage(bundle) &#123;</span><br><span class="line">  assets=new AaptAssets();</span><br><span class="line">  assets.slurpFromArgs(bundle) 收集所有文件信息</span><br><span class="line">  builder = new ApkBuilder(configFilter)</span><br><span class="line">  if(有资源文件) buildResources(bundle, assets, builder) 收集和编译resource, 生成id</span><br><span class="line">  assets.applyJavaSymbols() &#123; 决定哪些内容会输出到 R.java</span><br><span class="line">若是framework-res, AaptAssets.mHavePrivateSymbols==false 没有排除任何内容</span><br><span class="line">若是普通应用, 这里排除掉所有framework中定义的私有内容. &#125;</span><br><span class="line">  writeResourceSymbols(bundle, assets, ...)</span><br><span class="line">  writeProguardFile(bundle, assets)</span><br><span class="line">  if(outputAPKFile) addResourcesToBuilder(assets, builder) 生成apk &#125;</span><br><span class="line"></span><br><span class="line">-&gt; Resource.cpp buildResources() &#123;</span><br><span class="line">  parsePackage(androidManifestFile) 取包名, revisionCode, minSdk</span><br><span class="line">  packageType = 命令行 -x==System, --shared-lib==SharedLibrary, --feature-of==AppFeature</span><br><span class="line">  table = ResourceTable(bundle, assets.getPackage(), packageType)</span><br><span class="line">  table.addIncludedResources(bundle, assets)</span><br><span class="line"></span><br><span class="line">  applyFileOverlay() 作用于 OVERLAY_SET=drawable/layout/anim/animator/interpolator/transition/xml/raw/color/menu/mipmap, 这些目录若有overlay, 对应文件替换成overlay中的文件(文件整体替换)</span><br><span class="line"></span><br><span class="line">  对drawable/mipmap preProcessImages()</span><br><span class="line">  对OVERLAY_SET makeFileResources(bundle, assets, &amp;table, ...)</span><br><span class="line"></span><br><span class="line">  编译每个overlay中的values目录里的xml文件</span><br><span class="line">  foreach(overlay)</span><br><span class="line">    compileResourceFile(bundle, assets, file, it.getParams(), overlay=true, &amp;table)</span><br><span class="line"></span><br><span class="line">  table.assignResourceIds() &#123;</span><br><span class="line">package.applyPublicTypeOrder() &#123;</span><br><span class="line">public类型 的按 Type.mPublicIndex 重新排序(之后的 p.getOrderedTypes() 返回的就是已排序Type)</span><br><span class="line">Type.mPublicIndex 通过 addPublic() 的顺序设置, 就是在 values/public.xml 中的定义顺序 &#125;</span><br><span class="line">遍历 p.getOrderedTypes(): 每个type.getOrderedConfigs() 的 entry 生成 attribute</span><br><span class="line">遍历 p.getOrderedTypes():</span><br><span class="line">  每个type.applyPublicEntryOrder() 按 entryId(即资源id中的nameId) 重新排序(之后的 t.getOrderedConfigs() 返回就是已排序ConfigList)</span><br><span class="line">按顺序 ConfigList.setEntryIndex()</span><br><span class="line">按顺序遍历 每个 type中的 ConfigList中的 Entry: entry.assignResouceIds() 赋值bag中每个key的资源id &#125;</span><br><span class="line"></span><br><span class="line">  编译 layout/anim/animator/interpolator/transition/xml/drawable/color/menu 中的xml文件</span><br><span class="line">  compileXmlFile()</span><br><span class="line"></span><br><span class="line">  编译自动生成的xml</span><br><span class="line">  编译manifest</span><br><span class="line">  生成最终resource table: table.addSymbols(assets-&gt;getSymbolsFor(&quot;R&quot;)) 按已排序好的 Type 和 ConfigList 添加 symbol</span><br><span class="line">重新flatten, 输出到resources.arsc</span><br><span class="line">  validate检查一遍</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-&gt; ResourceTable.cpp compileResourceFile(*bundle, &amp;assets, ..., *outTable) &#123;</span><br><span class="line">  设 symbols = asset.getSymbolsFor(&quot;R&quot;)</span><br><span class="line">  switch(标签)</span><br><span class="line">case &quot;skip&quot;: 跳过</span><br><span class="line">case &quot;eat_comment&quot;: 跳过</span><br><span class="line">case &quot;public&quot;: &#123;</span><br><span class="line">  取type,name,id. outTable.addPublic() -&gt; Type.addPublic()</span><br><span class="line">Type.mPublicIndex = typeId(即资源id中间8位值)</span><br><span class="line">  symbols.addNestedSymbol(type, srcPos)</span><br><span class="line">  symbols.makeSymbolPublic(name, srcPos) &#125;</span><br><span class="line">case &quot;public-padding&quot;: 略</span><br><span class="line">case &quot;private-symbols&quot;: 略</span><br><span class="line">case &quot;java-symbol&quot;: 略</span><br><span class="line">case &quot;add-resouce&quot;: 略</span><br><span class="line">case &quot;declare-stylable&quot;: &#123;</span><br><span class="line">  取name</span><br><span class="line">  symbols.addNestedSymbol(&quot;stylable&quot;, srcPos)</span><br><span class="line">  symbols.addNestedSymbol(name, srcPos)</span><br><span class="line">  遍历XML子tag: compileAttribute(file, block, ..., &amp;itemIdent, inStylable==true)</span><br><span class="line">  symbols.addSymbol(itemIdent, 0, srcPos) &#125;</span><br><span class="line">case &quot;attr&quot;: compileAttribute(file, block, myPackage, outTable, outIdent==NULL, inStylable==false)</span><br><span class="line">case &quot;item&quot;: 略</span><br><span class="line">case &quot;string&quot;: 略</span><br><span class="line">case &quot;drawable&quot;: curTag=curType=&quot;drawable&quot;, curFormat=TYPE_REFERENCE|TYPE_COLOR</span><br><span class="line">case &quot;color&quot;: curTag, curType, curFormat</span><br><span class="line">case &quot;bool&quot;/&quot;integer&quot;/&quot;dimen&quot;/&quot;fraction&quot;/&quot;style&quot;/&quot;plurals&quot;: 基本同上</span><br><span class="line">case &quot;bag&quot;: curType=取type, curIsBag=true</span><br><span class="line">case &quot;array&quot;: curFormat=parse_flags(取format)</span><br><span class="line">case &quot;string-array&quot;: 略</span><br><span class="line">case &quot;integer-array&quot;: 略</span><br><span class="line"></span><br><span class="line">对bag/style/plurals/array/string-array/integer-array: curIsBag=true 解释: bag其实就是 自定义枚举集合 的意思</span><br><span class="line">对array/string-array/integer-array: curIsBagReplaceOnOverwrite=true</span><br><span class="line"></span><br><span class="line">if(curIsBag)</span><br><span class="line">  outTable.startBag()</span><br><span class="line">  parseAndAddBag() &#123;</span><br><span class="line">  outTable.addBag() overlay overwrite==true时, framework已有的可以覆盖, 没有的要用add-resource &#125;</span><br><span class="line">else</span><br><span class="line">  parseAndAddEntry(ResourceTable *outTable) &#123;</span><br><span class="line">  对于overlay, 传入的overwrite==true, framework已有的可以覆盖, 没有的要用add-resource</span><br><span class="line">outTable.addEntry() 实际添加到ResourceTable中对应 Type 的</span><br><span class="line">  (DefaultKeyedVector&lt;String16, sp&lt;ConfigList&gt; &gt; mConfigs).valueFor(entry)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  检查确认每个resource都有 default variant</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-&gt; compileAttribute() &#123;</span><br><span class="line">attr = PendingAttribute(myPackage, inFile, block, inStylable)</span><br><span class="line">取name, format</span><br><span class="line">attr.createIfNeeded(outTable)</span><br><span class="line">取min, max, localization, 若有则 outTable.addBag()</span><br><span class="line">遍历XML子tag:</span><br><span class="line">  非 TYPE_ENUM或TYPE_FALGS, 报错</span><br><span class="line">  if 第一次: outTable.addBag(bagKey==&quot;^type&quot;, value==type数字, replace==true)</span><br><span class="line">  outTable.addBag(bagKey==当前enum/flag的name, value==XML value字段, replace==false)</span><br><span class="line">appendTypeInfo()</span><br><span class="line">outTable.appendTypeComment() &#125;</span><br><span class="line"></span><br><span class="line">-&gt; PendingAttribute.createIfNeeded() &#123;</span><br><span class="line">if(added) return;</span><br><span class="line">added = true</span><br><span class="line">outTable.addBag(bagKey==&quot;^type&quot;, value==type数字, replace==false) &#125;</span><br><span class="line">可以得出</span><br><span class="line">  attr标签 format/min/max/localization 做一个bag, item是自己;</span><br><span class="line">  否则 若有子tag, 子tag必须是enum/flag, 做一个bag, 每个子tag做成一个item</span><br><span class="line"></span><br><span class="line">-&gt; addBag(srcPos, package, type, name, bagParent, bagKey, value, *style, &amp;params, replace, isId, format)&#123;</span><br><span class="line">e=ResourceTable::getEntry(package, type, name, srcPos, replace, params)</span><br><span class="line">e.addToBag(sourcePos, bagKey, value, style, replace, isId, format) &#125;</span><br><span class="line"></span><br><span class="line">-&gt; ResouceTable::getEntry(overlay==replace) &#123;</span><br><span class="line">    Type t=getType(package, type, sourcePos, doSetIndex)</span><br><span class="line">    t.getEntry(name, sourcePos, config, dotSetIndex, overlay, bundle.autoOverlay) &#125;</span><br><span class="line"></span><br><span class="line">-&gt; Entry.addToBag(...) &#123;</span><br><span class="line">makeItABag(srcPos) 将自己的mType设为 TYPE_BAG</span><br><span class="line">item=Item(srcPos, isId, value, style, format)</span><br><span class="line">if(已有key):</span><br><span class="line">  if(!replace) 报错</span><br><span class="line">  else mBag.replaceValueFor(key, item)</span><br><span class="line">mBag.add(key, item)</span><br><span class="line">mBag是Entry成员, 类型是 KeyedVector&lt;String16, Item&gt; &#125;</span><br><span class="line">Item 类型有 TYPE_BAG/TYPE_ITEM, 当类型是TYPE_BAG时 mBag 包含当前bag的所有item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ResourceTable.cpp compileXmlFile(*bundle, &amp;assets, *table, XMLNode&amp; root, AaptFile&amp; target) &#123;</span><br><span class="line">  root.assignResouceIds(assets, table) 设置的 id 会在 flatten 时用到</span><br><span class="line">root.parseValues(assets, table) 记录当前解析的xml源码行号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写到-R-java-的流程"><a href="#写到-R-java-的流程" class="headerlink" title="写到 R.java 的流程"></a>写到 R.java 的流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Command.cpp::doPackage() &#123; framework 生成时包名就是自身, 所以 havePrivateSymbols() 为 false &#125;</span><br><span class="line">-&gt; Resource.cpp::WriteResourceSymbols(AaptAssets assets, includePrivate=true) &#123;</span><br><span class="line">遍历 assets-&gt;getSymbols(): 这里的symbol就是上面的 addSymbol() 加的</span><br><span class="line">  可能不同 类前缀包名/R.java 输出位置</span><br><span class="line">  WriteSymbolClass(AaptSymbols symbols)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; WriteSymbolClass(AaptSymbols symbols) &#123;</span><br><span class="line">  // framework-res 编译过程中 havePrivateSymbols()==false, 所以下面的遍历没有跳过任何内容</span><br><span class="line">  遍历 symbols-&gt;getSymbols() 所有 TYPE_INT32 类型(跳过非 javaSymbol): (AaptSymbolEntry sym).int32Val</span><br><span class="line">  遍历 symbols-&gt;getSymbols() 所有 TYPE_STRING 类型(跳过非 javaSymbol): sym.stringVal.string()</span><br><span class="line">遍历 symbols-&gt;getNestedSymbols(), styleableSymbols除外: 递归 WriteSymbolClass()</span><br><span class="line">writeLayoutClasses(styleableSymbols)</span><br><span class="line">if emitCallback: writeResourceLoadedCallback() &#125;</span><br><span class="line">  -&gt; 递归调用 WriteSymbolClass</span><br></pre></td></tr></table></figure><!--# overlay 的 values 目录 添加某些xml标签出错## 原因overlay中定义的 attr 若和framework中相同, 会在 compileAttribute() 报错## 解决目标cp -r frameworks/base/core/res/res/ device/myvendor/overlay/frameworks/base/core/res/ 全部拷贝过来都可用1. attr 重复定义报错PendingAttribute::createIfNeeded() 注释掉重复报错2. overlay attr createIfNeeded() addBag() 重复添加bag报错createIfNeeded() outTable.addBag() 调用加参数 replace==true3. 第2步添加replace后再添加attr时 传到 getEntry() 的 overlay==replace==true 导致-x 时自动添加 autoAddOverlay(代码 or 脚本 实现?)!!! 2,3步 可以改为 compileAttribute()多传一个 isOverlay=compileResouceFile()的overwrite参数, replace=isOverlay4. compileAttribute() addBag() 重复添加item报错compileAttribute() 所有addBag() 调用加参数 replace==true5. 验证无attr重复定义时可以正确编译6. 验证整个framework res拷贝过来 可以正确编译7. 验证编普通应用(如Launcher2) 可以正确编译-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Resource Id 32位 = 8(packageId) + 8(typeId) + 16(nameId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ResourceTable.cpp::makeResId()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;framework-res典型调用&quot;&gt;&lt;a href=&quot;#framework-res典型调用&quot; class=&quot;headerlink&quot; title=&quot;framework-res典型调用&quot;&gt;&lt;/a&gt;framework-res典型调用&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;out/host/linux-x86/bin/aapt package -u -x -z  --pseudo-localize   -M frameworks/base/core/res/AndroidManifest.xml -S device/myvendor/overlay/frameworks/base/core/res/res -S frameworks/base/core/res/res -A frameworks/base/core/res/assets  --min-sdk-version 22 --target-sdk-version 22 --product phone --version-code 22 --version-name 5.1.1-2.0.16   -F out/target/common/obj/APPS/framework-res_intermediates/package-export.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h1&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>PlantUML 基础</title>
    <link href="http://yoursite.com/misc/plantuml%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/misc/plantuml基础/</id>
    <published>2016-09-07T03:12:58.000Z</published>
    <updated>2019-05-03T13:05:47.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">&apos;comment</span><br><span class="line"></span><br><span class="line">/&apos; multiline</span><br><span class="line">comments</span><br><span class="line">&apos;/</span><br><span class="line"></span><br><span class="line">title First Page Title</span><br><span class="line">&apos; some diagram</span><br><span class="line"></span><br><span class="line">newpage</span><br><span class="line"></span><br><span class="line">&apos; some other diagram</span><br><span class="line"></span><br><span class="line">&apos; legend 图注 left/center/right</span><br><span class="line">legend center</span><br><span class="line">XX Diagram</span><br><span class="line">endlegend</span><br><span class="line"></span><br><span class="line">&apos; note left/left of/right/right of/over Alice</span><br><span class="line">note left: First note</span><br><span class="line"></span><br><span class="line">note right</span><br><span class="line">Second note</span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line">&apos; == Divider ==</span><br><span class="line"></span><br><span class="line">/&apos; space</span><br><span class="line">|||</span><br><span class="line">||45|| == 45px</span><br><span class="line">&apos;/</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Parent</span><br><span class="line">class Child</span><br><span class="line">Parent &lt;|-- Child</span><br><span class="line"></span><br><span class="line">&apos; 同生同死</span><br><span class="line">class CompositeChild</span><br><span class="line">CompositeChild : Parent strongRef</span><br><span class="line">Parent *-- CompositeChild</span><br><span class="line"></span><br><span class="line">&apos; 不同生同死</span><br><span class="line">class AggregateChild &#123;</span><br><span class="line">Parent gettWeakParent()</span><br><span class="line">&#123;static&#125; getStaticField()</span><br><span class="line">&#123;abstract&#125; doAbstractMath()</span><br><span class="line">&#125;</span><br><span class="line">Parent o-- AggregateChild</span><br><span class="line"></span><br><span class="line">abstract class &quot;Pure Abstract Class within parens&quot;</span><br><span class="line">interface IInterface</span><br><span class="line">class GenericClass&lt;? extends G&gt;</span><br><span class="line"></span><br><span class="line">package &quot;My Package&quot; &#123;</span><br><span class="line">IInterface ()- Parent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B: -&gt; solid</span><br><span class="line">B --&gt; A: --&gt; dash</span><br><span class="line">A -&gt;x B: -&gt;x</span><br><span class="line">A -&gt;&gt; B: -&gt;&gt;</span><br><span class="line">A \[#blue]- B: \[#blue]-</span><br><span class="line">autonumber</span><br><span class="line">A -&gt; B: autonumber1, ||| == space</span><br><span class="line">|||</span><br><span class="line">autonumber 10</span><br><span class="line">A -&gt; B: autonumber 10, ... == delay</span><br><span class="line">... Delayed ...</span><br><span class="line">autonumber 20 5</span><br><span class="line">A -&gt; B: autonumber 20 5-1</span><br><span class="line">A -&gt; B: autonumber 20 5-2</span><br><span class="line">A -&gt; B: autonumber stop == (should work)</span><br><span class="line">A -&gt; B: activate B</span><br><span class="line">activate B</span><br><span class="line">B -&gt; A: deactivate B</span><br><span class="line">deactivate B</span><br><span class="line">A -&gt; C: activate C</span><br><span class="line">activate C</span><br><span class="line">A -&gt; C: destroy C</span><br><span class="line">destroy C</span><br><span class="line"></span><br><span class="line">create D</span><br><span class="line">A -&gt; D: create D</span><br><span class="line"></span><br><span class="line">[-&gt; A: [ Incoming</span><br><span class="line">A -&gt;]: ] Outgoing</span><br><span class="line"></span><br><span class="line">participant E &lt;&lt; Stereotype &gt;&gt;</span><br><span class="line">A -&gt; E: stereotype</span><br><span class="line">participant F &lt;&lt; (S,#ADD1B2) Stereotype &gt;&gt;</span><br><span class="line">A -&gt; F: Stereotype with colored Spot</span><br><span class="line"></span><br><span class="line">box &quot;box #LightBlue&quot; #LightBlue</span><br><span class="line">participant E</span><br><span class="line">participant F</span><br><span class="line">end box</span><br><span class="line">E -&gt; F: box encompass</span><br><span class="line"></span><br><span class="line">actor Actor1</span><br><span class="line">boundary Boundary1</span><br><span class="line">control Control1</span><br><span class="line">entity Entity1</span><br><span class="line">database Database1</span><br><span class="line"></span><br><span class="line">participant &quot;Long name #red&quot; as L #red</span><br><span class="line">L -&gt; L: recursion</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本框架&quot;&gt;&lt;a href=&quot;#基本框架&quot; class=&quot;headerlink&quot; title=&quot;基本框架&quot;&gt;&lt;/a&gt;基本框架&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@startuml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;comment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;apos; multiline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title First Page Title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; some diagram&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newpage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; some other diagram&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; legend 图注 left/center/right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;legend center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XX Diagram&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endlegend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; note left/left of/right/right of/over Alice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note left: First note&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Second note&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end note&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; == Divider ==&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;apos; space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;||45|| == 45px&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@enduml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Fresco 源码分析</title>
    <link href="http://yoursite.com/android/fresco/"/>
    <id>http://yoursite.com/android/fresco/</id>
    <published>2016-09-07T03:03:58.000Z</published>
    <updated>2019-05-03T12:58:00.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SimpleDraweeView-显示流程"><a href="#SimpleDraweeView-显示流程" class="headerlink" title="SimpleDraweeView 显示流程"></a>SimpleDraweeView 显示流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SDV: SimpleDraweeView</span><br><span class="line">PDCBuilder: PipelineDraweeControllerBuilder</span><br><span class="line">ADCBuilder: AbstractDraweeControllerBuilder</span><br><span class="line">ADController: AbstractDraweeController</span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SDV.setImageURI() &#123;</span><br><span class="line">  controller = PDCBuilder.setUri(uri).setOldController(getController()).build()</span><br><span class="line">  setController(controller)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; (PDCBuilder 父类 ADCBuilder).buildController()</span><br><span class="line">  -&gt; PDCBuilder.obtainController() &#123; 清空现在的listeners &#125;</span><br><span class="line">  -&gt; ADCBuilder.maybeAttachListeners(controller) &#123;</span><br><span class="line">    只剩 ADCBuilder.mBoundControllerListeners, 此成员在 ADCBuilder ctor中赋值为null</span><br><span class="line">    &#125;</span><br><span class="line">-&gt; (SDV 父类 DraweeView).setController()</span><br><span class="line">  -&gt; DraweeHolder.setController()</span><br></pre></td></tr></table></figure><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在 WindowManger系统 SDV.onAttach() 时</span><br><span class="line">(SDV 父类 DraweeView).onAttach()</span><br><span class="line">-&gt; DraweeView.doAttach()</span><br><span class="line">  -&gt; DraweeHolder.onAttach()</span><br><span class="line">    -&gt; DraweeHolder.attachOrDetachController()</span><br><span class="line">      -&gt; DraweeHolder.attachController()</span><br><span class="line">        -&gt; AbstractDraweeController.onAttach()</span><br><span class="line">          -&gt; ADController.submitRequest() &#123;</span><br><span class="line">            若cache到, 直接调用 onNewResultInternal();</span><br><span class="line">            若无cache, mDataSource.subscribe(DataSubscriber), 在 onNewResultImpl()调用 onNewResultInternal() 或 onFailureInternal() &#125;</span><br><span class="line">-回调-&gt; ADController.onNewResultInternal() &#123;</span><br><span class="line">  mSettableDraweeHierarchy.setImage(drawable..)</span><br><span class="line">  isFinished: &#123; getControllerListener().onFinalImageSet() &#125;</span><br><span class="line">  否则: &#123; getControllerListener().onIntermediateImageSet() &#125;</span><br></pre></td></tr></table></figure><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fresco.initialize()</span><br><span class="line">-&gt; ImagePipelineFactory.initialize(ImagePipelineConfig) &#123; new ImagePipelineFactory() &#125;</span><br><span class="line">  -&gt; ImagePipelineFactory.ctor() &#123; mThreadHandoffProducerQueue = DefaultExecutorSupplier.mLightWeightBackgroundExecutor &#125;</span><br></pre></td></tr></table></figure><h3 id="提交到线程"><a href="#提交到线程" class="headerlink" title="提交到线程"></a>提交到线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(父类 ADController).submitRequest()</span><br><span class="line">-&gt; PipelineDraweeController.getDataSource()</span><br><span class="line">  -&gt; PDCBuilder.getDataSourceForRequest()</span><br><span class="line">    -&gt; ImagePipeline.fetchDecodedImage()</span><br><span class="line">      -&gt; ImagePipeline.submitFetchRequest() &#123; ClosableProducerToDataSourceAdapter.create() &#125;</span><br><span class="line">        -&gt; (ClosableProducerToDataSourceAdapter 父类 AbstractProducerToDataSourceAdapter).ctor()</span><br><span class="line">          -&gt; BitmapMemoryCacheGetProducer.produceResults()</span><br><span class="line">            -&gt; ThreadHandoffProducer.produceResults()</span><br><span class="line">              -&gt; ThreadHandoffProducerQueue.addToQueueOrExecute() &#123; mExecutor.execute() &#125;</span><br><span class="line">                -executor线程-&gt; StatefulProducerRunnable ThreadHandoffProducer.statefulRunnable.onSuccess()</span><br><span class="line">                  -&gt; (BitmapMemoryCacheKeyMultiplexProducer 父类 MultiplexProducer).produceResults()</span><br><span class="line">                    -&gt; MultiplexProducer.startInputProducerIfHasAttachedConsumers()</span><br><span class="line">                      -&gt; BitmapMemoryCacheProducer.produceResults()</span><br><span class="line">                        -&gt; DecodeProducer.produceResults()</span><br><span class="line">                          -&gt; LocalImageProgressiveDecoder.ctor()</span><br><span class="line">                            -&gt; 父类 ProgressiveDecoder.ctor() &#123; JobRunnable 此job被执行时 doDecode() &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AbstractDataSource.subscribe() &#123;</span><br><span class="line">  mDataSourceStatus在ctor赋初始值 IN_PROGRESS:</span><br><span class="line">    mSubscribers.add(Pair(dataSubscriber, ADController.mUiThreadImmediateExecutor))</span><br><span class="line">  shouldNotify==false: 忽略 &#125;</span><br><span class="line"></span><br><span class="line">JobScheduler</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SimpleDraweeView-显示流程&quot;&gt;&lt;a href=&quot;#SimpleDraweeView-显示流程&quot; class=&quot;headerlink&quot; title=&quot;SimpleDraweeView 显示流程&quot;&gt;&lt;/a&gt;SimpleDraweeView 显示流程&lt;/
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="fresco" scheme="http://yoursite.com/tags/fresco/"/>
    
  </entry>
  
  <entry>
    <title>duilib使用小结</title>
    <link href="http://yoursite.com/misc/duilib%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/misc/duilib使用/</id>
    <published>2016-07-07T00:42:42.000Z</published>
    <updated>2019-05-03T13:02:18.674Z</updated>
    
    <content type="html"><![CDATA[<p>版本: https://github.com/duilib/duilib master</p><p>环境: vs2013</p><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><p>新建空的win32工程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;UILib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDuiFrameWnd</span> :</span> <span class="keyword">public</span> WindowImplBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> LPCTSTR <span class="title">GetWindowClassName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _T(<span class="string">"DUIMainFrame"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> CDuiString <span class="title">GetSkinFile</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _T(<span class="string">"duilib.xml"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> CDuiString <span class="title">GetSkinFolder</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _T(<span class="string">""</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">    CPaintManagerUI::SetInstance(hInstance);</span><br><span class="line"></span><br><span class="line">    CDuiFrameWnd duiFrame;</span><br><span class="line">    duiFrame.Create(<span class="literal">NULL</span>, _T(<span class="string">"DUIWnd"</span>), UI_WNDSTYLE_FRAME, WS_EX_WINDOWEDGE);</span><br><span class="line">    duiFrame.CenterWindow();</span><br><span class="line">    duiFrame.ShowModal();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="xml布局"><a href="#xml布局" class="headerlink" title="xml布局"></a>xml布局</h1><p>duilib.xml 需要同步到exe目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">name</span>=<span class="string">"closebtn"</span> <span class="attr">tooltip</span>=<span class="string">"关闭"</span>   <span class="attr">float</span>=<span class="string">"true"</span> <span class="attr">pos</span>=<span class="string">"44,5,74,24"</span> <span class="attr">width</span>=<span class="string">"28"</span> <span class="attr">normalimage</span>=<span class="string">" file='SysBtn\CloseNormal.bmp' "</span> <span class="attr">hotimage</span>=<span class="string">" file='SysBtn\CloseFocus.bmp' "</span> <span class="attr">pushedimage</span>=<span class="string">" file='SysBtn\CloseFocus.bmp' "</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>tooltip=”关闭”         提示文字float=”true”           绝对定位，其位置由pos属性指定</p><p>布局可以 VerticalLayout 为根节点, HorizontalLayout/VerticalLayout 穿插搭配. 某个Layout指定宽高, 可以用同类型做占位填充剩余空间:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VerticalLayout</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 占位 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HorizontalLayout</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HorizontalLayout</span> <span class="attr">height</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">HorizontalLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VerticalLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>重载 InitWindow:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> <span class="keyword">void</span> WindowImplBase::InitWindow()</span><br><span class="line">&#123;</span><br><span class="line">  CEditUI* pEdit = <span class="keyword">static_cast</span>&lt;CEditUI*&gt;(m_PaintManager.FindControl(_T(<span class="string">"startMac"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自绘控件"><a href="#自绘控件" class="headerlink" title="自绘控件"></a>自绘控件</h1><p>TODO</p><h1 id="事件消息处理-1"><a href="#事件消息处理-1" class="headerlink" title="事件消息处理 1"></a>事件消息处理 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h1><p>方法1: 重载 Notify</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> <span class="keyword">void</span> WindowImplBase::Notify(TNotifyUI&amp; msg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( msg.sType == _T(<span class="string">"windowinit"</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( msg.sType == DUI_MSGTYPE_CLICK ) <span class="comment">// 对应 _T("click")</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.pSender-&gt;GetName() == _T(<span class="string">"btnGen"</span>)) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (msg.pSender-&gt;GetName() == _T(<span class="string">"btnClose"</span>))</span><br><span class="line">&#123;</span><br><span class="line">PostMessage(WM_CLOSE); <span class="comment">// 退出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>增加rc资源文件</p><h2 id="xml和图片资源-假设全在根目录下-不包括子目录"><a href="#xml和图片资源-假设全在根目录下-不包括子目录" class="headerlink" title="xml和图片资源(假设全在根目录下, 不包括子目录)"></a>xml和图片资源(假设全在根目录下, 不包括子目录)</h2><h3 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h3><p>直接放在根目录</p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>xml 和所有资源 打包成zip, 放在跟目录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPaintManagerUI::SetResourcePath(CPaintManagerUI::GetInstancePath());</span><br><span class="line">CPaintManagerUI::SetResourceZip(_T(<span class="string">"res.zip"</span>));</span><br></pre></td></tr></table></figure><h3 id="rc资源raw"><a href="#rc资源raw" class="headerlink" title="rc资源raw"></a>rc资源raw</h3><p>TODO</p><h3 id="rc资源zip-2"><a href="#rc资源zip-2" class="headerlink" title="rc资源zip 2"></a>rc资源zip <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3><p>rc资源 添加 导入zip, 类型为 ZIPRES</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> UILIB_RESOURCETYPE WindowImplBase::GetResourceType() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> UILIB_ZIPRESOURCE; &#125;</span><br><span class="line"><span class="keyword">virtual</span> LPCTSTR WindowImplBase::GetResourceID() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> MAKEINTRESOURCE(IDR_ZIPRES1); &#125;</span><br></pre></td></tr></table></figure><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>重编编译 DuiLib项目: 选择对应的 debug/release 版本, 设置为编译静态库, 添加 UILIB_STATIC 预编译宏. 编译出的lib(release版)改名 DuiLib_s.lib(unicode版名 DuiLib_us.lib), 放入Lib目录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UILIB_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;UIlib.h&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UILIB_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_uds.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Duilib_ds.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_us.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_s.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_ud.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Duilib_d.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_u.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="图标-3"><a href="#图标-3" class="headerlink" title="图标 3"></a>图标 <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h2><p>exe静态图标:添加 资源 -&gt; Icon 导入</p><p>exe运行图标:duiFrame.create() 之后调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duiFrame.SetIcon(IDI_ICON);</span><br></pre></td></tr></table></figure><h2 id="添加版本信息"><a href="#添加版本信息" class="headerlink" title="添加版本信息"></a>添加版本信息</h2><p>添加 资源 -&gt; Version</p><h1 id="其他-4"><a href="#其他-4" class="headerlink" title="其他 4"></a>其他 <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></h1><h2 id="设置标题栏区域"><a href="#设置标题栏区域" class="headerlink" title="设置标题栏区域"></a>设置标题栏区域</h2><p>xml Window节点 caption属性, 指定标题栏区域(top,left,right,bottom)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">size</span>=<span class="string">"800,600"</span> <span class="attr">caption</span>=<span class="string">"0,0,0,32"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="窗口大小调整"><a href="#窗口大小调整" class="headerlink" title="窗口大小调整"></a>窗口大小调整</h2><p>xml Window节点 sizebox属性, 边缘可调范围</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">size</span>=<span class="string">"800,600"</span> <span class="attr">sizebox</span>=<span class="string">"4,4,4,4"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="窗口最小尺寸"><a href="#窗口最小尺寸" class="headerlink" title="窗口最小尺寸"></a>窗口最小尺寸</h2><p>xml Window节点 mininfo属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">size</span>=<span class="string">"800,600"</span> <span class="attr">mininfo</span>=<span class="string">"600,400"</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.cnblogs.com/Alberl/p/3352904.html" rel="external nofollow noopener noreferrer" target="_blank">duilib-事件处理</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.csdn.net/x356982611/article/details/39271205" rel="external nofollow noopener noreferrer" target="_blank">duilib-zip-rc</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="http://stackoverflow.com/questions/320677/how-do-i-set-the-icon-for-my-application-in-visual-studio-2008" rel="external nofollow noopener noreferrer" target="_blank">win32-icon</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.cnblogs.com/Alberl/p/3354294.html" rel="external nofollow noopener noreferrer" target="_blank">duilib-misc</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;版本: https://github.com/duilib/duilib master&lt;/p&gt;
&lt;p&gt;环境: vs2013&lt;/p&gt;
&lt;h1 id=&quot;基本内容&quot;&gt;&lt;a href=&quot;#基本内容&quot; class=&quot;headerlink&quot; title=&quot;基本内容&quot;&gt;&lt;/a&gt;基本内容&lt;
      
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 构建系统 源码分析</title>
    <link href="http://yoursite.com/android/build-system/"/>
    <id>http://yoursite.com/android/build-system/</id>
    <published>2016-07-02T01:10:10.000Z</published>
    <updated>2019-05-03T12:51:57.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-aosp-5-1-1-r6"><a href="#版本-aosp-5-1-1-r6" class="headerlink" title="版本 aosp-5.1.1_r6"></a>版本 aosp-5.1.1_r6</h1><h1 id="build-envsetup-sh"><a href="#build-envsetup-sh" class="headerlink" title="build/envsetup.sh"></a>build/envsetup.sh</h1><p>作用:</p><ul><li>找 vendorsetup.sh (收集 lunch combo)</li><li>设置编译 JAVA_HOME</li><li>设置其他shell参数<ul><li>TARGET_PRODUCT</li><li>不包括 TARGET_DEVICE(在product_config.mk定义)</li><li>TARGET_BUILD_VARIANT</li><li>TARGET_BUILD_TYPE</li><li>TARGET_BUILD_APPS</li></ul></li><li>定义快捷命令<ul><li>lunch</li><li>croot</li><li>m</li><li>mm</li><li>mmm</li><li>mma</li><li>mmma</li><li>mgrep</li><li>jgrep</li><li>sgrep</li><li>resgrep</li><li>godir</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">找device和vendor目录下的vendorsetup.sh 并 source</span><br><span class="line">addcompletions() 找 sdk/bash_completion 下 [a-z]*.bash 并 source</span><br><span class="line">  function gettop&#123;&#125; 返回aosp编译根目录</span><br><span class="line">  </span><br><span class="line">  function lunch&#123;&#125;</span><br><span class="line">    TARGET_PRODUCT=$product</span><br><span class="line">    TARGET_BUILD_VARIANT=$variant</span><br><span class="line">    TARGET_BUILD_TYPE=release</span><br><span class="line">    aosp_strawberry-userdebug 其中 product==aosp_strawberry, variant==userdebug</span><br><span class="line"></span><br><span class="line">设置shell变量, 如 $ANDROID_BUILD_TOP</span><br></pre></td></tr></table></figure><h1 id="调用关系-按先后顺序"><a href="#调用关系-按先后顺序" class="headerlink" title="调用关系(按先后顺序)"></a>调用关系(按先后顺序)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AndroidProducts.mk</span><br><span class="line">&lt;- build/core/product_config.mk 通过 $(get-all-product-makefils) 查找device,vendor下AndroidProducts.mk, 导入 all_product_configs</span><br><span class="line"></span><br><span class="line">BoardConfig.mk</span><br><span class="line">&lt;- build/core/envsetup.mk 通过查找 device,vendor 下 $(TARGET_DEVICE)/BoardConfig.mk 包含进来, 设置到 board_config_mk</span><br><span class="line">  &lt;- TARGET_DEVICE 在 envsetup.mk 定义 TARGET_DEVICE := $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_DEVICE)</span><br><span class="line">  &lt;- INTERNAL_PRODUCT 在 product_config.mk 定义 INTERNAL_PRODUCT := $(call resolve-short-product-name, $(TARGET_PRODUCT))</span><br><span class="line">  &lt;- PRODUCT_DEVICE 由不同的 device 位置下定义</span><br><span class="line"></span><br><span class="line">AndroidBoard.mk</span><br><span class="line">&lt;- build/target/board/Android.mk -include $(TARGET_DEVICE_DIR)/AndroidBoard.mk</span><br><span class="line">&lt;- TARGET_DEVICE_DIR 在 build/core/envsetup.mk 定义 TARGET_DEVICE_DIR := $(patsubst %/,%,$(dir $(board_config_mk)))</span><br></pre></td></tr></table></figure><h1 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ANDROID_BUILD_TOP/Makefile</span><br><span class="line">-&gt; build/core/main.mk 定义 TOPDIR 为空, BUILD_SYSTEM := $(TOPDIR)build/core</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/help.mk</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/config.mk( 定义 BUILD_XXX 对应的各个mk, 供以后include )</span><br><span class="line">    -&gt; $(BUILD_SYSTEM)/envsetup.mk ( 定义 PRODUCT_OUT )</span><br><span class="line">      -&gt; $(BUILD_SYSTEM)/product_config.mk</span><br><span class="line">        -&gt; $(BUILD_SYSTEM)/node_fns.mk</span><br><span class="line">        -&gt; $(BUILD_SYSTEM)/product.mk</span><br><span class="line">        -&gt; $(BUILD_SYSTEM)/device.mk</span><br><span class="line">        -&gt; $(TARGET_PRODUCT)(来自envsetup.sh) 的 AndroidProducts.mk &#123;</span><br><span class="line">          call product.mk:import-products</span><br><span class="line">            -&gt; node_fns.mk:import-nodes(间接定义 PRODUCTS==目标mk文件列表, 同时PRODUCTS本身也用作一个前缀)</span><br><span class="line">            -&gt; _import-nodes-inner -&gt; import-node -&gt; include</span><br><span class="line">          定义 INTERNAL_PRODUCT== $(TARGET_PRODUCT)扩展出来的目标mk文件</span><br><span class="line">          &#125;</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/cleanbuild.mk</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/definitions.mk</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/dex_preopt.mk</span><br><span class="line">  -&gt; build/core/pdk_config.mk</span><br></pre></td></tr></table></figure><h1 id="recovery"><a href="#recovery" class="headerlink" title="recovery"></a>recovery</h1><ul><li>build/core/Makefile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">公共资源路径</span><br><span class="line">recovery_resources_common := $(call include-path-for, recovery)/res</span><br><span class="line">include-path-for 定义在 pathmap.mk 中 pathmap_INCL</span><br><span class="line">默认 recovery_resources_common := $(recovery_resources_common)-xhdpi</span><br><span class="line"></span><br><span class="line">私有资源路径</span><br><span class="line">recovery_resources_private := $(strip $(wildcard $(TARGET_DEVICE_DIR)/recovery/res))</span><br><span class="line"></span><br><span class="line">编译依赖</span><br><span class="line">recovery_resource_deps := $(shell find $(recovery_resources_common) $(recovery_resources_private) -type f)</span><br><span class="line"></span><br><span class="line">拷贝 recovery 资源</span><br><span class="line">$(INSTALLED_RECOVERY_IMAGE_TARGET): $(recovery_binary)... 等</span><br><span class="line">        cp -rf $(recovery_resources_common)/* $(TARGET_RECOVERY_ROOT_OUT)/res</span><br><span class="line">        $(foreach item,$(recovery_resouces_private), cp -rf $(item) $(TARGET_RECOVERY_ROOT_OUT)/)</span><br></pre></td></tr></table></figure><h1 id="apicheck"><a href="#apicheck" class="headerlink" title="apicheck"></a>apicheck</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apicheck.mk &#123; .PHONY checkapi; droidcore: checkapi &#125;</span><br></pre></td></tr></table></figure><h1 id="Add-on"><a href="#Add-on" class="headerlink" title="Add-on"></a>Add-on</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">主mk: device/sample/products/sample_addon.mk</span><br><span class="line">&lt;- device/sample/products/AndroidProducts.mk</span><br><span class="line">&lt;- build/core/product.mk</span><br><span class="line">  function  _find-android-products-files</span><br><span class="line">  查找 device, vendor, $(SRC_TARGET_DIR)/product 目录下所有 AndroidProducts.mk</span><br><span class="line">  &lt;- function get-all-product-makefiles</span><br><span class="line">     返回排序好的所有 AndroidProducts.mk 定义的 PRODUCT_MAKEFILES</span><br><span class="line">    &lt;- build/core/product_config.mk</span><br><span class="line">       all_product_configs 从中找到对应 product 的 makefile</span><br><span class="line">       all_product_makefiles 集合所有product的makefile</span><br><span class="line">       call import-products 导入product的makefile</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">device/sample/products/AndroidProducts.mk</span><br><span class="line">PRODUCT_MAKEFILES := $(LOCAL_DIR)/sample_addon.mk</span><br><span class="line">PRODUCT_PACKAGES := PlatformLibraryClient \</span><br><span class="line">com.example.android.platform_library \</span><br><span class="line">libplatform_library_jni</span><br><span class="line"></span><br><span class="line">依赖 com.example.android.platform_library 来自</span><br><span class="line">device/sample/frameworks/PlatformLibrary/Android.mk</span><br><span class="line">&lt;- device/sample/frameworks/Android.mk 引入所有子目录mk</span><br><span class="line">&lt;- device/sample/Android.mk 引入所有子目录mk</span><br></pre></td></tr></table></figure><p>使用到的主mk: build/core/tasks/sdk-addon.mk</p><ol><li>MODULES 由 fils_to_copy 拷贝到 dest</li><li>COPY_FILES 由 files_to_copy 拷贝到 dest</li><li>TARGET_CPU_API对应的img 拷贝到 $(addon_dir_img)</li><li>修改 TARGET_CPU_API对应的 source.properties, 拷贝到 $(addon_dir_img)</li><li>doc_module 拷贝到 $(OUT_DOCS)</li><li>sdk打包, image打包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function module-installed-files 查找某个module在out目录安装位置</span><br></pre></td></tr></table></figure><h1 id="Overlay"><a href="#Overlay" class="headerlink" title="Overlay"></a>Overlay</h1><p>TODO</p><h1 id="Jack"><a href="#Jack" class="headerlink" title="Jack"></a>Jack</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java-to-jack(definitions.mk)</span><br><span class="line">&lt;- LOCAL_IS_STATIC_JAVA_LIBRARY 构建static javalib 时候 $(full_classes_jack)的命令 (static_java_library.mk)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-aosp-5-1-1-r6&quot;&gt;&lt;a href=&quot;#版本-aosp-5-1-1-r6&quot; class=&quot;headerlink&quot; title=&quot;版本 aosp-5.1.1_r6&quot;&gt;&lt;/a&gt;版本 aosp-5.1.1_r6&lt;/h1&gt;&lt;h1 id=&quot;build-env
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>LibGDX 实现 动态中文/freetype 加载</title>
    <link href="http://yoursite.com/libgdx/dynamic-freetype/"/>
    <id>http://yoursite.com/libgdx/dynamic-freetype/</id>
    <published>2015-01-19T06:01:02.000Z</published>
    <updated>2019-05-03T12:45:15.684Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. JSON读取</span><br><span class="line">Skin.getJsonLoader() -&gt; new Json() -&gt; json.setSerializer()</span><br><span class="line">  读json文件size属性, new FreeTypeBitmapFontStub()</span><br><span class="line">  FreeTypeBitmapFontStub extends BitmapFont</span><br><span class="line">  FreeTypeBitmapFontStub.data instanceof FreeTypeBitmapFontData</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2. Label初始化</span><br><span class="line">new Label() -&gt; Label.setStyle() &#123;</span><br><span class="line">  FreeTypeFontManager.isFreeTypeFont(style.font)==true &#123;</span><br><span class="line">    data.setSize(style.fontSize)</span><br><span class="line">    new FontInfo(data.getSize())</span><br><span class="line">    font = FreeTypeFontManager.getInstance().refresh(style.font==stub, newInfo)</span><br><span class="line">  &#125;</span><br><span class="line">  cache = new BitmapFontCache(font) // cache里的 font == 第一次refresh出来的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">3. 更新文字</span><br><span class="line">Label.setText() -&gt; Widget.invalidateHierarchy()</span><br><span class="line">-&gt; Label.invalidate() &#123; needsLayout=true; sizeInvalid=true &#125;</span><br><span class="line">渲染 -&gt; draw() -&gt; Widget.validate() -&gt; Label.layout()</span><br><span class="line">-&gt; computeSize() -&gt; cache.requireSequence(text) &#123;</span><br><span class="line">  FreeTypeFontManager.isFreeTypeFont(this.font) == true:</span><br><span class="line">    this.font = FreeTypeFontManager.getInstance().refresh(this.font, curFontInfo) &#125;</span><br><span class="line">-&gt; FreeTypeFontManager.refresh(font, newInfo) &#123;</span><br><span class="line">  isStub == false</span><br><span class="line">  newInfo不含在当前子串里:</span><br><span class="line">    getFont(newInfo.size)</span><br><span class="line">-&gt; (FreeTypeFontGenerator)generator.generateFont(sizePixel, sequence, flip==false)</span><br><span class="line">-&gt; FreeTypeFontGenerator.generateData(size, chars, flip, packer==null)</span><br><span class="line">-&gt; FreeTypeFontGenerator.generateData(parameter) &#123;</span><br><span class="line">  parameter.packer == null:</span><br><span class="line">    ownsAtlas = true</span><br><span class="line">    data.regions[i] = new TextureRegion(tex=new Texture()) // new出来的texture</span><br><span class="line">    return data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="libgdx" scheme="http://yoursite.com/categories/libgdx/"/>
    
    
  </entry>
  
  <entry>
    <title>LibGDX skin load 源码分析</title>
    <link href="http://yoursite.com/libgdx/skin-load/"/>
    <id>http://yoursite.com/libgdx/skin-load/</id>
    <published>2014-09-22T09:35:06.000Z</published>
    <updated>2019-05-03T12:41:57.448Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造函数里设置 SkinLoader</span><br><span class="line">AssetManager.ctor() &#123; setLoader(Skin.class, new SkinLoader(resolver==new InternalFileHandleResolver())) &#125;</span><br><span class="line">-&gt; AssetManager.setLoader(Skin.class, suffix==null, SkinLoader)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户程序调 load</span><br><span class="line">AssetManager.load(fileName, Skin.class)</span><br><span class="line">-&gt; AssetManager.load(fileName, Skin.class, parameter==null) &#123;</span><br><span class="line">  getLoader(Skin.class, fileName);</span><br><span class="line">  loadQueue.add(new AssetDescriptor(fileName, Skin.class, parameter))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">用户程序调 finishLoading</span><br><span class="line">AssetManager.finishLoading() &#123; while(!update()) ThreadUtils.yield() &#125;</span><br><span class="line">-&gt; AssetManager.update() &#123; nextTask(); updateTask(); &#125;</span><br><span class="line">AssetManager.nextTask() &#123; assetDesc = loadQueue.removeIndex(0); addTask(assetDesc) or inc ref &#125;</span><br><span class="line">AssetManager.updateTask() &#123; task.update(); addAsset(fileName, type, task.getAsset()) &#125;</span><br><span class="line">-&gt; AssetLoadingTask.update() &#123; handleSyncLoader() or handleAsyncLoader() &#125;</span><br><span class="line">SkinLoader 是 AsynchronousAssetLoader, 这里会调用 handleAsyncLoader()</span><br><span class="line">-&gt; AssetLoadingTask.handleAsyncLoader() &#123;</span><br><span class="line">    // 执行多次,  因为submit到线程池中, 被调 call().</span><br><span class="line">    // SkinLoader.getDependencies() 加入装载 TextureAtlas 的依赖</span><br><span class="line">    exec0:</span><br><span class="line">dependenciesLoaded == false &amp;&amp; depsFuture == null:</span><br><span class="line">    depsFuture = (AsyncExecutor executor).submit(this)</span><br><span class="line">exec1:</span><br><span class="line">dependenciesLoaded == false &amp;&amp; depsFuture.isDone():</span><br><span class="line">    dependenciesLoaded = true</span><br><span class="line">可能的exec2:</span><br><span class="line">loadFuture == null &amp;&amp; !asyncDone:</span><br><span class="line">    loadFuture = executor.submit(this)</span><br><span class="line">    // 会在线程池中执行 AssetLoadingTask.call() -&gt; 即本loader的 loadAsync()</span><br><span class="line">最后的exec:</span><br><span class="line">asyncDone:</span><br><span class="line">    asset = asyncLoader.loadSync(manager, fileName, resolve(loader, assetDesc), params)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SkinLoader.loadSync() &#123; new Skin(atlas).load(file) &#125;</span><br><span class="line">-&gt; Skin.load(skinFile) &#123; getJsonLoader().fromJson(Skin.class, skinFile) &#125;</span><br><span class="line">-&gt; Json.fromJson(type==Skin.class) &#123; this.readValue(type, null, new JsonReader().parse(file)) &#125;</span><br><span class="line"></span><br><span class="line">JsonReader.parse(file) &#123; JsonReader.parse(file.reader(&quot;UTF-8&quot;)) &#125;</span><br><span class="line">-&gt; JsonReader.parse(Reader reader) -&gt; JsonReader.parse(data, 0, offset)</span><br><span class="line"></span><br><span class="line">FileHandle.reader(charset) &#123; return new InputStreamReader(read(), charset) &#125;</span><br><span class="line">FileHandle.read() &#123; return new FileInputStream(file()) &#125;</span><br><span class="line">FileHandle.file() &#123; return java.io.File &#125;</span><br><span class="line"></span><br><span class="line">Skin.getJsonLoader(skinFile) &#123; return 匿名Json新类 &#125;</span><br><span class="line">匿名Json类.readValue(Skin.class, null, jsonData) &#123;</span><br><span class="line">jsonData.isString() == false:</span><br><span class="line">    super.readValue(Skin.class, elementType==null, jsonData)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Json.readValue(Skin.class, elementType==null, jsonData) &#123;</span><br><span class="line">jsonData.isObject() == true:</span><br><span class="line">    typeName == null: className = null</span><br><span class="line">    serializer = classToSerializer.get(Skin.class) // 在Skin.java匿名类中有SetSerializer</span><br><span class="line">    serializer.read(this, jsonData, type)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; 匿名Json类.read() &#123; for(valueMap) readnamedObjects(json, ClassReflection.forName(valueMap.name()), valueMap) &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="libgdx" scheme="http://yoursite.com/categories/libgdx/"/>
    
    
  </entry>
  
  <entry>
    <title>RecyclerView 源码分析</title>
    <link href="http://yoursite.com/android/recyclerview/"/>
    <id>http://yoursite.com/android/recyclerview/</id>
    <published>2014-07-26T09:23:01.000Z</published>
    <updated>2019-05-03T12:38:10.302Z</updated>
    
    <content type="html"><![CDATA[<p>版本: 25.1.0</p><h1 id="Scroll"><a href="#Scroll" class="headerlink" title="Scroll"></a>Scroll</h1><h1 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RecyclerView#requestChildFocus()</span><br><span class="line">-&gt; RecyclerView#requestChildRectangleOnScreen()</span><br><span class="line">-&gt; LayoutManager#requestChildRectangleOnScreen()</span><br><span class="line">-&gt; RecyclerView#smoothScrollBy(int, int)</span><br></pre></td></tr></table></figure><h1 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h1><h2 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addOnScrollListener/removeOnScrollListener (OnScrollListener)</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><h3 id="ScrollListener-onScrolled"><a href="#ScrollListener-onScrolled" class="headerlink" title="ScrollListener.onScrolled()"></a>ScrollListener.onScrolled()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;- RecyclerView.dispatchOnScrolled()</span><br><span class="line">1. &lt;- RecyclerView.scrollByInternal()</span><br><span class="line">  1.1 &lt;- scrollBy(x, y)</span><br><span class="line">    1.1.1 &lt;- RV.LayoutManager.requestChildRectangleOnScreen() &#123; dx!=0 || dy!=0 &#125;</span><br><span class="line">    1.1.2 &lt;- RV.LayoutManager.performAccessibilityAction() &#123; vScroll != 0 || hScroll != 0 &#125;</span><br><span class="line">  1.2 &lt;- RV.onTouchEvent() ACTION_MOVE 触摸移动</span><br><span class="line">  1.3 &lt;- RV.onGenericMotionEvent() SOURCE_CLASS_POINTER ACTION_SCROLL 鼠标滚轮</span><br><span class="line">2. &lt;- RecyclerView.dispatchLayoutStep3() &#123; dispatchOnScrolled(0,0) &#125; layout引起的 item range changed</span><br><span class="line">3. &lt;- RV.ViewFlinger.run() &#123;</span><br><span class="line">  hresult=LayoutManager.scrollHorizontallyBy(); 线性布局 会调到 LinearLayoutManager.scrollBy()</span><br><span class="line">  vresult=LayoutManager.scrollVeriticallyBy();</span><br><span class="line">  (hresult != 0 || vresult != 0) dispatchOnScrolled() &#125;</span><br></pre></td></tr></table></figure><h3 id="RV-smoothScrollBy"><a href="#RV-smoothScrollBy" class="headerlink" title="RV.smoothScrollBy()"></a>RV.smoothScrollBy()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; RV.ViewFlinger.smoothScrollBy()</span><br></pre></td></tr></table></figure><h3 id="RV-scrollToPosition"><a href="#RV-scrollToPosition" class="headerlink" title="RV.scrollToPosition()"></a>RV.scrollToPosition()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; LayoutManager.scrollToPosition()</span><br></pre></td></tr></table></figure><h1 id="onBindViewHolder"><a href="#onBindViewHolder" class="headerlink" title="onBindViewHolder()"></a>onBindViewHolder()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RV.Adapter.onBindViewHolder(holder, position)</span><br><span class="line">1. &lt;- RV.Adapter.onBindViewHolder(holder, position, payloads)</span><br><span class="line">2. &lt;- RV.Adapter.bindViewHolder(holder, position)</span><br><span class="line">  &lt;- RV.Recycler.tryBindViewHolderByDeadline() 前提: 判断 RecyclerPool.willBindInTime()</span><br><span class="line">  2.1 &lt;- RV.Recycler.bindViewToPosition()</span><br><span class="line">  2.2 &lt;- RV.Recycler.tryGetViewHolderForPositionByDeadline()</span><br><span class="line">    &lt;- RV.Recycler.getViewForPosition()</span><br><span class="line">    2.2.1 &lt;- LayoutState.next()</span><br><span class="line">    2.2.2 &lt;- LinearLayoutManager.next()</span><br><span class="line">      &lt;- LLM.layoutChunk()</span><br><span class="line">      &lt;- LLM.fill()</span><br><span class="line">      2.2.2.1 &lt;- LLM.onLayoutChildren()</span><br><span class="line">        2.2.2.1.1 &lt;- RV.dispatchLayoutStep2()</span><br><span class="line">          &lt;- 2.2.2.1.1.1 RV.dispatchLayout()</span><br><span class="line">            &lt;- RV.onLayout() # 一般调用位置</span><br><span class="line">          &lt;- 2.2.2.1.1.2 RV.onMeasure() 只在 LayoutManager.setAutoMeasureEnabled(true)</span><br><span class="line">        2.2.2.1.2 &lt;- RV.dispatchLayoutStep1()</span><br><span class="line">      2.2.2.2 &lt;- LLM.layoutForPredictiveAnimations()</span><br><span class="line">      2.2.2.3 &lt;- LLM.scrollBy()</span><br><span class="line">      2.2.2.4 &lt;- LLM.onFocusSearchFailed()</span><br></pre></td></tr></table></figure><p>版本: 23.0.1</p><h1 id="从notifyDatasetChanged-到实际的view被重新添加和layout"><a href="#从notifyDatasetChanged-到实际的view被重新添加和layout" class="headerlink" title="从notifyDatasetChanged() 到实际的view被重新添加和layout"></a>从notifyDatasetChanged() 到实际的view被重新添加和layout</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">什么时候加进动画?</span><br><span class="line">Adapter.notifyDataSetChanged() &#123; (AdapterDataObservable mObservable).notifyChanged() &#125; 每个 Observable.onChanged()</span><br><span class="line">-&gt; RecyclerViewDataObserver.onChanged() &#123;</span><br><span class="line">    setDataSetChangedAfterLayout() 每个没有shouldIgnore的viewHolder(现有的和mRecycler的) 添加 FLAG_ADAPTER_POSITION_UNKNOWN</span><br><span class="line">    if(没有pendingUpdates) requestLayout()</span><br><span class="line">--UI Handler下一次处理--&gt; RV.onLayout() -...-&gt; onBindViewHolder()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="notifyItemRemoved-pos-到实际的view被删除和重新layout"><a href="#notifyItemRemoved-pos-到实际的view被删除和重新layout" class="headerlink" title="notifyItemRemoved(pos) 到实际的view被删除和重新layout"></a>notifyItemRemoved(pos) 到实际的view被删除和重新layout</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Adapter.notifyItemRemoved(pos) &#123; mObservable.notifyItemRangeRemoved(pos,1) &#125; 每个 Oberservable.onItemRangeRemoved()</span><br><span class="line">-&gt; RecyclerViewDataObserver.onItemRangeRemoved() &#123;</span><br><span class="line">  AdapterHelper.onItemRangeRemoved()一般==true: 加到AdapterHelper.mPendingUpdates数组</span><br><span class="line">    triggerUpdateProcessor() &#125;</span><br><span class="line">-&gt; RecyclerViewDataObserver.triggerUpdateProcessor() &#123; 一般mHasFixedSize==false: mAdapterUpdateDuringMeasure=true; requestLayout() &#125;</span><br><span class="line"></span><br><span class="line">--UI Handler下一次处理--&gt; RV.onMeasure() &#123;</span><br><span class="line">  mAdapterUpdateDuringMeasure==true: ... processAdapterUpdatesAndSetAnimationFlags(); ... mLayout.onMeasure() &#125;</span><br><span class="line">  -&gt; RV.processAdapterUpdatesAndSetAnimationFlags() &#123;</span><br><span class="line">  ... mItemAnimator != null &amp;&amp; mLayout.supportsPredictiveItemAnimations(): mAdapterHelper.preProcess(); .. &#125;</span><br><span class="line">    -&gt; AdapterHelper.preProcess()</span><br><span class="line">      -&gt; AdapterHelper.applyRemove(op) &#123; type==POSITION_TYPE_NEW_OR_LAID_OUT: postponeAndUpdateViewHolders(op) &#125;</span><br><span class="line">      -&gt; AdapterHelper.postponeAndUpdateViewHolders(op) &#123; 加到mPostponedList; (RV内部匿名实例 mCallback).offsetPositionsForRemovingLaidOutOrNewView() &#125;</span><br><span class="line">      -&gt; RV.offsetPositionRecordsForRemove(posStart, count, false); RV.mItemsAddedOrRemoved=true</span><br><span class="line">      -&gt; &#123; holder.flagRemovedAndOffsetPosition(); mRecycler.offsetPositionRecordsForRemove(); requestLayout() &#125;</span><br><span class="line">      -&gt; Recycler.offsetPositionRecordsForRemove()</span><br><span class="line">      -&gt; Recycler.recycleCachedViewAt(idx) &#123; addViewHolderToRecycledViewPool(); mCachedViews.remove(idx) &#125;</span><br><span class="line">    -&gt; 设置 animationTypeSupported=true; 设置 mState.mRunSimpleAnimations=true; mState.mRunPredictiveanimations=true</span><br><span class="line">  -&gt; RV.onLayout()</span><br><span class="line">  -&gt; RV.dispatchLayout() &#123;</span><br><span class="line">    processAdapterUpdatesAndSetAnimationFlags(); ...</span><br><span class="line">    mLayout.onLayoutChildren(); 可能修改 mState.mRunSimpleAnimations</span><br><span class="line">    if(mState.mRunSimpleAnimations) &#123; ...</span><br><span class="line">      animateDisappearance(disappearingItem) 每个disappearing and removed item</span><br><span class="line">      animateAppearance(itemHolder) 每个appearing and added item</span><br><span class="line">      animateMove(postHolder) 每个persistent item</span><br><span class="line">      animateChange(oldHolder) 每个changing item</span><br><span class="line">    &#125;</span><br><span class="line">  -&gt; RV.animateDisappearance(holder) &#123;</span><br><span class="line">    addAnimatingView(holder)</span><br><span class="line">    if(没有真的移除) mItemAnimator.animateMove()==true: postAnimationRunner()</span><br><span class="line">    else(真的移除) holder.setIsRecyclable(fasle); mItemAnimator.animateRemove()加到mPendingRemovals==true: postAnimationRunner()</span><br><span class="line">    &#125;</span><br><span class="line">    -&gt; addAnimatingView() &#123; mRecycler.unscrapView(holder); 一般 mChildHelper.hide(view) &#125;</span><br><span class="line">      -&gt; ChildHelper.hide() -&gt; ChildHelper.hideInternal(view) &#123; 加到 mHiddenViews &#125;</span><br><span class="line">    -&gt; postAnimationRunner() &#123; 动画runnable post到choreographer上 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">--choreographer下一帧--&gt; 执行动画 RV.mItemAnimatorRunner</span><br><span class="line">-&gt; DefaultItemAnimator.runPendingAnimations() &#123; animateRemoveImpl(每个removed的holder); ... &#125;</span><br><span class="line">-&gt; DefaultItemAnimator.animateRemoveImpl() &#123; view.animate().alpha(0).setDuration(默认120ms).start() &#125;</span><br><span class="line">--动画执行完--&gt; 动画回调 onAnimatinoEnd() &#123; view.setalpha(1); dispatchRemoveFinished(holder); dispatchFinishedWhenDone() &#125;</span><br><span class="line">  -&gt; (DefaultItemAnimator 父类 ItemAnimator).dispatchRemoveFinished() &#123; mListener.onRemoveFinished() &#125;</span><br><span class="line">  -&gt; RV.(ItemAnimatorRestoreListener mItemAnimatorListener).onRemoveFinished() &#123;</span><br><span class="line">    item.setIsRecyclable(true); removeAnimatingView(view) 或 removeDetachedView(view) &#125;</span><br><span class="line">    -&gt; RV.removeAnimatingView(view) &#123;</span><br><span class="line">      mChildHelper.removeViewIfHidden(view);</span><br><span class="line">      if(removed): mRecycler.unscrapView(); mRecycler.recycleViewHolderInternal() &#125;</span><br><span class="line">      -&gt; ChildHelper.removeViewifHidden() &#123;</span><br><span class="line">        从mBucket移除; unhideViewInternal(view); (mCallback==RV匿名).removeViewAt(idx) 真正从RV移除 &#125;</span><br><span class="line">        -&gt; ChildHelper.unhideViewInternal() &#123; 从 mHiddenViews 移除 &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;版本: 25.1.0&lt;/p&gt;
&lt;h1 id=&quot;Scroll&quot;&gt;&lt;a href=&quot;#Scroll&quot; class=&quot;headerlink&quot; title=&quot;Scroll&quot;&gt;&lt;/a&gt;Scroll&lt;/h1&gt;&lt;h1 id=&quot;调用顺序&quot;&gt;&lt;a href=&quot;#调用顺序&quot; class=&quot;he
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 启动流程 源码分析</title>
    <link href="http://yoursite.com/android/startup-routines/"/>
    <id>http://yoursite.com/android/startup-routines/</id>
    <published>2013-11-23T08:10:00.000Z</published>
    <updated>2019-05-03T12:35:02.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-android-4-3-r2-2"><a href="#版本-android-4-3-r2-2" class="headerlink" title="版本 android-4.3_r2.2"></a>版本 android-4.3_r2.2</h1><h1 id="涉及到的文件"><a href="#涉及到的文件" class="headerlink" title="涉及到的文件"></a>涉及到的文件</h1><ul><li>/system/core/init/init.c</li><li>/system/core/init/init_parser.c<ul><li>init_parse_config_file()</li></ul></li><li>/system/core/rootdir/init.rc</li><li>/frameworks/base/cmds/app_process/app_main.cpp<ul><li>LOCAL_MODULE:= app_process</li></ul></li><li>/dalvik/vm/Jni.cpp<ul><li>JNI_CreateJavaVM()</li></ul></li><li>/dalvik/vm/Init.cpp<ul><li>dvmStartup()</li></ul></li></ul><h1 id="init"><a href="#init" class="headerlink" title="init"></a>init</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">main() &#123; init_parse_config_file(&quot;/init.rc&quot;); execute_one_command(); &#125;</span><br><span class="line">-&gt; init_parse_config_file() 读init.rc, 按顺序读入:</span><br><span class="line"></span><br><span class="line">* ueventd /sbin/ueventd</span><br><span class="line">** class core</span><br><span class="line">* [optional]console /system/bin/sh</span><br><span class="line">** class core</span><br><span class="line">* [optional]adbd /sbin/adbd</span><br><span class="line">** class core</span><br><span class="line">* servicemanager /system/bin/servicemanager</span><br><span class="line">** class core</span><br><span class="line">* vold /system/bin/vold</span><br><span class="line">** class core</span><br><span class="line">* netd /system/bin/netd</span><br><span class="line">** class main</span><br><span class="line">* debuggerd /system/bin/debuggerd</span><br><span class="line">*class main</span><br><span class="line">* ril-daemon /system/bin/rild</span><br><span class="line">** class main</span><br><span class="line">* surfaceflinger /system/bin/surfaceflinger</span><br><span class="line">** class main</span><br><span class="line">* zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">** class main</span><br><span class="line">** socket zygote stream 660 root system</span><br><span class="line">** 本篇主要分析这个</span><br><span class="line">* drm /system/bin/drmserver</span><br><span class="line">** class main</span><br><span class="line">* media /system/bin/mediaserver</span><br><span class="line">** class main</span><br><span class="line">* [optional]bootanim /system/bin/bootanimation</span><br><span class="line">** class main</span><br><span class="line">等内容.</span><br><span class="line"></span><br><span class="line">-&gt; init.rc 读到</span><br><span class="line">on boot</span><br><span class="line">    ...</span><br><span class="line">    class start core</span><br><span class="line">    class_start main</span><br><span class="line">on 是一个 SECTION, parse_new_section(), 此SECTION下的每行 state.parse_line() 就是调的 parse_line_action().</span><br><span class="line">class_start 是一个 COMMAND, symbol是 K_class_start(keywords.h用宏拼接出来)</span><br><span class="line">zygote服务有 class main. 在 init.c::main() 中通过</span><br><span class="line">action_for_each_trigger(&quot;boot&quot;, action_add_queue_tail) 加入到 init_parser.c::action_queue 队列.</span><br><span class="line">最后通过 init.c::main() 中 execute_one_command() 从队列中取出执行</span><br><span class="line">-&gt; builtins.c::do_class_start()</span><br><span class="line">-&gt; service_for_each_class(args[1], service_start_if_not_disabled)</span><br><span class="line">-&gt; service_start_if_not_disabled()</span><br><span class="line">-&gt; service_start() &#123;</span><br><span class="line">  fork();</span><br><span class="line">  if(pid==0)</span><br><span class="line">    create_socket(&quot;zygote&quot;, stream, 660, root, system);</span><br><span class="line">    publish_socket(); app_process的环境变量增加 ANDROID_SOCKET_zygote=&quot;/dev/socket/zygote&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="Zygote-app-process进程"><a href="#Zygote-app-process进程" class="headerlink" title="Zygote(app_process进程)"></a>Zygote(app_process进程)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  parentDir &lt;= &quot;/system/bin&quot;</span><br><span class="line">  if(&quot;--zygote&quot;) (AppRuntime runtime).start(&quot;com.android.internal.os.ZygoteInit&quot;, &quot;--startSystemServer&quot;? flag);</span><br><span class="line">  else runtime.start(&quot;com.android.internal.os.RuntimkeInit&quot;, &quot;--application&quot; or tool? flag); &#125;</span><br><span class="line">-&gt; AppRuntime父类 AndroidRuntime::start() &#123;</span><br><span class="line">  startVm(&amp;mJavaVM, &amp;env); onVmCreated(env); startReg(env); JNI调java的main(), 当前线程作为VM主线程, 直到VM退出. &#125;</span><br><span class="line">  -&gt; AndroidRuntime::startVm()</span><br><span class="line">    -&gt; JNI_CreateJavaVM() &#123; memset((DvmGlobals gDvm), 0); calloc (JavaVMExt *pVM); dvmCreateJNIEnv(); dvmStartup(); &#125;</span><br><span class="line">      -&gt; dvmCreateJNIEnv() &#123; calloc (JNIEnvExt *newEnv); dvmSetJniEnvThreadId(newEnv, self); &#125;</span><br><span class="line">      -&gt; dvmStartup() &#123;</span><br><span class="line">        processOptions() &quot;-Xzygote&quot;设置 gDvm.zygote;</span><br><span class="line">        if(gDvm.zygote) initZygote() else dvmInitAfterZygote(); &#125;</span><br><span class="line">--JAVA--&gt; ZygoteInit#main() &#123;</span><br><span class="line">  registerZygoteSocket(); preload(); gc();</span><br><span class="line">  if(&quot;start-system-server&quot;) startSystemServer();</span><br><span class="line">  无限循环runSelectLoop(); &#125;</span><br><span class="line">  -&gt; registerZygoteSocket() JAVA端用上 create_socket() 出来的 UNIX Domain socket, 作为server端.</span><br><span class="line">  -&gt; preload() &#123;</span><br><span class="line">    preloadClasses(); &quot;preloaded-classes&quot;文件每行 #ClassName 调用 Class.forName()</span><br><span class="line">    preloadResources(); &#125;</span><br><span class="line">-&gt; startSystemServer() &#123;</span><br><span class="line">  Zygote.forkSystemServer(); 最后调的是 dalvik_system_Zygote.cpp::Dalvik_dalvik_system_Zygote_forkSystemServer()</span><br><span class="line">  if(pid==0) handleSystemServerProcess() &#125;</span><br></pre></td></tr></table></figure><h1 id="System-Server-app-process子进程"><a href="#System-Server-app-process子进程" class="headerlink" title="System Server(app_process子进程)"></a>System Server(app_process子进程)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">--SystemServer进程--&gt; handleSystemServerProcess()</span><br><span class="line">-&gt; RuntimeInit#zygoteInit() &#123;</span><br><span class="line">  redirectLogStreams(); 重定向System.out和System.err到logcat系统.</span><br><span class="line">  commonInit(); nativeZygoteInit(); applicationInit(); &#125;</span><br><span class="line">  --JNI--&gt; nativeZygoteInit()</span><br><span class="line">    -&gt; AndroidRuntime.cpp::com_android_internal_os_RuntimeInit_nativeZygoteInit()</span><br><span class="line">    -&gt; app_main.cpp AppRunTime::onZygoteInit() &#123; (ProcessState proc)-&gt;startThreadPool() &#125;</span><br><span class="line">    -&gt; ProcessState.cpp::spawnPooledThread(true) &#123;</span><br><span class="line">      t=new PoolThread(isMain==true); // mCanCallJava默认为true</span><br><span class="line">      // android_atomic_add()等类似函数返回操作之前的数</span><br><span class="line">      t-&gt;run(&quot;Binder_1&quot;, 默认priority==PRIORITY_DEFAULT, 默认stack==0) &#125;</span><br><span class="line">      --新线程--&gt; _threadLoop() -&gt; PoolThread::threadLoop()</span><br><span class="line">      -&gt; IPCThreadState::joinThreadPool() // ioctl &quot;/dev/binder&quot; 加入Binder线程池, 无限阻塞获取并执行binder驱动发过来的命令</span><br><span class="line">  -&gt; applicationInit()</span><br><span class="line">    -&gt; invokeStatkcMain(&quot;com.android.server.SystemServer&quot;, startArgs) // args在 ZygoteInit#startSystemServer()</span><br><span class="line">    -&gt; throw new ZygoteInit.MethodAndArgsCaller(m, argv) 抛异常方式扔掉初始化时多余的栈, 在ZygoteInit#main()捕捉</span><br><span class="line">    -&gt; ZygoteInit#main caller.run()</span><br><span class="line">-&gt; SystemServer#main() &#123; loadLibrary(&quot;android_servers&quot;); init1(); &#125;</span><br><span class="line">  -&gt; init1() --JNI--&gt; android_server_SystemServer_init1()</span><br><span class="line">  --C++--&gt; system_init.cpp::system_init() &#123;</span><br><span class="line">    defaultServiceManager(); // handle==0</span><br><span class="line">    JNI调 SystemServer#init2();</span><br><span class="line">    ProcessState::startThreadPool(), joinThreadPool(默认isMain==true); &#125;</span><br><span class="line">    -&gt; SystemServer#init2()</span><br><span class="line">    --新线程--&gt; ServerThread#run() &#123;</span><br><span class="line">      uiHandlerThread = new HandlerThread(); // 起UI线程</span><br><span class="line">      wmHandlerThread = new HandlerThread(); // 起WM线程</span><br><span class="line">      context = ActivityManagerService.main();</span><br><span class="line">      起各个service:</span><br><span class="line">      wm = WindowManagerService.main(context, power, display, inputManager, ...);</span><br><span class="line">      ServiceManager.addService(Context.WINDOW_SERVICE, wm);</span><br><span class="line">      ActivityManagerService.self().setWindowManager(wm);</span><br><span class="line">      wm.displayReady();</span><br><span class="line">      ...</span><br><span class="line">      ActivityManagerService.self().systemReady(runnable调各个service.systemReady); // AMS准备完毕</span><br><span class="line">    &#125;</span><br><span class="line">    -&gt; ActivityManagerService#main() &#123;</span><br><span class="line">      thr = new AThread(); thr.start(); // 新起Looper用线程: 创建AMS, looper.loop()</span><br><span class="line">      (ActivityThread at) = ActivityThread.systemMain(); // 本线程本Looper管理Acitivty生命周期</span><br><span class="line">      (ActivityManagerService m).mMainStack = new ActivityStack(m, context==at.getSystemContext(), true, thr.mLooper);</span><br><span class="line">      m.startRunning();</span><br><span class="line">    &#125;</span><br><span class="line">      -&gt; ActivityThread#systemMain() &#123; thread=new ActivityThread(); thread.attach(system==true); &#125;</span><br><span class="line">        -&gt; ActivityThread#attach() &#123;</span><br><span class="line">          system==true:</span><br><span class="line">            context=new ContextImpl(); context.init();</span><br><span class="line">            app=newApplication(Application.class, context);</span><br><span class="line">            mAllApplications.add(app); mInitialApplication=app; app.onCreate();</span><br><span class="line">          &#125;</span><br><span class="line">    -&gt; WMS#displayReady() &#123;</span><br><span class="line">        displayReady(Display.DEFAULT_DISPLAY);</span><br><span class="line">        mDisplayReady = true;</span><br><span class="line">        mIsTouchDevice = mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN);</span><br><span class="line">        (mPolicy 就是 PhoneWindowManager).setInitialDisplaySize(...);</span><br><span class="line">      &#125;</span><br><span class="line">      -&gt; WMS#displayReady(DEFAULT_DISPLAY) &#123;</span><br><span class="line">        DisplayContent displayContent = getDisplayContentLocked(DEFAULT_DISPLAY);</span><br><span class="line">        mAnimator.addDisplayLocked(displayId);</span><br><span class="line">      &#125;</span><br><span class="line">        -&gt; WMS#getDisplayContentLocked(DEFAULT_DISPLAY) &#123;</span><br><span class="line">          Display display = mDisplayManager.getDisplay(DEFAULT_DISPLAY);</span><br><span class="line">          displayContent = newDisplayContentLocked(display);</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; DisplayManager#getDisplay(DEFAULT_DISPLAY) &#123; DisplayManager#getOrCreateDisplayLocked(DEFAULT_DISPLAY, false); &#125;</span><br><span class="line">        -&gt; WMS#newDisplayContentLocked(display) &#123;</span><br><span class="line">          displayContent = new DisplayContent(display);</span><br><span class="line">          mDisplaySettings.getOverscanLocked(info.name, rect);</span><br><span class="line">          mDisplayManagerService.setOverscan(display.getDisplayId(), rect...);</span><br><span class="line">          (mPolicy 就是 PhoneWindowManager).setDisplayOverscan(displayContent.getDisplay(), rect...);</span><br><span class="line">        &#125;</span><br><span class="line">    -&gt; AMS#systemReady(goingCallback) &#123;</span><br><span class="line">      goingCallback.run();</span><br><span class="line">      mMainStack.resumeTopActivityLocked(null);</span><br><span class="line">    &#125;</span><br><span class="line">      -&gt; ActivityStack#resumeTopActivityLocked(null)</span><br><span class="line">      -&gt; resumeTopActivityLocked(prev==null, options==null) &#123; next==null: mService.startHomeActivityLocked() &#125;</span><br><span class="line">      -&gt; ActivityServiceManager#startHomeActivityLocked()</span><br><span class="line">      -&gt; ActivityStack#startActivityLocked(caller==null, intent, resolvedType==null, aInfo==Launcher信息,</span><br><span class="line">        resultTo==null, resultWho==null, requestCode==0, callingPid==0, callingUid==0, callingPackage==null,</span><br><span class="line">        startFlags==0, options==null, componentSpecified==false, outActivity==null)</span><br><span class="line">      -&gt; startActivityUncheckedLocked(r==new ActivityRecord(), sourceRecord==null,</span><br><span class="line">        startFlags==0, doResume==true, options==null)</span><br><span class="line">      -&gt; startActivityLocked(r, newTask==true, doResume==true, keepCurTransition==false, options==null) &#123;</span><br><span class="line">        mHistory.size() == 0: mService.mWindowManager.addAppToken(addPos==0 ...);</span><br><span class="line">        doResume==true: resumeTopActivityLocked(null);</span><br><span class="line">      &#125;</span><br><span class="line">        -&gt; resumeTopActivityLocked(null)</span><br><span class="line">        -&gt; resumeTopActivityLocked(prev==null, options==null) &#123;</span><br><span class="line">          (ActivityRecord next)==Launcher</span><br><span class="line">          (ProcessRecord next.app)==null: startSpecificActivityLocked(next, andResume==true, checkConfig==true)</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; startSpecificActivityLocked() &#123; getProcessRecordLocked()==null: mService.startProcessLocked(); &#125;</span><br><span class="line">        -&gt; AMS#startProcessLocked(r.processName, r.info.applicationInfo, knownToBeDead==true, intentFlags==0,</span><br><span class="line">          hostingType==&quot;activity&quot;, r.intent.getComponent(), allowWhileBooting==false, isolated==false) &#123;</span><br><span class="line">            getProcessRecordLocked()==null:</span><br><span class="line">              app=newProcessRecordLocked(null, info, processName, isolated==false)</span><br><span class="line">              startProcessLocked(app, hostingType==&quot;activity&quot;, hostingNameStr)</span><br><span class="line">          &#125;</span><br><span class="line">          -&gt; startProcessLocked() &#123; startResult=Process.start(&quot;android.app.ActivityThread&quot;, ...) &#125;</span><br><span class="line">          -&gt; Process#startViaZygote(processClass==&quot;android.app.ActivityThread&quot;, ...)</span><br><span class="line">          -&gt; Process#zygoteSendArgsAndGetResult() &#123; Binder命令zygote(app_process) fork新进程 &#125;</span><br></pre></td></tr></table></figure><h1 id="Launcher应用"><a href="#Launcher应用" class="headerlink" title="Launcher应用"></a>Launcher应用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--新进程Launcher--&gt; ZygoteConnection#handleChildProc()</span><br><span class="line">-&gt; ZygoteInit#invokeStaticMain()</span><br><span class="line">--抛异常方式回调--&gt; ActivityThread#main() &#123;</span><br><span class="line">  thread=new ActivityThread(); thread.attach(false);</span><br><span class="line">  sMainHandler=thread.getHandler(); Looper.loop(); &#125;</span><br><span class="line">-&gt; ActivityThread#attach(system==false) &#123;</span><br><span class="line">  mgr=ActivityManagerNative.getDefault(); mgr.attachApplication(ApplicationThread mAppThread); &#125;</span><br><span class="line">--Binder--&gt; ActivityManagerNative#attachApplication(app)</span><br><span class="line">-&gt; 子类AMS#attachApplication(app)</span><br><span class="line">-&gt; AMS#attachApplicationLocked() &#123;</span><br><span class="line">     ActivityRecord hr=mMainStack.topRunningActivityLocked();</span><br><span class="line">     hr!=null &amp;&amp; normalMode, hr.app==null:</span><br><span class="line">       mMainStack.realStartActivityLocked(hr, app, true, true);</span><br><span class="line">   &#125;</span><br><span class="line">  -&gt; ActivityStack#realStartActivityLocked() &#123; app.thread.scheduleLaunchActivity(intent, appToken, ...); &#125;</span><br><span class="line">--Binder--&gt; Launcher进程 ApplicationThread#scheduleLaunchActivity()</span><br><span class="line">-&gt; queueOrSendMessage(H.LAUNCH_ACTIVITY, r)</span><br><span class="line">--Handler H--&gt; ActivityThread#handleLaunchActivity(r, null) &#123; performLaunchActivity(); handleResumeActivity(); &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-android-4-3-r2-2&quot;&gt;&lt;a href=&quot;#版本-android-4-3-r2-2&quot; class=&quot;headerlink&quot; title=&quot;版本 android-4.3_r2.2&quot;&gt;&lt;/a&gt;版本 android-4.3_r2.2&lt;/h1&gt;&lt;h1 i
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
</feed>
