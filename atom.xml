<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangmuy 的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-03T13:53:01.096Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wangmuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Activity 透明/非透明 转换</title>
    <link href="http://yoursite.com/android/activity-%E9%80%8F%E6%98%8E%E9%9D%9E%E9%80%8F%E6%98%8E-%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/android/activity-透明非透明-转换/</id>
    <published>2016-12-01T02:16:21.000Z</published>
    <updated>2019-05-03T13:53:01.096Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Activity.convertFromTranslucent() &#123;</span><br><span class="line">ActivityManagerNative.getDefault().convertFromTranslucent(mToken)</span><br><span class="line">WindowManagerGlobal.getInstance().changeCanvasOpacity(mToken, true)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--binder--&gt; ActivityManagerService.convertFromTranslucent() &#123;</span><br><span class="line">(ActivityRecord r).changeWindowTranslucency(true)</span><br><span class="line">r.task.stack.releaseBackgroundResources(r)</span><br><span class="line">mStackSupervisor.ensureActivitiesVisibleLocked(null, 0)</span><br><span class="line">mWindowManager.setAppFullscreen(token, true)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; ActivityStackSupervisor.ensureActivitiesVisibleLocked() &#123;</span><br><span class="line">遍历 display, stack</span><br><span class="line">  ActivityStack.ensureActivitiesVisibleLocked() &#123;</span><br><span class="line">    behindFullscreen &amp;&amp; r.visible: 影响到的(ActivityRecord r) 根据r.state动作:</span><br><span class="line">    case RESUMED: mStackSupervisor.mStoppingActivities.add(r); mStackSupervisor.scheduleIdleLocked()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--IDLE_NOW_MSG--&gt; ActivityStackSupervisor.activityIdleInternelLocked() &#123;</span><br><span class="line">ArrayList&lt;ActivityRecord&gt; stops = processStoppingActivitiesLocked(true) 从mStoppingActivities取要stop的</span><br><span class="line">遍历stops: (ActivityStack stack).stopActivityLocked(r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-&gt; ActivityStack.stopActivityLocked(r) &#123; r.app.thread.scheduleStopActivity() &#125;</span><br><span class="line">-&gt; ApplicationThreadProxy.scheduleStopActivity(r.appToken, r.visible==false, r.configChangeFlags)</span><br><span class="line">--binder--&gt; (ActivityThread.ApplicationThread extends ApplicationThreadNative).scheduleStopActivity() &#123; scheduleStopActivity() &#125;</span><br><span class="line">--handler STOP_ACTIVITY_HIDE--&gt; ActivityThread.handleStopActivity()</span><br><span class="line">-&gt; ActivityThread.performStopActivityInner()</span><br><span class="line">-&gt; Activity.performStop()</span><br><span class="line">-&gt; Instrumentation.callActivityOnStop() &#123; activity.onStop() &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>PackageInstaller 中的 动态权限</title>
    <link href="http://yoursite.com/android/package-installer-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/android/package-installer-动态权限/</id>
    <published>2016-11-29T02:57:43.000Z</published>
    <updated>2019-05-03T13:51:20.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="manifest统计"><a href="#manifest统计" class="headerlink" title="manifest统计"></a>manifest统计</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.PackageInstallerActivity</span><br><span class="line">action=&quot;android.content.pm.action.CONFIRM_PERMISSIONS&quot;</span><br><span class="line">category=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line"></span><br><span class="line">.permission.ui.GrantPermissionsActivity</span><br><span class="line">action=&quot;android.content.pm.action.REQUEST_PERMISSIONS&quot;</span><br><span class="line">category=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line"></span><br><span class="line">.permission.ui.ManagePermissionsActivity</span><br><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSIONS&quot;</span><br><span class="line">action=&quot;android.intent.action.MANAGE_APP_PERMISSIONS&quot;</span><br><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSION_APPS&quot;</span><br><span class="line">category=&quot;android.intent.category.DEFAULT&quot;</span><br><span class="line"></span><br><span class="line">receiver=&quot;.permission.model.PermissionStatusReceiver&quot;</span><br><span class="line">android:permission=&quot;android.permission.GRANT_RUNTIME_PERMISSIONS&quot;</span><br><span class="line">intent-filter action=&quot;android.intent.action.GET_PERMISSIONS_COUNT&quot;</span><br></pre></td></tr></table></figure><h1 id="PackageInstallerActivity"><a href="#PackageInstallerActivity" class="headerlink" title="PackageInstallerActivity"></a>PackageInstallerActivity</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">入口activity</span><br><span class="line">CONFIRM_PERMISSIONS 通过session进来, 记住sessionId, 选择后回调给session mInstaller.setPermissionsResult()</span><br></pre></td></tr></table></figure><h1 id="GrantPermissionsActivity"><a href="#GrantPermissionsActivity" class="headerlink" title="GrantPermissionsActivity"></a>GrantPermissionsActivity</h1><ul><li>应用主动申请权限时出现的授权界面</li><li>授权权限按组进行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 初始化 updateDefaultResults() deny all</span><br><span class="line">2. devicePolicyManager.getPermissionPolicy() 获取默认permission类型(STATE_DEFAULT运行时/AUTO_DENY/AUTO_GRANT)</span><br><span class="line">根据 permissionPlicy 自动授权 AUTO_DENY/AUTO_GRANT 给 non-fixed( !group.isUserFixed() &amp;&amp; !group.isPolicyFixed())类型的权限</span><br><span class="line">3. 剩下的STATE_DEFAULT类型更新界面让用户授权</span><br></pre></td></tr></table></figure><h1 id="ManagePermissionsActivity"><a href="#ManagePermissionsActivity" class="headerlink" title="ManagePermissionsActivity"></a>ManagePermissionsActivity</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSIONS&quot;</span><br><span class="line">ManagePermissionsFragment</span><br><span class="line"></span><br><span class="line">action=&quot;android.intent.action.MANAGE_APP_PERMISSIONS&quot;</span><br><span class="line">AppPermissionsFragment</span><br><span class="line"></span><br><span class="line">action=&quot;android.intent.action.MANAGE_PERMISSION_APPS&quot;</span><br><span class="line">PermissionAppsFragment</span><br></pre></td></tr></table></figure><h1 id="PermissionStatusReceiver"><a href="#PermissionStatusReceiver" class="headerlink" title="PermissionStatusReceiver"></a>PermissionStatusReceiver</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当有 Intent.ACTION_GET_PERMISSIONS_COUNT 广播询问时, 获取对应的package授权权限数量, 广播反馈</span><br><span class="line">/packages/apps/Settings 用到</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;manifest统计&quot;&gt;&lt;a href=&quot;#manifest统计&quot; class=&quot;headerlink&quot; title=&quot;manifest统计&quot;&gt;&lt;/a&gt;manifest统计&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>ResolverActivity 流程</title>
    <link href="http://yoursite.com/android/resolve-activity/"/>
    <id>http://yoursite.com/android/resolve-activity/</id>
    <published>2016-11-16T07:12:28.000Z</published>
    <updated>2019-05-03T13:48:14.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-aosp-5-1-1-r6"><a href="#版本-aosp-5-1-1-r6" class="headerlink" title="版本 aosp-5.1.1_r6"></a>版本 aosp-5.1.1_r6</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ResolverActivity.java ResolveListAdapter.ctor()</span><br><span class="line">-&gt; ResolveListAdapter.rebuildList()</span><br><span class="line">--binder--&gt; PackageManagerService.queryIntentActivities() &#123;</span><br><span class="line">    if intent有component, 直接返回component指定的;</span><br><span class="line">    if intent有packageName, ActivityIntentResolver.queryIntentForPackage()</span><br><span class="line">    else ActivityIntentResolver.queryIntent()</span><br><span class="line">&#125;</span><br><span class="line">-&gt;1. (ActivityIntentResolver父类 IntentResolver).queryIntent()</span><br><span class="line">-&gt;2. (ActivityIntentResolver父类 IntentResolver).queryIntentForPackage()</span><br><span class="line"></span><br><span class="line">-&gt; IntentResolver.buildResolveList()</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PMS.findPreferredActivity()</span><br><span class="line">1. &lt;- PMS.setLastChosenActivity()</span><br><span class="line">&lt;- ResolverActivity.onIntentSelected()</span><br><span class="line"></span><br><span class="line">2. &lt;- PMS.getLastChosenActivity()</span><br><span class="line">&lt;- ResolverActivity.rebuildList()</span><br><span class="line"></span><br><span class="line">3. &lt;- PMS.chooseBestActivity() &#123;findPreferredActivity(intent,resolvedType,flags,query,r0.priority,true==always,false==removeMatches,debug,userId)&#125;</span><br><span class="line">&lt;- PMS.resolveIntent()</span><br><span class="line"></span><br><span class="line">4. &lt;- PMS.getHomeActivities() &#123;</span><br><span class="line">  list=queryIntentActivities(); return findPreferredActivity(list) 返回NULL表示没有preferred &#125;</span><br><span class="line">&lt;--binder-- PM.getHomeActivities()</span><br><span class="line">4.1 &lt;- SystemUI SystemServicesProxy.getHomeActivityPackageName()</span><br><span class="line">  &lt;- SystemUI AlternateRecentsComponent.startRecentsActivity() 最近应用页面</span><br><span class="line">4.2 &lt;- ApplicationPackageManager.getHomeActivities() ContextImpl.mPackageManager==ApplicationPackageManager, 实际client端的PackageManager, api公开接口</span><br><span class="line">4.3 &lt;- PackageManagerBackupAgent.getPreferredHomeComponent()</span><br><span class="line">  &lt;- PMBA.onBackup()</span><br></pre></td></tr></table></figure><!--定死Home应用:初始方法:加在PMS.resolveIntent() {  query=queryIntentActivities();  if(query含Launcher){滤掉其他或直接返回唯一};  return chooseBestActivity(query) }缺陷:PMS.queryIntentActivities()没有走这个流程(Recents等有调用此接口)解决:queryIntentActivities() 有多个return出口, 不好直接改写将 queryIntentActivities() 包起来, 改名 queryIntentActivityesInner(), 重新提供一个queryIntentActivities() {  query=queryIntentActivityesInner();  if(query含Launcher){滤掉其他或直接返回唯一} }-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;版本-aosp-5-1-1-r6&quot;&gt;&lt;a href=&quot;#版本-aosp-5-1-1-r6&quot; class=&quot;headerlink&quot; title=&quot;版本 aosp-5.1.1_r6&quot;&gt;&lt;/a&gt;版本 aosp-5.1.1_r6&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ResolverActivity.java ResolveListAdapter.ctor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; ResolveListAdapter.rebuildList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--binder--&amp;gt; PackageManagerService.queryIntentActivities() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if intent有component, 直接返回component指定的;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if intent有packageName, ActivityIntentResolver.queryIntentForPackage()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else ActivityIntentResolver.queryIntent()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;1. (ActivityIntentResolver父类 IntentResolver).queryIntent()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;2. (ActivityIntentResolver父类 IntentResolver).queryIntentForPackage()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; IntentResolver.buildResolveList()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android debug-hwui-profile</title>
    <link href="http://yoursite.com/android/debug-hwui-profile/"/>
    <id>http://yoursite.com/android/debug-hwui-profile/</id>
    <published>2016-10-18T12:21:32.000Z</published>
    <updated>2019-05-03T13:45:43.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h1><h2 id="探索-gpu呈现模式-测量的是什么"><a href="#探索-gpu呈现模式-测量的是什么" class="headerlink" title="探索 gpu呈现模式 测量的是什么"></a>探索 gpu呈现模式 测量的是什么</h2><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="原生Settings"><a href="#原生Settings" class="headerlink" title="原生Settings"></a>原生Settings</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings -&gt; 开发者选项 -&gt; gpu呈现模式</span><br></pre></td></tr></table></figure><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setprop debug.hwui.profile visual_bars <span class="comment"># false关闭</span></span><br></pre></td></tr></table></figure><h1 id="图形解释"><a href="#图形解释" class="headerlink" title="图形解释"></a>图形解释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">蓝色: create/update DisplayList</span><br><span class="line">紫色: 同步到render thread</span><br><span class="line">红色: 将DisplayList转为gl命令调用</span><br><span class="line">黄色: cpu等待gpu完成</span><br></pre></td></tr></table></figure><h1 id="profile时机"><a href="#profile时机" class="headerlink" title="profile时机"></a>profile时机</h1><h2 id="4-4-4-r1"><a href="#4-4-4-r1" class="headerlink" title="4.4.4_r1"></a>4.4.4_r1</h2><h3 id="涉及文件"><a href="#涉及文件" class="headerlink" title="涉及文件"></a>涉及文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HardwareRenderer.java</span><br></pre></td></tr></table></figure><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HardwareRenderer.drawProfileData() &#123;</span><br><span class="line">  mProfileData 数据</span><br><span class="line">  for(i=0; i &lt; getFrameCount()*elementCount; i+=elementCount)</span><br><span class="line">    mProfileShapes[] &lt;- bar条rect</span><br><span class="line">    drawGraph() 画bar条</span><br><span class="line">    drawCurrentFrame() if(当前帧) 加深当前帧的bar条</span><br><span class="line">    drawThreadshold() 16ms水平线</span><br></pre></td></tr></table></figure><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dumpGfxInfo()</span><br><span class="line">  mProfileData[i]   == Draw</span><br><span class="line">  mProfileData[i+1] == Process</span><br><span class="line">  mProfileData[i+2] == Execute</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><h4 id="Draw"><a href="#Draw" class="headerlink" title="Draw"></a>Draw</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildDisplayList()</span><br><span class="line">  startBuildDisplayListProfiling()</span><br><span class="line">  Trace.traceBegin(TRACE_TAG_VIEW, &quot;getDisplayList&quot;)</span><br><span class="line">  view.getDisplayList()</span><br><span class="line">  Trace.traceEnd(TRACE_TAG_VIEW)</span><br><span class="line">  endBuildDisplayListProfiling()</span><br></pre></td></tr></table></figure><h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drawDisplayList()</span><br><span class="line">  Trace.traceBegin(Trace.TRACE_TAG_VIEW, &quot;drawDisplayList&quot;)</span><br><span class="line">  canvas.drawDisplayList()</span><br><span class="line">  Trace.traceEnd(Trace.TRACE_TAG_VIEW)</span><br><span class="line">&lt;- draw()</span><br></pre></td></tr></table></figure><h4 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapBuffers()</span><br><span class="line">  sEgl.eglSwapBuffers(sEglDisplay, mEglSurface)</span><br><span class="line">&lt;- draw()</span><br></pre></td></tr></table></figure><h2 id="6-0-0-r1"><a href="#6-0-0-r1" class="headerlink" title="6.0.0_r1"></a>6.0.0_r1</h2><h3 id="涉及文件-1"><a href="#涉及文件-1" class="headerlink" title="涉及文件"></a>涉及文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/libs/hwui/renderthread/CanvasContext.cpp</span><br><span class="line">frameworks/base/libs/hwui/renderthread/FrameInfoVisualizer.cpp</span><br></pre></td></tr></table></figure><h3 id="绘制-1"><a href="#绘制-1" class="headerlink" title="绘制"></a>绘制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FrameInfoVisualizer::draw()</span><br><span class="line">  mFrameSource[] 数据</span><br><span class="line">  initializeRects() 根据数据设置所有 bar rect(left/right, top=bottom=baseline)</span><br><span class="line">  drawGraph() &#123; foreach bar: nextBarSegment() 计算bar高度; canvas-&gt;drawRects() &#125;</span><br><span class="line">  drawThreshold() 16ms水平线</span><br></pre></td></tr></table></figure><h3 id="dump-1"><a href="#dump-1" class="headerlink" title="dump"></a>dump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FrameInfoVisulizer::dumpData()</span><br><span class="line">  [IntentdedVsync, SyncStart]           == Draw</span><br><span class="line">  [SyncStart, IssueDrawCommandsStart]   == Prepare</span><br><span class="line">  [IssueDrawCommandsStart, SwapBuffers] == Process</span><br><span class="line">  [SwapBuffers, FrameCompleted]         == Execute</span><br></pre></td></tr></table></figure><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ui线程 ThreadedRenderer.java draw() -&gt; nSyncAndDrawFrame()</span><br><span class="line">--jni--&gt; nSyncAndDrawFrame()</span><br><span class="line">-&gt; RenderProxy::syncAndDrawFrame()</span><br><span class="line">-&gt; DrawFrameTask::drawFrame() &#123; postAndWait() 等待render线程完成当前帧 &#125;</span><br><span class="line"></span><br><span class="line">DrawFrameTask 继承自 RenderTask</span><br><span class="line"></span><br><span class="line">render线程</span><br><span class="line">初始化在 RenderProxy::ctor() 中 RenderThread::getInstance(), 是个Looper Thread</span><br><span class="line">调用 threadLoop()</span><br><span class="line">-&gt; DrawFrameTask::run() &#123;</span><br><span class="line">  if(canUnblockUiThread) unblockUiThread() 发信号给ui线程</span><br><span class="line">  if(canDrawFrame) (CanvasContext context)-&gt;draw()</span><br><span class="line">  if(!canUnblockUiThread) unblockUiThread()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计-1"><a href="#统计-1" class="headerlink" title="统计"></a>统计</h3><h4 id="Draw-1"><a href="#Draw-1" class="headerlink" title="Draw"></a>Draw</h4><h5 id="IntentdedVsync"><a href="#IntentdedVsync" class="headerlink" title="IntentdedVsync"></a>IntentdedVsync</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FrameInfo.h</span><br><span class="line">UiFrameInfoBuilder::setVsync(vsyncTime, intendedVsync)</span><br><span class="line">1. &lt;- CanvasContext::doFrame() &#123;</span><br><span class="line">  setVsync() 标识vsync时间</span><br><span class="line">  prepareTree()</span><br><span class="line">  CanvasContext::draw() &#125;</span><br><span class="line">&lt;- RenderThread::dispatchFrameCallbacks()</span><br><span class="line">&lt;--queue-- RenderThread::drainDisplayEventQueue()</span><br><span class="line">&lt;- RenderThread::threadLoop()</span><br><span class="line"></span><br><span class="line">2. &lt;- frameworks/base/core/jni android_view_Surface.cpp ContextFactory::draw()</span><br></pre></td></tr></table></figure><h5 id="SyncStart"><a href="#SyncStart" class="headerlink" title="SyncStart"></a>SyncStart</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CanvasContext::prepareTree()</span><br><span class="line">  mCurrentFrameInfo-&gt;markSyncStart()</span><br><span class="line">&lt;- doFrame()</span><br></pre></td></tr></table></figure><h5 id="IssueDrawCommandsStart"><a href="#IssueDrawCommandsStart" class="headerlink" title="IssueDrawCommandsStart"></a>IssueDrawCommandsStart</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CanvasContext::draw()</span><br><span class="line">  mCurrentFrameInfo-&gt;markIssueDrawCommandsStart()</span><br></pre></td></tr></table></figure><h5 id="SwapBuffers"><a href="#SwapBuffers" class="headerlink" title="SwapBuffers"></a>SwapBuffers</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. CanvasContext::draw()</span><br><span class="line"></span><br><span class="line">2. FrameInfoVisualizer::draw() 临时mark当前帧</span><br></pre></td></tr></table></figure><h5 id="FrameCompleted"><a href="#FrameCompleted" class="headerlink" title="FrameCompleted"></a>FrameCompleted</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. CanvasContext::draw()</span><br><span class="line"></span><br><span class="line">2. FrameInfoVisualizer::draw() 临时mark当前帧</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;本文目标&quot;&gt;&lt;a href=&quot;#本文目标&quot; class=&quot;headerlink&quot; title=&quot;本文目标&quot;&gt;&lt;/a&gt;本文目标&lt;/h1&gt;&lt;h2 id=&quot;探索-gpu呈现模式-测量的是什么&quot;&gt;&lt;a href=&quot;#探索-gpu呈现模式-测量的是什么&quot; class=&quot;he
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>aapt 源码分析</title>
    <link href="http://yoursite.com/android/aapt/"/>
    <id>http://yoursite.com/android/aapt/</id>
    <published>2016-09-11T08:42:19.000Z</published>
    <updated>2019-05-03T13:43:22.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resource Id 32位 = 8(packageId) + 8(typeId) + 16(nameId)</span><br><span class="line">ResourceTable.cpp::makeResId()</span><br></pre></td></tr></table></figure><h1 id="framework-res典型调用"><a href="#framework-res典型调用" class="headerlink" title="framework-res典型调用"></a>framework-res典型调用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out/host/linux-x86/bin/aapt package -u -x -z  --pseudo-localize   -M frameworks/base/core/res/AndroidManifest.xml -S device/myvendor/overlay/frameworks/base/core/res/res -S frameworks/base/core/res/res -A frameworks/base/core/res/assets  --min-sdk-version 22 --target-sdk-version 22 --product phone --version-code 22 --version-name 5.1.1-2.0.16   -F out/target/common/obj/APPS/framework-res_intermediates/package-export.apk</span><br></pre></td></tr></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><a id="more"></a><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">Main.cpp main() &#123; 收集命令行内容到bundle &#125;</span><br><span class="line">-&gt; handleCommand(bundle)</span><br><span class="line">-&gt; Command.cpp doPackage(bundle) &#123;</span><br><span class="line">  assets=new AaptAssets();</span><br><span class="line">  assets.slurpFromArgs(bundle) 收集所有文件信息</span><br><span class="line">  builder = new ApkBuilder(configFilter)</span><br><span class="line">  if(有资源文件) buildResources(bundle, assets, builder) 收集和编译resource, 生成id</span><br><span class="line">  assets.applyJavaSymbols() &#123; 决定哪些内容会输出到 R.java</span><br><span class="line">若是framework-res, AaptAssets.mHavePrivateSymbols==false 没有排除任何内容</span><br><span class="line">若是普通应用, 这里排除掉所有framework中定义的私有内容. &#125;</span><br><span class="line">  writeResourceSymbols(bundle, assets, ...)</span><br><span class="line">  writeProguardFile(bundle, assets)</span><br><span class="line">  if(outputAPKFile) addResourcesToBuilder(assets, builder) 生成apk &#125;</span><br><span class="line"></span><br><span class="line">-&gt; Resource.cpp buildResources() &#123;</span><br><span class="line">  parsePackage(androidManifestFile) 取包名, revisionCode, minSdk</span><br><span class="line">  packageType = 命令行 -x==System, --shared-lib==SharedLibrary, --feature-of==AppFeature</span><br><span class="line">  table = ResourceTable(bundle, assets.getPackage(), packageType)</span><br><span class="line">  table.addIncludedResources(bundle, assets)</span><br><span class="line"></span><br><span class="line">  applyFileOverlay() 作用于 OVERLAY_SET=drawable/layout/anim/animator/interpolator/transition/xml/raw/color/menu/mipmap, 这些目录若有overlay, 对应文件替换成overlay中的文件(文件整体替换)</span><br><span class="line"></span><br><span class="line">  对drawable/mipmap preProcessImages()</span><br><span class="line">  对OVERLAY_SET makeFileResources(bundle, assets, &amp;table, ...)</span><br><span class="line"></span><br><span class="line">  编译每个overlay中的values目录里的xml文件</span><br><span class="line">  foreach(overlay)</span><br><span class="line">    compileResourceFile(bundle, assets, file, it.getParams(), overlay=true, &amp;table)</span><br><span class="line"></span><br><span class="line">  table.assignResourceIds() &#123;</span><br><span class="line">package.applyPublicTypeOrder() &#123;</span><br><span class="line">public类型 的按 Type.mPublicIndex 重新排序(之后的 p.getOrderedTypes() 返回的就是已排序Type)</span><br><span class="line">Type.mPublicIndex 通过 addPublic() 的顺序设置, 就是在 values/public.xml 中的定义顺序 &#125;</span><br><span class="line">遍历 p.getOrderedTypes(): 每个type.getOrderedConfigs() 的 entry 生成 attribute</span><br><span class="line">遍历 p.getOrderedTypes():</span><br><span class="line">  每个type.applyPublicEntryOrder() 按 entryId(即资源id中的nameId) 重新排序(之后的 t.getOrderedConfigs() 返回就是已排序ConfigList)</span><br><span class="line">按顺序 ConfigList.setEntryIndex()</span><br><span class="line">按顺序遍历 每个 type中的 ConfigList中的 Entry: entry.assignResouceIds() 赋值bag中每个key的资源id &#125;</span><br><span class="line"></span><br><span class="line">  编译 layout/anim/animator/interpolator/transition/xml/drawable/color/menu 中的xml文件</span><br><span class="line">  compileXmlFile()</span><br><span class="line"></span><br><span class="line">  编译自动生成的xml</span><br><span class="line">  编译manifest</span><br><span class="line">  生成最终resource table: table.addSymbols(assets-&gt;getSymbolsFor(&quot;R&quot;)) 按已排序好的 Type 和 ConfigList 添加 symbol</span><br><span class="line">重新flatten, 输出到resources.arsc</span><br><span class="line">  validate检查一遍</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-&gt; ResourceTable.cpp compileResourceFile(*bundle, &amp;assets, ..., *outTable) &#123;</span><br><span class="line">  设 symbols = asset.getSymbolsFor(&quot;R&quot;)</span><br><span class="line">  switch(标签)</span><br><span class="line">case &quot;skip&quot;: 跳过</span><br><span class="line">case &quot;eat_comment&quot;: 跳过</span><br><span class="line">case &quot;public&quot;: &#123;</span><br><span class="line">  取type,name,id. outTable.addPublic() -&gt; Type.addPublic()</span><br><span class="line">Type.mPublicIndex = typeId(即资源id中间8位值)</span><br><span class="line">  symbols.addNestedSymbol(type, srcPos)</span><br><span class="line">  symbols.makeSymbolPublic(name, srcPos) &#125;</span><br><span class="line">case &quot;public-padding&quot;: 略</span><br><span class="line">case &quot;private-symbols&quot;: 略</span><br><span class="line">case &quot;java-symbol&quot;: 略</span><br><span class="line">case &quot;add-resouce&quot;: 略</span><br><span class="line">case &quot;declare-stylable&quot;: &#123;</span><br><span class="line">  取name</span><br><span class="line">  symbols.addNestedSymbol(&quot;stylable&quot;, srcPos)</span><br><span class="line">  symbols.addNestedSymbol(name, srcPos)</span><br><span class="line">  遍历XML子tag: compileAttribute(file, block, ..., &amp;itemIdent, inStylable==true)</span><br><span class="line">  symbols.addSymbol(itemIdent, 0, srcPos) &#125;</span><br><span class="line">case &quot;attr&quot;: compileAttribute(file, block, myPackage, outTable, outIdent==NULL, inStylable==false)</span><br><span class="line">case &quot;item&quot;: 略</span><br><span class="line">case &quot;string&quot;: 略</span><br><span class="line">case &quot;drawable&quot;: curTag=curType=&quot;drawable&quot;, curFormat=TYPE_REFERENCE|TYPE_COLOR</span><br><span class="line">case &quot;color&quot;: curTag, curType, curFormat</span><br><span class="line">case &quot;bool&quot;/&quot;integer&quot;/&quot;dimen&quot;/&quot;fraction&quot;/&quot;style&quot;/&quot;plurals&quot;: 基本同上</span><br><span class="line">case &quot;bag&quot;: curType=取type, curIsBag=true</span><br><span class="line">case &quot;array&quot;: curFormat=parse_flags(取format)</span><br><span class="line">case &quot;string-array&quot;: 略</span><br><span class="line">case &quot;integer-array&quot;: 略</span><br><span class="line"></span><br><span class="line">对bag/style/plurals/array/string-array/integer-array: curIsBag=true 解释: bag其实就是 自定义枚举集合 的意思</span><br><span class="line">对array/string-array/integer-array: curIsBagReplaceOnOverwrite=true</span><br><span class="line"></span><br><span class="line">if(curIsBag)</span><br><span class="line">  outTable.startBag()</span><br><span class="line">  parseAndAddBag() &#123;</span><br><span class="line">  outTable.addBag() overlay overwrite==true时, framework已有的可以覆盖, 没有的要用add-resource &#125;</span><br><span class="line">else</span><br><span class="line">  parseAndAddEntry(ResourceTable *outTable) &#123;</span><br><span class="line">  对于overlay, 传入的overwrite==true, framework已有的可以覆盖, 没有的要用add-resource</span><br><span class="line">outTable.addEntry() 实际添加到ResourceTable中对应 Type 的</span><br><span class="line">  (DefaultKeyedVector&lt;String16, sp&lt;ConfigList&gt; &gt; mConfigs).valueFor(entry)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  检查确认每个resource都有 default variant</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-&gt; compileAttribute() &#123;</span><br><span class="line">attr = PendingAttribute(myPackage, inFile, block, inStylable)</span><br><span class="line">取name, format</span><br><span class="line">attr.createIfNeeded(outTable)</span><br><span class="line">取min, max, localization, 若有则 outTable.addBag()</span><br><span class="line">遍历XML子tag:</span><br><span class="line">  非 TYPE_ENUM或TYPE_FALGS, 报错</span><br><span class="line">  if 第一次: outTable.addBag(bagKey==&quot;^type&quot;, value==type数字, replace==true)</span><br><span class="line">  outTable.addBag(bagKey==当前enum/flag的name, value==XML value字段, replace==false)</span><br><span class="line">appendTypeInfo()</span><br><span class="line">outTable.appendTypeComment() &#125;</span><br><span class="line"></span><br><span class="line">-&gt; PendingAttribute.createIfNeeded() &#123;</span><br><span class="line">if(added) return;</span><br><span class="line">added = true</span><br><span class="line">outTable.addBag(bagKey==&quot;^type&quot;, value==type数字, replace==false) &#125;</span><br><span class="line">可以得出</span><br><span class="line">  attr标签 format/min/max/localization 做一个bag, item是自己;</span><br><span class="line">  否则 若有子tag, 子tag必须是enum/flag, 做一个bag, 每个子tag做成一个item</span><br><span class="line"></span><br><span class="line">-&gt; addBag(srcPos, package, type, name, bagParent, bagKey, value, *style, &amp;params, replace, isId, format)&#123;</span><br><span class="line">e=ResourceTable::getEntry(package, type, name, srcPos, replace, params)</span><br><span class="line">e.addToBag(sourcePos, bagKey, value, style, replace, isId, format) &#125;</span><br><span class="line"></span><br><span class="line">-&gt; ResouceTable::getEntry(overlay==replace) &#123;</span><br><span class="line">    Type t=getType(package, type, sourcePos, doSetIndex)</span><br><span class="line">    t.getEntry(name, sourcePos, config, dotSetIndex, overlay, bundle.autoOverlay) &#125;</span><br><span class="line"></span><br><span class="line">-&gt; Entry.addToBag(...) &#123;</span><br><span class="line">makeItABag(srcPos) 将自己的mType设为 TYPE_BAG</span><br><span class="line">item=Item(srcPos, isId, value, style, format)</span><br><span class="line">if(已有key):</span><br><span class="line">  if(!replace) 报错</span><br><span class="line">  else mBag.replaceValueFor(key, item)</span><br><span class="line">mBag.add(key, item)</span><br><span class="line">mBag是Entry成员, 类型是 KeyedVector&lt;String16, Item&gt; &#125;</span><br><span class="line">Item 类型有 TYPE_BAG/TYPE_ITEM, 当类型是TYPE_BAG时 mBag 包含当前bag的所有item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ResourceTable.cpp compileXmlFile(*bundle, &amp;assets, *table, XMLNode&amp; root, AaptFile&amp; target) &#123;</span><br><span class="line">  root.assignResouceIds(assets, table) 设置的 id 会在 flatten 时用到</span><br><span class="line">root.parseValues(assets, table) 记录当前解析的xml源码行号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写到-R-java-的流程"><a href="#写到-R-java-的流程" class="headerlink" title="写到 R.java 的流程"></a>写到 R.java 的流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Command.cpp::doPackage() &#123; framework 生成时包名就是自身, 所以 havePrivateSymbols() 为 false &#125;</span><br><span class="line">-&gt; Resource.cpp::WriteResourceSymbols(AaptAssets assets, includePrivate=true) &#123;</span><br><span class="line">遍历 assets-&gt;getSymbols(): 这里的symbol就是上面的 addSymbol() 加的</span><br><span class="line">  可能不同 类前缀包名/R.java 输出位置</span><br><span class="line">  WriteSymbolClass(AaptSymbols symbols)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; WriteSymbolClass(AaptSymbols symbols) &#123;</span><br><span class="line">  // framework-res 编译过程中 havePrivateSymbols()==false, 所以下面的遍历没有跳过任何内容</span><br><span class="line">  遍历 symbols-&gt;getSymbols() 所有 TYPE_INT32 类型(跳过非 javaSymbol): (AaptSymbolEntry sym).int32Val</span><br><span class="line">  遍历 symbols-&gt;getSymbols() 所有 TYPE_STRING 类型(跳过非 javaSymbol): sym.stringVal.string()</span><br><span class="line">遍历 symbols-&gt;getNestedSymbols(), styleableSymbols除外: 递归 WriteSymbolClass()</span><br><span class="line">writeLayoutClasses(styleableSymbols)</span><br><span class="line">if emitCallback: writeResourceLoadedCallback() &#125;</span><br><span class="line">  -&gt; 递归调用 WriteSymbolClass</span><br></pre></td></tr></table></figure><!--# overlay 的 values 目录 添加某些xml标签出错## 原因overlay中定义的 attr 若和framework中相同, 会在 compileAttribute() 报错## 解决目标cp -r frameworks/base/core/res/res/ device/myvendor/overlay/frameworks/base/core/res/ 全部拷贝过来都可用1. attr 重复定义报错PendingAttribute::createIfNeeded() 注释掉重复报错2. overlay attr createIfNeeded() addBag() 重复添加bag报错createIfNeeded() outTable.addBag() 调用加参数 replace==true3. 第2步添加replace后再添加attr时 传到 getEntry() 的 overlay==replace==true 导致-x 时自动添加 autoAddOverlay(代码 or 脚本 实现?)!!! 2,3步 可以改为 compileAttribute()多传一个 isOverlay=compileResouceFile()的overwrite参数, replace=isOverlay4. compileAttribute() addBag() 重复添加item报错compileAttribute() 所有addBag() 调用加参数 replace==true5. 验证无attr重复定义时可以正确编译6. 验证整个framework res拷贝过来 可以正确编译7. 验证编普通应用(如Launcher2) 可以正确编译-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Resource Id 32位 = 8(packageId) + 8(typeId) + 16(nameId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ResourceTable.cpp::makeResId()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;framework-res典型调用&quot;&gt;&lt;a href=&quot;#framework-res典型调用&quot; class=&quot;headerlink&quot; title=&quot;framework-res典型调用&quot;&gt;&lt;/a&gt;framework-res典型调用&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;out/host/linux-x86/bin/aapt package -u -x -z  --pseudo-localize   -M frameworks/base/core/res/AndroidManifest.xml -S device/myvendor/overlay/frameworks/base/core/res/res -S frameworks/base/core/res/res -A frameworks/base/core/res/assets  --min-sdk-version 22 --target-sdk-version 22 --product phone --version-code 22 --version-name 5.1.1-2.0.16   -F out/target/common/obj/APPS/framework-res_intermediates/package-export.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h1&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>PlantUML 基础</title>
    <link href="http://yoursite.com/misc/plantuml%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/misc/plantuml基础/</id>
    <published>2016-09-07T03:12:58.000Z</published>
    <updated>2019-05-03T13:05:47.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">&apos;comment</span><br><span class="line"></span><br><span class="line">/&apos; multiline</span><br><span class="line">comments</span><br><span class="line">&apos;/</span><br><span class="line"></span><br><span class="line">title First Page Title</span><br><span class="line">&apos; some diagram</span><br><span class="line"></span><br><span class="line">newpage</span><br><span class="line"></span><br><span class="line">&apos; some other diagram</span><br><span class="line"></span><br><span class="line">&apos; legend 图注 left/center/right</span><br><span class="line">legend center</span><br><span class="line">XX Diagram</span><br><span class="line">endlegend</span><br><span class="line"></span><br><span class="line">&apos; note left/left of/right/right of/over Alice</span><br><span class="line">note left: First note</span><br><span class="line"></span><br><span class="line">note right</span><br><span class="line">Second note</span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line">&apos; == Divider ==</span><br><span class="line"></span><br><span class="line">/&apos; space</span><br><span class="line">|||</span><br><span class="line">||45|| == 45px</span><br><span class="line">&apos;/</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Parent</span><br><span class="line">class Child</span><br><span class="line">Parent &lt;|-- Child</span><br><span class="line"></span><br><span class="line">&apos; 同生同死</span><br><span class="line">class CompositeChild</span><br><span class="line">CompositeChild : Parent strongRef</span><br><span class="line">Parent *-- CompositeChild</span><br><span class="line"></span><br><span class="line">&apos; 不同生同死</span><br><span class="line">class AggregateChild &#123;</span><br><span class="line">Parent gettWeakParent()</span><br><span class="line">&#123;static&#125; getStaticField()</span><br><span class="line">&#123;abstract&#125; doAbstractMath()</span><br><span class="line">&#125;</span><br><span class="line">Parent o-- AggregateChild</span><br><span class="line"></span><br><span class="line">abstract class &quot;Pure Abstract Class within parens&quot;</span><br><span class="line">interface IInterface</span><br><span class="line">class GenericClass&lt;? extends G&gt;</span><br><span class="line"></span><br><span class="line">package &quot;My Package&quot; &#123;</span><br><span class="line">IInterface ()- Parent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B: -&gt; solid</span><br><span class="line">B --&gt; A: --&gt; dash</span><br><span class="line">A -&gt;x B: -&gt;x</span><br><span class="line">A -&gt;&gt; B: -&gt;&gt;</span><br><span class="line">A \[#blue]- B: \[#blue]-</span><br><span class="line">autonumber</span><br><span class="line">A -&gt; B: autonumber1, ||| == space</span><br><span class="line">|||</span><br><span class="line">autonumber 10</span><br><span class="line">A -&gt; B: autonumber 10, ... == delay</span><br><span class="line">... Delayed ...</span><br><span class="line">autonumber 20 5</span><br><span class="line">A -&gt; B: autonumber 20 5-1</span><br><span class="line">A -&gt; B: autonumber 20 5-2</span><br><span class="line">A -&gt; B: autonumber stop == (should work)</span><br><span class="line">A -&gt; B: activate B</span><br><span class="line">activate B</span><br><span class="line">B -&gt; A: deactivate B</span><br><span class="line">deactivate B</span><br><span class="line">A -&gt; C: activate C</span><br><span class="line">activate C</span><br><span class="line">A -&gt; C: destroy C</span><br><span class="line">destroy C</span><br><span class="line"></span><br><span class="line">create D</span><br><span class="line">A -&gt; D: create D</span><br><span class="line"></span><br><span class="line">[-&gt; A: [ Incoming</span><br><span class="line">A -&gt;]: ] Outgoing</span><br><span class="line"></span><br><span class="line">participant E &lt;&lt; Stereotype &gt;&gt;</span><br><span class="line">A -&gt; E: stereotype</span><br><span class="line">participant F &lt;&lt; (S,#ADD1B2) Stereotype &gt;&gt;</span><br><span class="line">A -&gt; F: Stereotype with colored Spot</span><br><span class="line"></span><br><span class="line">box &quot;box #LightBlue&quot; #LightBlue</span><br><span class="line">participant E</span><br><span class="line">participant F</span><br><span class="line">end box</span><br><span class="line">E -&gt; F: box encompass</span><br><span class="line"></span><br><span class="line">actor Actor1</span><br><span class="line">boundary Boundary1</span><br><span class="line">control Control1</span><br><span class="line">entity Entity1</span><br><span class="line">database Database1</span><br><span class="line"></span><br><span class="line">participant &quot;Long name #red&quot; as L #red</span><br><span class="line">L -&gt; L: recursion</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本框架&quot;&gt;&lt;a href=&quot;#基本框架&quot; class=&quot;headerlink&quot; title=&quot;基本框架&quot;&gt;&lt;/a&gt;基本框架&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@startuml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;comment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;apos; multiline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title First Page Title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; some diagram&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newpage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; some other diagram&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; legend 图注 left/center/right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;legend center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XX Diagram&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endlegend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; note left/left of/right/right of/over Alice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note left: First note&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note right&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Second note&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end note&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; == Divider ==&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;apos; space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;||45|| == 45px&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@enduml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Fresco 源码分析</title>
    <link href="http://yoursite.com/android/fresco/"/>
    <id>http://yoursite.com/android/fresco/</id>
    <published>2016-09-07T03:03:58.000Z</published>
    <updated>2019-05-03T12:58:00.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SimpleDraweeView-显示流程"><a href="#SimpleDraweeView-显示流程" class="headerlink" title="SimpleDraweeView 显示流程"></a>SimpleDraweeView 显示流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SDV: SimpleDraweeView</span><br><span class="line">PDCBuilder: PipelineDraweeControllerBuilder</span><br><span class="line">ADCBuilder: AbstractDraweeControllerBuilder</span><br><span class="line">ADController: AbstractDraweeController</span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SDV.setImageURI() &#123;</span><br><span class="line">  controller = PDCBuilder.setUri(uri).setOldController(getController()).build()</span><br><span class="line">  setController(controller)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; (PDCBuilder 父类 ADCBuilder).buildController()</span><br><span class="line">  -&gt; PDCBuilder.obtainController() &#123; 清空现在的listeners &#125;</span><br><span class="line">  -&gt; ADCBuilder.maybeAttachListeners(controller) &#123;</span><br><span class="line">    只剩 ADCBuilder.mBoundControllerListeners, 此成员在 ADCBuilder ctor中赋值为null</span><br><span class="line">    &#125;</span><br><span class="line">-&gt; (SDV 父类 DraweeView).setController()</span><br><span class="line">  -&gt; DraweeHolder.setController()</span><br></pre></td></tr></table></figure><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在 WindowManger系统 SDV.onAttach() 时</span><br><span class="line">(SDV 父类 DraweeView).onAttach()</span><br><span class="line">-&gt; DraweeView.doAttach()</span><br><span class="line">  -&gt; DraweeHolder.onAttach()</span><br><span class="line">    -&gt; DraweeHolder.attachOrDetachController()</span><br><span class="line">      -&gt; DraweeHolder.attachController()</span><br><span class="line">        -&gt; AbstractDraweeController.onAttach()</span><br><span class="line">          -&gt; ADController.submitRequest() &#123;</span><br><span class="line">            若cache到, 直接调用 onNewResultInternal();</span><br><span class="line">            若无cache, mDataSource.subscribe(DataSubscriber), 在 onNewResultImpl()调用 onNewResultInternal() 或 onFailureInternal() &#125;</span><br><span class="line">-回调-&gt; ADController.onNewResultInternal() &#123;</span><br><span class="line">  mSettableDraweeHierarchy.setImage(drawable..)</span><br><span class="line">  isFinished: &#123; getControllerListener().onFinalImageSet() &#125;</span><br><span class="line">  否则: &#123; getControllerListener().onIntermediateImageSet() &#125;</span><br></pre></td></tr></table></figure><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fresco.initialize()</span><br><span class="line">-&gt; ImagePipelineFactory.initialize(ImagePipelineConfig) &#123; new ImagePipelineFactory() &#125;</span><br><span class="line">  -&gt; ImagePipelineFactory.ctor() &#123; mThreadHandoffProducerQueue = DefaultExecutorSupplier.mLightWeightBackgroundExecutor &#125;</span><br></pre></td></tr></table></figure><h3 id="提交到线程"><a href="#提交到线程" class="headerlink" title="提交到线程"></a>提交到线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(父类 ADController).submitRequest()</span><br><span class="line">-&gt; PipelineDraweeController.getDataSource()</span><br><span class="line">  -&gt; PDCBuilder.getDataSourceForRequest()</span><br><span class="line">    -&gt; ImagePipeline.fetchDecodedImage()</span><br><span class="line">      -&gt; ImagePipeline.submitFetchRequest() &#123; ClosableProducerToDataSourceAdapter.create() &#125;</span><br><span class="line">        -&gt; (ClosableProducerToDataSourceAdapter 父类 AbstractProducerToDataSourceAdapter).ctor()</span><br><span class="line">          -&gt; BitmapMemoryCacheGetProducer.produceResults()</span><br><span class="line">            -&gt; ThreadHandoffProducer.produceResults()</span><br><span class="line">              -&gt; ThreadHandoffProducerQueue.addToQueueOrExecute() &#123; mExecutor.execute() &#125;</span><br><span class="line">                -executor线程-&gt; StatefulProducerRunnable ThreadHandoffProducer.statefulRunnable.onSuccess()</span><br><span class="line">                  -&gt; (BitmapMemoryCacheKeyMultiplexProducer 父类 MultiplexProducer).produceResults()</span><br><span class="line">                    -&gt; MultiplexProducer.startInputProducerIfHasAttachedConsumers()</span><br><span class="line">                      -&gt; BitmapMemoryCacheProducer.produceResults()</span><br><span class="line">                        -&gt; DecodeProducer.produceResults()</span><br><span class="line">                          -&gt; LocalImageProgressiveDecoder.ctor()</span><br><span class="line">                            -&gt; 父类 ProgressiveDecoder.ctor() &#123; JobRunnable 此job被执行时 doDecode() &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AbstractDataSource.subscribe() &#123;</span><br><span class="line">  mDataSourceStatus在ctor赋初始值 IN_PROGRESS:</span><br><span class="line">    mSubscribers.add(Pair(dataSubscriber, ADController.mUiThreadImmediateExecutor))</span><br><span class="line">  shouldNotify==false: 忽略 &#125;</span><br><span class="line"></span><br><span class="line">JobScheduler</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SimpleDraweeView-显示流程&quot;&gt;&lt;a href=&quot;#SimpleDraweeView-显示流程&quot; class=&quot;headerlink&quot; title=&quot;SimpleDraweeView 显示流程&quot;&gt;&lt;/a&gt;SimpleDraweeView 显示流程&lt;/
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="fresco" scheme="http://yoursite.com/tags/fresco/"/>
    
  </entry>
  
  <entry>
    <title>duilib使用小结</title>
    <link href="http://yoursite.com/misc/duilib%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/misc/duilib使用/</id>
    <published>2016-07-07T00:42:42.000Z</published>
    <updated>2019-05-03T13:02:18.674Z</updated>
    
    <content type="html"><![CDATA[<p>版本: https://github.com/duilib/duilib master</p><p>环境: vs2013</p><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><p>新建空的win32工程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;UILib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDuiFrameWnd</span> :</span> <span class="keyword">public</span> WindowImplBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> LPCTSTR <span class="title">GetWindowClassName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _T(<span class="string">"DUIMainFrame"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> CDuiString <span class="title">GetSkinFile</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _T(<span class="string">"duilib.xml"</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> CDuiString <span class="title">GetSkinFolder</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _T(<span class="string">""</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">    CPaintManagerUI::SetInstance(hInstance);</span><br><span class="line"></span><br><span class="line">    CDuiFrameWnd duiFrame;</span><br><span class="line">    duiFrame.Create(<span class="literal">NULL</span>, _T(<span class="string">"DUIWnd"</span>), UI_WNDSTYLE_FRAME, WS_EX_WINDOWEDGE);</span><br><span class="line">    duiFrame.CenterWindow();</span><br><span class="line">    duiFrame.ShowModal();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="xml布局"><a href="#xml布局" class="headerlink" title="xml布局"></a>xml布局</h1><p>duilib.xml 需要同步到exe目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">name</span>=<span class="string">"closebtn"</span> <span class="attr">tooltip</span>=<span class="string">"关闭"</span>   <span class="attr">float</span>=<span class="string">"true"</span> <span class="attr">pos</span>=<span class="string">"44,5,74,24"</span> <span class="attr">width</span>=<span class="string">"28"</span> <span class="attr">normalimage</span>=<span class="string">" file='SysBtn\CloseNormal.bmp' "</span> <span class="attr">hotimage</span>=<span class="string">" file='SysBtn\CloseFocus.bmp' "</span> <span class="attr">pushedimage</span>=<span class="string">" file='SysBtn\CloseFocus.bmp' "</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>tooltip=”关闭”         提示文字float=”true”           绝对定位，其位置由pos属性指定</p><p>布局可以 VerticalLayout 为根节点, HorizontalLayout/VerticalLayout 穿插搭配. 某个Layout指定宽高, 可以用同类型做占位填充剩余空间:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VerticalLayout</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 占位 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HorizontalLayout</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HorizontalLayout</span> <span class="attr">height</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">HorizontalLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VerticalLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>重载 InitWindow:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> <span class="keyword">void</span> WindowImplBase::InitWindow()</span><br><span class="line">&#123;</span><br><span class="line">  CEditUI* pEdit = <span class="keyword">static_cast</span>&lt;CEditUI*&gt;(m_PaintManager.FindControl(_T(<span class="string">"startMac"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自绘控件"><a href="#自绘控件" class="headerlink" title="自绘控件"></a>自绘控件</h1><p>TODO</p><h1 id="事件消息处理-1"><a href="#事件消息处理-1" class="headerlink" title="事件消息处理 1"></a>事件消息处理 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h1><p>方法1: 重载 Notify</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> <span class="keyword">void</span> WindowImplBase::Notify(TNotifyUI&amp; msg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( msg.sType == _T(<span class="string">"windowinit"</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( msg.sType == DUI_MSGTYPE_CLICK ) <span class="comment">// 对应 _T("click")</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.pSender-&gt;GetName() == _T(<span class="string">"btnGen"</span>)) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (msg.pSender-&gt;GetName() == _T(<span class="string">"btnClose"</span>))</span><br><span class="line">&#123;</span><br><span class="line">PostMessage(WM_CLOSE); <span class="comment">// 退出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>增加rc资源文件</p><h2 id="xml和图片资源-假设全在根目录下-不包括子目录"><a href="#xml和图片资源-假设全在根目录下-不包括子目录" class="headerlink" title="xml和图片资源(假设全在根目录下, 不包括子目录)"></a>xml和图片资源(假设全在根目录下, 不包括子目录)</h2><h3 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h3><p>直接放在根目录</p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>xml 和所有资源 打包成zip, 放在跟目录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPaintManagerUI::SetResourcePath(CPaintManagerUI::GetInstancePath());</span><br><span class="line">CPaintManagerUI::SetResourceZip(_T(<span class="string">"res.zip"</span>));</span><br></pre></td></tr></table></figure><h3 id="rc资源raw"><a href="#rc资源raw" class="headerlink" title="rc资源raw"></a>rc资源raw</h3><p>TODO</p><h3 id="rc资源zip-2"><a href="#rc资源zip-2" class="headerlink" title="rc资源zip 2"></a>rc资源zip <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3><p>rc资源 添加 导入zip, 类型为 ZIPRES</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> UILIB_RESOURCETYPE WindowImplBase::GetResourceType() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> UILIB_ZIPRESOURCE; &#125;</span><br><span class="line"><span class="keyword">virtual</span> LPCTSTR WindowImplBase::GetResourceID() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> MAKEINTRESOURCE(IDR_ZIPRES1); &#125;</span><br></pre></td></tr></table></figure><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>重编编译 DuiLib项目: 选择对应的 debug/release 版本, 设置为编译静态库, 添加 UILIB_STATIC 预编译宏. 编译出的lib(release版)改名 DuiLib_s.lib(unicode版名 DuiLib_us.lib), 放入Lib目录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UILIB_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;UIlib.h&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UILIB_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_uds.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Duilib_ds.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_us.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_s.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_ud.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Duilib_d.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> _UNICODE</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib_u.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"DuiLib.lib"</span>)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="图标-3"><a href="#图标-3" class="headerlink" title="图标 3"></a>图标 <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h2><p>exe静态图标:添加 资源 -&gt; Icon 导入</p><p>exe运行图标:duiFrame.create() 之后调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duiFrame.SetIcon(IDI_ICON);</span><br></pre></td></tr></table></figure><h2 id="添加版本信息"><a href="#添加版本信息" class="headerlink" title="添加版本信息"></a>添加版本信息</h2><p>添加 资源 -&gt; Version</p><h1 id="其他-4"><a href="#其他-4" class="headerlink" title="其他 4"></a>其他 <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></h1><h2 id="设置标题栏区域"><a href="#设置标题栏区域" class="headerlink" title="设置标题栏区域"></a>设置标题栏区域</h2><p>xml Window节点 caption属性, 指定标题栏区域(top,left,right,bottom)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">size</span>=<span class="string">"800,600"</span> <span class="attr">caption</span>=<span class="string">"0,0,0,32"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="窗口大小调整"><a href="#窗口大小调整" class="headerlink" title="窗口大小调整"></a>窗口大小调整</h2><p>xml Window节点 sizebox属性, 边缘可调范围</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">size</span>=<span class="string">"800,600"</span> <span class="attr">sizebox</span>=<span class="string">"4,4,4,4"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="窗口最小尺寸"><a href="#窗口最小尺寸" class="headerlink" title="窗口最小尺寸"></a>窗口最小尺寸</h2><p>xml Window节点 mininfo属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">size</span>=<span class="string">"800,600"</span> <span class="attr">mininfo</span>=<span class="string">"600,400"</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.cnblogs.com/Alberl/p/3352904.html" rel="external nofollow noopener noreferrer" target="_blank">duilib-事件处理</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.csdn.net/x356982611/article/details/39271205" rel="external nofollow noopener noreferrer" target="_blank">duilib-zip-rc</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="http://stackoverflow.com/questions/320677/how-do-i-set-the-icon-for-my-application-in-visual-studio-2008" rel="external nofollow noopener noreferrer" target="_blank">win32-icon</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.cnblogs.com/Alberl/p/3354294.html" rel="external nofollow noopener noreferrer" target="_blank">duilib-misc</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;版本: https://github.com/duilib/duilib master&lt;/p&gt;
&lt;p&gt;环境: vs2013&lt;/p&gt;
&lt;h1 id=&quot;基本内容&quot;&gt;&lt;a href=&quot;#基本内容&quot; class=&quot;headerlink&quot; title=&quot;基本内容&quot;&gt;&lt;/a&gt;基本内容&lt;
      
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 构建系统 源码分析</title>
    <link href="http://yoursite.com/android/build-system/"/>
    <id>http://yoursite.com/android/build-system/</id>
    <published>2016-07-02T01:10:10.000Z</published>
    <updated>2019-05-03T12:51:57.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-aosp-5-1-1-r6"><a href="#版本-aosp-5-1-1-r6" class="headerlink" title="版本 aosp-5.1.1_r6"></a>版本 aosp-5.1.1_r6</h1><h1 id="build-envsetup-sh"><a href="#build-envsetup-sh" class="headerlink" title="build/envsetup.sh"></a>build/envsetup.sh</h1><p>作用:</p><ul><li>找 vendorsetup.sh (收集 lunch combo)</li><li>设置编译 JAVA_HOME</li><li>设置其他shell参数<ul><li>TARGET_PRODUCT</li><li>不包括 TARGET_DEVICE(在product_config.mk定义)</li><li>TARGET_BUILD_VARIANT</li><li>TARGET_BUILD_TYPE</li><li>TARGET_BUILD_APPS</li></ul></li><li>定义快捷命令<ul><li>lunch</li><li>croot</li><li>m</li><li>mm</li><li>mmm</li><li>mma</li><li>mmma</li><li>mgrep</li><li>jgrep</li><li>sgrep</li><li>resgrep</li><li>godir</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">找device和vendor目录下的vendorsetup.sh 并 source</span><br><span class="line">addcompletions() 找 sdk/bash_completion 下 [a-z]*.bash 并 source</span><br><span class="line">  function gettop&#123;&#125; 返回aosp编译根目录</span><br><span class="line">  </span><br><span class="line">  function lunch&#123;&#125;</span><br><span class="line">    TARGET_PRODUCT=$product</span><br><span class="line">    TARGET_BUILD_VARIANT=$variant</span><br><span class="line">    TARGET_BUILD_TYPE=release</span><br><span class="line">    aosp_strawberry-userdebug 其中 product==aosp_strawberry, variant==userdebug</span><br><span class="line"></span><br><span class="line">设置shell变量, 如 $ANDROID_BUILD_TOP</span><br></pre></td></tr></table></figure><h1 id="调用关系-按先后顺序"><a href="#调用关系-按先后顺序" class="headerlink" title="调用关系(按先后顺序)"></a>调用关系(按先后顺序)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AndroidProducts.mk</span><br><span class="line">&lt;- build/core/product_config.mk 通过 $(get-all-product-makefils) 查找device,vendor下AndroidProducts.mk, 导入 all_product_configs</span><br><span class="line"></span><br><span class="line">BoardConfig.mk</span><br><span class="line">&lt;- build/core/envsetup.mk 通过查找 device,vendor 下 $(TARGET_DEVICE)/BoardConfig.mk 包含进来, 设置到 board_config_mk</span><br><span class="line">  &lt;- TARGET_DEVICE 在 envsetup.mk 定义 TARGET_DEVICE := $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_DEVICE)</span><br><span class="line">  &lt;- INTERNAL_PRODUCT 在 product_config.mk 定义 INTERNAL_PRODUCT := $(call resolve-short-product-name, $(TARGET_PRODUCT))</span><br><span class="line">  &lt;- PRODUCT_DEVICE 由不同的 device 位置下定义</span><br><span class="line"></span><br><span class="line">AndroidBoard.mk</span><br><span class="line">&lt;- build/target/board/Android.mk -include $(TARGET_DEVICE_DIR)/AndroidBoard.mk</span><br><span class="line">&lt;- TARGET_DEVICE_DIR 在 build/core/envsetup.mk 定义 TARGET_DEVICE_DIR := $(patsubst %/,%,$(dir $(board_config_mk)))</span><br></pre></td></tr></table></figure><h1 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ANDROID_BUILD_TOP/Makefile</span><br><span class="line">-&gt; build/core/main.mk 定义 TOPDIR 为空, BUILD_SYSTEM := $(TOPDIR)build/core</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/help.mk</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/config.mk( 定义 BUILD_XXX 对应的各个mk, 供以后include )</span><br><span class="line">    -&gt; $(BUILD_SYSTEM)/envsetup.mk ( 定义 PRODUCT_OUT )</span><br><span class="line">      -&gt; $(BUILD_SYSTEM)/product_config.mk</span><br><span class="line">        -&gt; $(BUILD_SYSTEM)/node_fns.mk</span><br><span class="line">        -&gt; $(BUILD_SYSTEM)/product.mk</span><br><span class="line">        -&gt; $(BUILD_SYSTEM)/device.mk</span><br><span class="line">        -&gt; $(TARGET_PRODUCT)(来自envsetup.sh) 的 AndroidProducts.mk &#123;</span><br><span class="line">          call product.mk:import-products</span><br><span class="line">            -&gt; node_fns.mk:import-nodes(间接定义 PRODUCTS==目标mk文件列表, 同时PRODUCTS本身也用作一个前缀)</span><br><span class="line">            -&gt; _import-nodes-inner -&gt; import-node -&gt; include</span><br><span class="line">          定义 INTERNAL_PRODUCT== $(TARGET_PRODUCT)扩展出来的目标mk文件</span><br><span class="line">          &#125;</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/cleanbuild.mk</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/definitions.mk</span><br><span class="line">  -&gt; $(BUILD_SYSTEM)/dex_preopt.mk</span><br><span class="line">  -&gt; build/core/pdk_config.mk</span><br></pre></td></tr></table></figure><h1 id="recovery"><a href="#recovery" class="headerlink" title="recovery"></a>recovery</h1><ul><li>build/core/Makefile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">公共资源路径</span><br><span class="line">recovery_resources_common := $(call include-path-for, recovery)/res</span><br><span class="line">include-path-for 定义在 pathmap.mk 中 pathmap_INCL</span><br><span class="line">默认 recovery_resources_common := $(recovery_resources_common)-xhdpi</span><br><span class="line"></span><br><span class="line">私有资源路径</span><br><span class="line">recovery_resources_private := $(strip $(wildcard $(TARGET_DEVICE_DIR)/recovery/res))</span><br><span class="line"></span><br><span class="line">编译依赖</span><br><span class="line">recovery_resource_deps := $(shell find $(recovery_resources_common) $(recovery_resources_private) -type f)</span><br><span class="line"></span><br><span class="line">拷贝 recovery 资源</span><br><span class="line">$(INSTALLED_RECOVERY_IMAGE_TARGET): $(recovery_binary)... 等</span><br><span class="line">        cp -rf $(recovery_resources_common)/* $(TARGET_RECOVERY_ROOT_OUT)/res</span><br><span class="line">        $(foreach item,$(recovery_resouces_private), cp -rf $(item) $(TARGET_RECOVERY_ROOT_OUT)/)</span><br></pre></td></tr></table></figure><h1 id="apicheck"><a href="#apicheck" class="headerlink" title="apicheck"></a>apicheck</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apicheck.mk &#123; .PHONY checkapi; droidcore: checkapi &#125;</span><br></pre></td></tr></table></figure><h1 id="Add-on"><a href="#Add-on" class="headerlink" title="Add-on"></a>Add-on</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">主mk: device/sample/products/sample_addon.mk</span><br><span class="line">&lt;- device/sample/products/AndroidProducts.mk</span><br><span class="line">&lt;- build/core/product.mk</span><br><span class="line">  function  _find-android-products-files</span><br><span class="line">  查找 device, vendor, $(SRC_TARGET_DIR)/product 目录下所有 AndroidProducts.mk</span><br><span class="line">  &lt;- function get-all-product-makefiles</span><br><span class="line">     返回排序好的所有 AndroidProducts.mk 定义的 PRODUCT_MAKEFILES</span><br><span class="line">    &lt;- build/core/product_config.mk</span><br><span class="line">       all_product_configs 从中找到对应 product 的 makefile</span><br><span class="line">       all_product_makefiles 集合所有product的makefile</span><br><span class="line">       call import-products 导入product的makefile</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">device/sample/products/AndroidProducts.mk</span><br><span class="line">PRODUCT_MAKEFILES := $(LOCAL_DIR)/sample_addon.mk</span><br><span class="line">PRODUCT_PACKAGES := PlatformLibraryClient \</span><br><span class="line">com.example.android.platform_library \</span><br><span class="line">libplatform_library_jni</span><br><span class="line"></span><br><span class="line">依赖 com.example.android.platform_library 来自</span><br><span class="line">device/sample/frameworks/PlatformLibrary/Android.mk</span><br><span class="line">&lt;- device/sample/frameworks/Android.mk 引入所有子目录mk</span><br><span class="line">&lt;- device/sample/Android.mk 引入所有子目录mk</span><br></pre></td></tr></table></figure><p>使用到的主mk: build/core/tasks/sdk-addon.mk</p><ol><li>MODULES 由 fils_to_copy 拷贝到 dest</li><li>COPY_FILES 由 files_to_copy 拷贝到 dest</li><li>TARGET_CPU_API对应的img 拷贝到 $(addon_dir_img)</li><li>修改 TARGET_CPU_API对应的 source.properties, 拷贝到 $(addon_dir_img)</li><li>doc_module 拷贝到 $(OUT_DOCS)</li><li>sdk打包, image打包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function module-installed-files 查找某个module在out目录安装位置</span><br></pre></td></tr></table></figure><h1 id="Overlay"><a href="#Overlay" class="headerlink" title="Overlay"></a>Overlay</h1><p>TODO</p><h1 id="Jack"><a href="#Jack" class="headerlink" title="Jack"></a>Jack</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java-to-jack(definitions.mk)</span><br><span class="line">&lt;- LOCAL_IS_STATIC_JAVA_LIBRARY 构建static javalib 时候 $(full_classes_jack)的命令 (static_java_library.mk)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-aosp-5-1-1-r6&quot;&gt;&lt;a href=&quot;#版本-aosp-5-1-1-r6&quot; class=&quot;headerlink&quot; title=&quot;版本 aosp-5.1.1_r6&quot;&gt;&lt;/a&gt;版本 aosp-5.1.1_r6&lt;/h1&gt;&lt;h1 id=&quot;build-env
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>LibGDX 实现 动态中文/freetype 加载</title>
    <link href="http://yoursite.com/libgdx/dynamic-freetype/"/>
    <id>http://yoursite.com/libgdx/dynamic-freetype/</id>
    <published>2015-01-19T06:01:02.000Z</published>
    <updated>2019-05-03T12:45:15.684Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. JSON读取</span><br><span class="line">Skin.getJsonLoader() -&gt; new Json() -&gt; json.setSerializer()</span><br><span class="line">  读json文件size属性, new FreeTypeBitmapFontStub()</span><br><span class="line">  FreeTypeBitmapFontStub extends BitmapFont</span><br><span class="line">  FreeTypeBitmapFontStub.data instanceof FreeTypeBitmapFontData</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2. Label初始化</span><br><span class="line">new Label() -&gt; Label.setStyle() &#123;</span><br><span class="line">  FreeTypeFontManager.isFreeTypeFont(style.font)==true &#123;</span><br><span class="line">    data.setSize(style.fontSize)</span><br><span class="line">    new FontInfo(data.getSize())</span><br><span class="line">    font = FreeTypeFontManager.getInstance().refresh(style.font==stub, newInfo)</span><br><span class="line">  &#125;</span><br><span class="line">  cache = new BitmapFontCache(font) // cache里的 font == 第一次refresh出来的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">3. 更新文字</span><br><span class="line">Label.setText() -&gt; Widget.invalidateHierarchy()</span><br><span class="line">-&gt; Label.invalidate() &#123; needsLayout=true; sizeInvalid=true &#125;</span><br><span class="line">渲染 -&gt; draw() -&gt; Widget.validate() -&gt; Label.layout()</span><br><span class="line">-&gt; computeSize() -&gt; cache.requireSequence(text) &#123;</span><br><span class="line">  FreeTypeFontManager.isFreeTypeFont(this.font) == true:</span><br><span class="line">    this.font = FreeTypeFontManager.getInstance().refresh(this.font, curFontInfo) &#125;</span><br><span class="line">-&gt; FreeTypeFontManager.refresh(font, newInfo) &#123;</span><br><span class="line">  isStub == false</span><br><span class="line">  newInfo不含在当前子串里:</span><br><span class="line">    getFont(newInfo.size)</span><br><span class="line">-&gt; (FreeTypeFontGenerator)generator.generateFont(sizePixel, sequence, flip==false)</span><br><span class="line">-&gt; FreeTypeFontGenerator.generateData(size, chars, flip, packer==null)</span><br><span class="line">-&gt; FreeTypeFontGenerator.generateData(parameter) &#123;</span><br><span class="line">  parameter.packer == null:</span><br><span class="line">    ownsAtlas = true</span><br><span class="line">    data.regions[i] = new TextureRegion(tex=new Texture()) // new出来的texture</span><br><span class="line">    return data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="libgdx" scheme="http://yoursite.com/categories/libgdx/"/>
    
    
  </entry>
  
  <entry>
    <title>LibGDX skin load 源码分析</title>
    <link href="http://yoursite.com/libgdx/skin-load/"/>
    <id>http://yoursite.com/libgdx/skin-load/</id>
    <published>2014-09-22T09:35:06.000Z</published>
    <updated>2019-05-03T12:41:57.448Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造函数里设置 SkinLoader</span><br><span class="line">AssetManager.ctor() &#123; setLoader(Skin.class, new SkinLoader(resolver==new InternalFileHandleResolver())) &#125;</span><br><span class="line">-&gt; AssetManager.setLoader(Skin.class, suffix==null, SkinLoader)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户程序调 load</span><br><span class="line">AssetManager.load(fileName, Skin.class)</span><br><span class="line">-&gt; AssetManager.load(fileName, Skin.class, parameter==null) &#123;</span><br><span class="line">  getLoader(Skin.class, fileName);</span><br><span class="line">  loadQueue.add(new AssetDescriptor(fileName, Skin.class, parameter))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">用户程序调 finishLoading</span><br><span class="line">AssetManager.finishLoading() &#123; while(!update()) ThreadUtils.yield() &#125;</span><br><span class="line">-&gt; AssetManager.update() &#123; nextTask(); updateTask(); &#125;</span><br><span class="line">AssetManager.nextTask() &#123; assetDesc = loadQueue.removeIndex(0); addTask(assetDesc) or inc ref &#125;</span><br><span class="line">AssetManager.updateTask() &#123; task.update(); addAsset(fileName, type, task.getAsset()) &#125;</span><br><span class="line">-&gt; AssetLoadingTask.update() &#123; handleSyncLoader() or handleAsyncLoader() &#125;</span><br><span class="line">SkinLoader 是 AsynchronousAssetLoader, 这里会调用 handleAsyncLoader()</span><br><span class="line">-&gt; AssetLoadingTask.handleAsyncLoader() &#123;</span><br><span class="line">    // 执行多次,  因为submit到线程池中, 被调 call().</span><br><span class="line">    // SkinLoader.getDependencies() 加入装载 TextureAtlas 的依赖</span><br><span class="line">    exec0:</span><br><span class="line">dependenciesLoaded == false &amp;&amp; depsFuture == null:</span><br><span class="line">    depsFuture = (AsyncExecutor executor).submit(this)</span><br><span class="line">exec1:</span><br><span class="line">dependenciesLoaded == false &amp;&amp; depsFuture.isDone():</span><br><span class="line">    dependenciesLoaded = true</span><br><span class="line">可能的exec2:</span><br><span class="line">loadFuture == null &amp;&amp; !asyncDone:</span><br><span class="line">    loadFuture = executor.submit(this)</span><br><span class="line">    // 会在线程池中执行 AssetLoadingTask.call() -&gt; 即本loader的 loadAsync()</span><br><span class="line">最后的exec:</span><br><span class="line">asyncDone:</span><br><span class="line">    asset = asyncLoader.loadSync(manager, fileName, resolve(loader, assetDesc), params)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SkinLoader.loadSync() &#123; new Skin(atlas).load(file) &#125;</span><br><span class="line">-&gt; Skin.load(skinFile) &#123; getJsonLoader().fromJson(Skin.class, skinFile) &#125;</span><br><span class="line">-&gt; Json.fromJson(type==Skin.class) &#123; this.readValue(type, null, new JsonReader().parse(file)) &#125;</span><br><span class="line"></span><br><span class="line">JsonReader.parse(file) &#123; JsonReader.parse(file.reader(&quot;UTF-8&quot;)) &#125;</span><br><span class="line">-&gt; JsonReader.parse(Reader reader) -&gt; JsonReader.parse(data, 0, offset)</span><br><span class="line"></span><br><span class="line">FileHandle.reader(charset) &#123; return new InputStreamReader(read(), charset) &#125;</span><br><span class="line">FileHandle.read() &#123; return new FileInputStream(file()) &#125;</span><br><span class="line">FileHandle.file() &#123; return java.io.File &#125;</span><br><span class="line"></span><br><span class="line">Skin.getJsonLoader(skinFile) &#123; return 匿名Json新类 &#125;</span><br><span class="line">匿名Json类.readValue(Skin.class, null, jsonData) &#123;</span><br><span class="line">jsonData.isString() == false:</span><br><span class="line">    super.readValue(Skin.class, elementType==null, jsonData)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Json.readValue(Skin.class, elementType==null, jsonData) &#123;</span><br><span class="line">jsonData.isObject() == true:</span><br><span class="line">    typeName == null: className = null</span><br><span class="line">    serializer = classToSerializer.get(Skin.class) // 在Skin.java匿名类中有SetSerializer</span><br><span class="line">    serializer.read(this, jsonData, type)</span><br><span class="line">&#125;</span><br><span class="line">-&gt; 匿名Json类.read() &#123; for(valueMap) readnamedObjects(json, ClassReflection.forName(valueMap.name()), valueMap) &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="libgdx" scheme="http://yoursite.com/categories/libgdx/"/>
    
    
  </entry>
  
  <entry>
    <title>RecyclerView 源码分析</title>
    <link href="http://yoursite.com/android/recyclerview/"/>
    <id>http://yoursite.com/android/recyclerview/</id>
    <published>2014-07-26T09:23:01.000Z</published>
    <updated>2019-05-03T12:38:10.302Z</updated>
    
    <content type="html"><![CDATA[<p>版本: 25.1.0</p><h1 id="Scroll"><a href="#Scroll" class="headerlink" title="Scroll"></a>Scroll</h1><h1 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RecyclerView#requestChildFocus()</span><br><span class="line">-&gt; RecyclerView#requestChildRectangleOnScreen()</span><br><span class="line">-&gt; LayoutManager#requestChildRectangleOnScreen()</span><br><span class="line">-&gt; RecyclerView#smoothScrollBy(int, int)</span><br></pre></td></tr></table></figure><h1 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h1><h2 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addOnScrollListener/removeOnScrollListener (OnScrollListener)</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><h3 id="ScrollListener-onScrolled"><a href="#ScrollListener-onScrolled" class="headerlink" title="ScrollListener.onScrolled()"></a>ScrollListener.onScrolled()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;- RecyclerView.dispatchOnScrolled()</span><br><span class="line">1. &lt;- RecyclerView.scrollByInternal()</span><br><span class="line">  1.1 &lt;- scrollBy(x, y)</span><br><span class="line">    1.1.1 &lt;- RV.LayoutManager.requestChildRectangleOnScreen() &#123; dx!=0 || dy!=0 &#125;</span><br><span class="line">    1.1.2 &lt;- RV.LayoutManager.performAccessibilityAction() &#123; vScroll != 0 || hScroll != 0 &#125;</span><br><span class="line">  1.2 &lt;- RV.onTouchEvent() ACTION_MOVE 触摸移动</span><br><span class="line">  1.3 &lt;- RV.onGenericMotionEvent() SOURCE_CLASS_POINTER ACTION_SCROLL 鼠标滚轮</span><br><span class="line">2. &lt;- RecyclerView.dispatchLayoutStep3() &#123; dispatchOnScrolled(0,0) &#125; layout引起的 item range changed</span><br><span class="line">3. &lt;- RV.ViewFlinger.run() &#123;</span><br><span class="line">  hresult=LayoutManager.scrollHorizontallyBy(); 线性布局 会调到 LinearLayoutManager.scrollBy()</span><br><span class="line">  vresult=LayoutManager.scrollVeriticallyBy();</span><br><span class="line">  (hresult != 0 || vresult != 0) dispatchOnScrolled() &#125;</span><br></pre></td></tr></table></figure><h3 id="RV-smoothScrollBy"><a href="#RV-smoothScrollBy" class="headerlink" title="RV.smoothScrollBy()"></a>RV.smoothScrollBy()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; RV.ViewFlinger.smoothScrollBy()</span><br></pre></td></tr></table></figure><h3 id="RV-scrollToPosition"><a href="#RV-scrollToPosition" class="headerlink" title="RV.scrollToPosition()"></a>RV.scrollToPosition()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; LayoutManager.scrollToPosition()</span><br></pre></td></tr></table></figure><h1 id="onBindViewHolder"><a href="#onBindViewHolder" class="headerlink" title="onBindViewHolder()"></a>onBindViewHolder()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RV.Adapter.onBindViewHolder(holder, position)</span><br><span class="line">1. &lt;- RV.Adapter.onBindViewHolder(holder, position, payloads)</span><br><span class="line">2. &lt;- RV.Adapter.bindViewHolder(holder, position)</span><br><span class="line">  &lt;- RV.Recycler.tryBindViewHolderByDeadline() 前提: 判断 RecyclerPool.willBindInTime()</span><br><span class="line">  2.1 &lt;- RV.Recycler.bindViewToPosition()</span><br><span class="line">  2.2 &lt;- RV.Recycler.tryGetViewHolderForPositionByDeadline()</span><br><span class="line">    &lt;- RV.Recycler.getViewForPosition()</span><br><span class="line">    2.2.1 &lt;- LayoutState.next()</span><br><span class="line">    2.2.2 &lt;- LinearLayoutManager.next()</span><br><span class="line">      &lt;- LLM.layoutChunk()</span><br><span class="line">      &lt;- LLM.fill()</span><br><span class="line">      2.2.2.1 &lt;- LLM.onLayoutChildren()</span><br><span class="line">        2.2.2.1.1 &lt;- RV.dispatchLayoutStep2()</span><br><span class="line">          &lt;- 2.2.2.1.1.1 RV.dispatchLayout()</span><br><span class="line">            &lt;- RV.onLayout() # 一般调用位置</span><br><span class="line">          &lt;- 2.2.2.1.1.2 RV.onMeasure() 只在 LayoutManager.setAutoMeasureEnabled(true)</span><br><span class="line">        2.2.2.1.2 &lt;- RV.dispatchLayoutStep1()</span><br><span class="line">      2.2.2.2 &lt;- LLM.layoutForPredictiveAnimations()</span><br><span class="line">      2.2.2.3 &lt;- LLM.scrollBy()</span><br><span class="line">      2.2.2.4 &lt;- LLM.onFocusSearchFailed()</span><br></pre></td></tr></table></figure><p>版本: 23.0.1</p><h1 id="从notifyDatasetChanged-到实际的view被重新添加和layout"><a href="#从notifyDatasetChanged-到实际的view被重新添加和layout" class="headerlink" title="从notifyDatasetChanged() 到实际的view被重新添加和layout"></a>从notifyDatasetChanged() 到实际的view被重新添加和layout</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">什么时候加进动画?</span><br><span class="line">Adapter.notifyDataSetChanged() &#123; (AdapterDataObservable mObservable).notifyChanged() &#125; 每个 Observable.onChanged()</span><br><span class="line">-&gt; RecyclerViewDataObserver.onChanged() &#123;</span><br><span class="line">    setDataSetChangedAfterLayout() 每个没有shouldIgnore的viewHolder(现有的和mRecycler的) 添加 FLAG_ADAPTER_POSITION_UNKNOWN</span><br><span class="line">    if(没有pendingUpdates) requestLayout()</span><br><span class="line">--UI Handler下一次处理--&gt; RV.onLayout() -...-&gt; onBindViewHolder()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="notifyItemRemoved-pos-到实际的view被删除和重新layout"><a href="#notifyItemRemoved-pos-到实际的view被删除和重新layout" class="headerlink" title="notifyItemRemoved(pos) 到实际的view被删除和重新layout"></a>notifyItemRemoved(pos) 到实际的view被删除和重新layout</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Adapter.notifyItemRemoved(pos) &#123; mObservable.notifyItemRangeRemoved(pos,1) &#125; 每个 Oberservable.onItemRangeRemoved()</span><br><span class="line">-&gt; RecyclerViewDataObserver.onItemRangeRemoved() &#123;</span><br><span class="line">  AdapterHelper.onItemRangeRemoved()一般==true: 加到AdapterHelper.mPendingUpdates数组</span><br><span class="line">    triggerUpdateProcessor() &#125;</span><br><span class="line">-&gt; RecyclerViewDataObserver.triggerUpdateProcessor() &#123; 一般mHasFixedSize==false: mAdapterUpdateDuringMeasure=true; requestLayout() &#125;</span><br><span class="line"></span><br><span class="line">--UI Handler下一次处理--&gt; RV.onMeasure() &#123;</span><br><span class="line">  mAdapterUpdateDuringMeasure==true: ... processAdapterUpdatesAndSetAnimationFlags(); ... mLayout.onMeasure() &#125;</span><br><span class="line">  -&gt; RV.processAdapterUpdatesAndSetAnimationFlags() &#123;</span><br><span class="line">  ... mItemAnimator != null &amp;&amp; mLayout.supportsPredictiveItemAnimations(): mAdapterHelper.preProcess(); .. &#125;</span><br><span class="line">    -&gt; AdapterHelper.preProcess()</span><br><span class="line">      -&gt; AdapterHelper.applyRemove(op) &#123; type==POSITION_TYPE_NEW_OR_LAID_OUT: postponeAndUpdateViewHolders(op) &#125;</span><br><span class="line">      -&gt; AdapterHelper.postponeAndUpdateViewHolders(op) &#123; 加到mPostponedList; (RV内部匿名实例 mCallback).offsetPositionsForRemovingLaidOutOrNewView() &#125;</span><br><span class="line">      -&gt; RV.offsetPositionRecordsForRemove(posStart, count, false); RV.mItemsAddedOrRemoved=true</span><br><span class="line">      -&gt; &#123; holder.flagRemovedAndOffsetPosition(); mRecycler.offsetPositionRecordsForRemove(); requestLayout() &#125;</span><br><span class="line">      -&gt; Recycler.offsetPositionRecordsForRemove()</span><br><span class="line">      -&gt; Recycler.recycleCachedViewAt(idx) &#123; addViewHolderToRecycledViewPool(); mCachedViews.remove(idx) &#125;</span><br><span class="line">    -&gt; 设置 animationTypeSupported=true; 设置 mState.mRunSimpleAnimations=true; mState.mRunPredictiveanimations=true</span><br><span class="line">  -&gt; RV.onLayout()</span><br><span class="line">  -&gt; RV.dispatchLayout() &#123;</span><br><span class="line">    processAdapterUpdatesAndSetAnimationFlags(); ...</span><br><span class="line">    mLayout.onLayoutChildren(); 可能修改 mState.mRunSimpleAnimations</span><br><span class="line">    if(mState.mRunSimpleAnimations) &#123; ...</span><br><span class="line">      animateDisappearance(disappearingItem) 每个disappearing and removed item</span><br><span class="line">      animateAppearance(itemHolder) 每个appearing and added item</span><br><span class="line">      animateMove(postHolder) 每个persistent item</span><br><span class="line">      animateChange(oldHolder) 每个changing item</span><br><span class="line">    &#125;</span><br><span class="line">  -&gt; RV.animateDisappearance(holder) &#123;</span><br><span class="line">    addAnimatingView(holder)</span><br><span class="line">    if(没有真的移除) mItemAnimator.animateMove()==true: postAnimationRunner()</span><br><span class="line">    else(真的移除) holder.setIsRecyclable(fasle); mItemAnimator.animateRemove()加到mPendingRemovals==true: postAnimationRunner()</span><br><span class="line">    &#125;</span><br><span class="line">    -&gt; addAnimatingView() &#123; mRecycler.unscrapView(holder); 一般 mChildHelper.hide(view) &#125;</span><br><span class="line">      -&gt; ChildHelper.hide() -&gt; ChildHelper.hideInternal(view) &#123; 加到 mHiddenViews &#125;</span><br><span class="line">    -&gt; postAnimationRunner() &#123; 动画runnable post到choreographer上 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">--choreographer下一帧--&gt; 执行动画 RV.mItemAnimatorRunner</span><br><span class="line">-&gt; DefaultItemAnimator.runPendingAnimations() &#123; animateRemoveImpl(每个removed的holder); ... &#125;</span><br><span class="line">-&gt; DefaultItemAnimator.animateRemoveImpl() &#123; view.animate().alpha(0).setDuration(默认120ms).start() &#125;</span><br><span class="line">--动画执行完--&gt; 动画回调 onAnimatinoEnd() &#123; view.setalpha(1); dispatchRemoveFinished(holder); dispatchFinishedWhenDone() &#125;</span><br><span class="line">  -&gt; (DefaultItemAnimator 父类 ItemAnimator).dispatchRemoveFinished() &#123; mListener.onRemoveFinished() &#125;</span><br><span class="line">  -&gt; RV.(ItemAnimatorRestoreListener mItemAnimatorListener).onRemoveFinished() &#123;</span><br><span class="line">    item.setIsRecyclable(true); removeAnimatingView(view) 或 removeDetachedView(view) &#125;</span><br><span class="line">    -&gt; RV.removeAnimatingView(view) &#123;</span><br><span class="line">      mChildHelper.removeViewIfHidden(view);</span><br><span class="line">      if(removed): mRecycler.unscrapView(); mRecycler.recycleViewHolderInternal() &#125;</span><br><span class="line">      -&gt; ChildHelper.removeViewifHidden() &#123;</span><br><span class="line">        从mBucket移除; unhideViewInternal(view); (mCallback==RV匿名).removeViewAt(idx) 真正从RV移除 &#125;</span><br><span class="line">        -&gt; ChildHelper.unhideViewInternal() &#123; 从 mHiddenViews 移除 &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;版本: 25.1.0&lt;/p&gt;
&lt;h1 id=&quot;Scroll&quot;&gt;&lt;a href=&quot;#Scroll&quot; class=&quot;headerlink&quot; title=&quot;Scroll&quot;&gt;&lt;/a&gt;Scroll&lt;/h1&gt;&lt;h1 id=&quot;调用顺序&quot;&gt;&lt;a href=&quot;#调用顺序&quot; class=&quot;he
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 启动流程 源码分析</title>
    <link href="http://yoursite.com/android/startup-routines/"/>
    <id>http://yoursite.com/android/startup-routines/</id>
    <published>2013-11-23T08:10:00.000Z</published>
    <updated>2019-05-03T12:35:02.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-android-4-3-r2-2"><a href="#版本-android-4-3-r2-2" class="headerlink" title="版本 android-4.3_r2.2"></a>版本 android-4.3_r2.2</h1><h1 id="涉及到的文件"><a href="#涉及到的文件" class="headerlink" title="涉及到的文件"></a>涉及到的文件</h1><ul><li>/system/core/init/init.c</li><li>/system/core/init/init_parser.c<ul><li>init_parse_config_file()</li></ul></li><li>/system/core/rootdir/init.rc</li><li>/frameworks/base/cmds/app_process/app_main.cpp<ul><li>LOCAL_MODULE:= app_process</li></ul></li><li>/dalvik/vm/Jni.cpp<ul><li>JNI_CreateJavaVM()</li></ul></li><li>/dalvik/vm/Init.cpp<ul><li>dvmStartup()</li></ul></li></ul><h1 id="init"><a href="#init" class="headerlink" title="init"></a>init</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">main() &#123; init_parse_config_file(&quot;/init.rc&quot;); execute_one_command(); &#125;</span><br><span class="line">-&gt; init_parse_config_file() 读init.rc, 按顺序读入:</span><br><span class="line"></span><br><span class="line">* ueventd /sbin/ueventd</span><br><span class="line">** class core</span><br><span class="line">* [optional]console /system/bin/sh</span><br><span class="line">** class core</span><br><span class="line">* [optional]adbd /sbin/adbd</span><br><span class="line">** class core</span><br><span class="line">* servicemanager /system/bin/servicemanager</span><br><span class="line">** class core</span><br><span class="line">* vold /system/bin/vold</span><br><span class="line">** class core</span><br><span class="line">* netd /system/bin/netd</span><br><span class="line">** class main</span><br><span class="line">* debuggerd /system/bin/debuggerd</span><br><span class="line">*class main</span><br><span class="line">* ril-daemon /system/bin/rild</span><br><span class="line">** class main</span><br><span class="line">* surfaceflinger /system/bin/surfaceflinger</span><br><span class="line">** class main</span><br><span class="line">* zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">** class main</span><br><span class="line">** socket zygote stream 660 root system</span><br><span class="line">** 本篇主要分析这个</span><br><span class="line">* drm /system/bin/drmserver</span><br><span class="line">** class main</span><br><span class="line">* media /system/bin/mediaserver</span><br><span class="line">** class main</span><br><span class="line">* [optional]bootanim /system/bin/bootanimation</span><br><span class="line">** class main</span><br><span class="line">等内容.</span><br><span class="line"></span><br><span class="line">-&gt; init.rc 读到</span><br><span class="line">on boot</span><br><span class="line">    ...</span><br><span class="line">    class start core</span><br><span class="line">    class_start main</span><br><span class="line">on 是一个 SECTION, parse_new_section(), 此SECTION下的每行 state.parse_line() 就是调的 parse_line_action().</span><br><span class="line">class_start 是一个 COMMAND, symbol是 K_class_start(keywords.h用宏拼接出来)</span><br><span class="line">zygote服务有 class main. 在 init.c::main() 中通过</span><br><span class="line">action_for_each_trigger(&quot;boot&quot;, action_add_queue_tail) 加入到 init_parser.c::action_queue 队列.</span><br><span class="line">最后通过 init.c::main() 中 execute_one_command() 从队列中取出执行</span><br><span class="line">-&gt; builtins.c::do_class_start()</span><br><span class="line">-&gt; service_for_each_class(args[1], service_start_if_not_disabled)</span><br><span class="line">-&gt; service_start_if_not_disabled()</span><br><span class="line">-&gt; service_start() &#123;</span><br><span class="line">  fork();</span><br><span class="line">  if(pid==0)</span><br><span class="line">    create_socket(&quot;zygote&quot;, stream, 660, root, system);</span><br><span class="line">    publish_socket(); app_process的环境变量增加 ANDROID_SOCKET_zygote=&quot;/dev/socket/zygote&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="Zygote-app-process进程"><a href="#Zygote-app-process进程" class="headerlink" title="Zygote(app_process进程)"></a>Zygote(app_process进程)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  parentDir &lt;= &quot;/system/bin&quot;</span><br><span class="line">  if(&quot;--zygote&quot;) (AppRuntime runtime).start(&quot;com.android.internal.os.ZygoteInit&quot;, &quot;--startSystemServer&quot;? flag);</span><br><span class="line">  else runtime.start(&quot;com.android.internal.os.RuntimkeInit&quot;, &quot;--application&quot; or tool? flag); &#125;</span><br><span class="line">-&gt; AppRuntime父类 AndroidRuntime::start() &#123;</span><br><span class="line">  startVm(&amp;mJavaVM, &amp;env); onVmCreated(env); startReg(env); JNI调java的main(), 当前线程作为VM主线程, 直到VM退出. &#125;</span><br><span class="line">  -&gt; AndroidRuntime::startVm()</span><br><span class="line">    -&gt; JNI_CreateJavaVM() &#123; memset((DvmGlobals gDvm), 0); calloc (JavaVMExt *pVM); dvmCreateJNIEnv(); dvmStartup(); &#125;</span><br><span class="line">      -&gt; dvmCreateJNIEnv() &#123; calloc (JNIEnvExt *newEnv); dvmSetJniEnvThreadId(newEnv, self); &#125;</span><br><span class="line">      -&gt; dvmStartup() &#123;</span><br><span class="line">        processOptions() &quot;-Xzygote&quot;设置 gDvm.zygote;</span><br><span class="line">        if(gDvm.zygote) initZygote() else dvmInitAfterZygote(); &#125;</span><br><span class="line">--JAVA--&gt; ZygoteInit#main() &#123;</span><br><span class="line">  registerZygoteSocket(); preload(); gc();</span><br><span class="line">  if(&quot;start-system-server&quot;) startSystemServer();</span><br><span class="line">  无限循环runSelectLoop(); &#125;</span><br><span class="line">  -&gt; registerZygoteSocket() JAVA端用上 create_socket() 出来的 UNIX Domain socket, 作为server端.</span><br><span class="line">  -&gt; preload() &#123;</span><br><span class="line">    preloadClasses(); &quot;preloaded-classes&quot;文件每行 #ClassName 调用 Class.forName()</span><br><span class="line">    preloadResources(); &#125;</span><br><span class="line">-&gt; startSystemServer() &#123;</span><br><span class="line">  Zygote.forkSystemServer(); 最后调的是 dalvik_system_Zygote.cpp::Dalvik_dalvik_system_Zygote_forkSystemServer()</span><br><span class="line">  if(pid==0) handleSystemServerProcess() &#125;</span><br></pre></td></tr></table></figure><h1 id="System-Server-app-process子进程"><a href="#System-Server-app-process子进程" class="headerlink" title="System Server(app_process子进程)"></a>System Server(app_process子进程)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">--SystemServer进程--&gt; handleSystemServerProcess()</span><br><span class="line">-&gt; RuntimeInit#zygoteInit() &#123;</span><br><span class="line">  redirectLogStreams(); 重定向System.out和System.err到logcat系统.</span><br><span class="line">  commonInit(); nativeZygoteInit(); applicationInit(); &#125;</span><br><span class="line">  --JNI--&gt; nativeZygoteInit()</span><br><span class="line">    -&gt; AndroidRuntime.cpp::com_android_internal_os_RuntimeInit_nativeZygoteInit()</span><br><span class="line">    -&gt; app_main.cpp AppRunTime::onZygoteInit() &#123; (ProcessState proc)-&gt;startThreadPool() &#125;</span><br><span class="line">    -&gt; ProcessState.cpp::spawnPooledThread(true) &#123;</span><br><span class="line">      t=new PoolThread(isMain==true); // mCanCallJava默认为true</span><br><span class="line">      // android_atomic_add()等类似函数返回操作之前的数</span><br><span class="line">      t-&gt;run(&quot;Binder_1&quot;, 默认priority==PRIORITY_DEFAULT, 默认stack==0) &#125;</span><br><span class="line">      --新线程--&gt; _threadLoop() -&gt; PoolThread::threadLoop()</span><br><span class="line">      -&gt; IPCThreadState::joinThreadPool() // ioctl &quot;/dev/binder&quot; 加入Binder线程池, 无限阻塞获取并执行binder驱动发过来的命令</span><br><span class="line">  -&gt; applicationInit()</span><br><span class="line">    -&gt; invokeStatkcMain(&quot;com.android.server.SystemServer&quot;, startArgs) // args在 ZygoteInit#startSystemServer()</span><br><span class="line">    -&gt; throw new ZygoteInit.MethodAndArgsCaller(m, argv) 抛异常方式扔掉初始化时多余的栈, 在ZygoteInit#main()捕捉</span><br><span class="line">    -&gt; ZygoteInit#main caller.run()</span><br><span class="line">-&gt; SystemServer#main() &#123; loadLibrary(&quot;android_servers&quot;); init1(); &#125;</span><br><span class="line">  -&gt; init1() --JNI--&gt; android_server_SystemServer_init1()</span><br><span class="line">  --C++--&gt; system_init.cpp::system_init() &#123;</span><br><span class="line">    defaultServiceManager(); // handle==0</span><br><span class="line">    JNI调 SystemServer#init2();</span><br><span class="line">    ProcessState::startThreadPool(), joinThreadPool(默认isMain==true); &#125;</span><br><span class="line">    -&gt; SystemServer#init2()</span><br><span class="line">    --新线程--&gt; ServerThread#run() &#123;</span><br><span class="line">      uiHandlerThread = new HandlerThread(); // 起UI线程</span><br><span class="line">      wmHandlerThread = new HandlerThread(); // 起WM线程</span><br><span class="line">      context = ActivityManagerService.main();</span><br><span class="line">      起各个service:</span><br><span class="line">      wm = WindowManagerService.main(context, power, display, inputManager, ...);</span><br><span class="line">      ServiceManager.addService(Context.WINDOW_SERVICE, wm);</span><br><span class="line">      ActivityManagerService.self().setWindowManager(wm);</span><br><span class="line">      wm.displayReady();</span><br><span class="line">      ...</span><br><span class="line">      ActivityManagerService.self().systemReady(runnable调各个service.systemReady); // AMS准备完毕</span><br><span class="line">    &#125;</span><br><span class="line">    -&gt; ActivityManagerService#main() &#123;</span><br><span class="line">      thr = new AThread(); thr.start(); // 新起Looper用线程: 创建AMS, looper.loop()</span><br><span class="line">      (ActivityThread at) = ActivityThread.systemMain(); // 本线程本Looper管理Acitivty生命周期</span><br><span class="line">      (ActivityManagerService m).mMainStack = new ActivityStack(m, context==at.getSystemContext(), true, thr.mLooper);</span><br><span class="line">      m.startRunning();</span><br><span class="line">    &#125;</span><br><span class="line">      -&gt; ActivityThread#systemMain() &#123; thread=new ActivityThread(); thread.attach(system==true); &#125;</span><br><span class="line">        -&gt; ActivityThread#attach() &#123;</span><br><span class="line">          system==true:</span><br><span class="line">            context=new ContextImpl(); context.init();</span><br><span class="line">            app=newApplication(Application.class, context);</span><br><span class="line">            mAllApplications.add(app); mInitialApplication=app; app.onCreate();</span><br><span class="line">          &#125;</span><br><span class="line">    -&gt; WMS#displayReady() &#123;</span><br><span class="line">        displayReady(Display.DEFAULT_DISPLAY);</span><br><span class="line">        mDisplayReady = true;</span><br><span class="line">        mIsTouchDevice = mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN);</span><br><span class="line">        (mPolicy 就是 PhoneWindowManager).setInitialDisplaySize(...);</span><br><span class="line">      &#125;</span><br><span class="line">      -&gt; WMS#displayReady(DEFAULT_DISPLAY) &#123;</span><br><span class="line">        DisplayContent displayContent = getDisplayContentLocked(DEFAULT_DISPLAY);</span><br><span class="line">        mAnimator.addDisplayLocked(displayId);</span><br><span class="line">      &#125;</span><br><span class="line">        -&gt; WMS#getDisplayContentLocked(DEFAULT_DISPLAY) &#123;</span><br><span class="line">          Display display = mDisplayManager.getDisplay(DEFAULT_DISPLAY);</span><br><span class="line">          displayContent = newDisplayContentLocked(display);</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; DisplayManager#getDisplay(DEFAULT_DISPLAY) &#123; DisplayManager#getOrCreateDisplayLocked(DEFAULT_DISPLAY, false); &#125;</span><br><span class="line">        -&gt; WMS#newDisplayContentLocked(display) &#123;</span><br><span class="line">          displayContent = new DisplayContent(display);</span><br><span class="line">          mDisplaySettings.getOverscanLocked(info.name, rect);</span><br><span class="line">          mDisplayManagerService.setOverscan(display.getDisplayId(), rect...);</span><br><span class="line">          (mPolicy 就是 PhoneWindowManager).setDisplayOverscan(displayContent.getDisplay(), rect...);</span><br><span class="line">        &#125;</span><br><span class="line">    -&gt; AMS#systemReady(goingCallback) &#123;</span><br><span class="line">      goingCallback.run();</span><br><span class="line">      mMainStack.resumeTopActivityLocked(null);</span><br><span class="line">    &#125;</span><br><span class="line">      -&gt; ActivityStack#resumeTopActivityLocked(null)</span><br><span class="line">      -&gt; resumeTopActivityLocked(prev==null, options==null) &#123; next==null: mService.startHomeActivityLocked() &#125;</span><br><span class="line">      -&gt; ActivityServiceManager#startHomeActivityLocked()</span><br><span class="line">      -&gt; ActivityStack#startActivityLocked(caller==null, intent, resolvedType==null, aInfo==Launcher信息,</span><br><span class="line">        resultTo==null, resultWho==null, requestCode==0, callingPid==0, callingUid==0, callingPackage==null,</span><br><span class="line">        startFlags==0, options==null, componentSpecified==false, outActivity==null)</span><br><span class="line">      -&gt; startActivityUncheckedLocked(r==new ActivityRecord(), sourceRecord==null,</span><br><span class="line">        startFlags==0, doResume==true, options==null)</span><br><span class="line">      -&gt; startActivityLocked(r, newTask==true, doResume==true, keepCurTransition==false, options==null) &#123;</span><br><span class="line">        mHistory.size() == 0: mService.mWindowManager.addAppToken(addPos==0 ...);</span><br><span class="line">        doResume==true: resumeTopActivityLocked(null);</span><br><span class="line">      &#125;</span><br><span class="line">        -&gt; resumeTopActivityLocked(null)</span><br><span class="line">        -&gt; resumeTopActivityLocked(prev==null, options==null) &#123;</span><br><span class="line">          (ActivityRecord next)==Launcher</span><br><span class="line">          (ProcessRecord next.app)==null: startSpecificActivityLocked(next, andResume==true, checkConfig==true)</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; startSpecificActivityLocked() &#123; getProcessRecordLocked()==null: mService.startProcessLocked(); &#125;</span><br><span class="line">        -&gt; AMS#startProcessLocked(r.processName, r.info.applicationInfo, knownToBeDead==true, intentFlags==0,</span><br><span class="line">          hostingType==&quot;activity&quot;, r.intent.getComponent(), allowWhileBooting==false, isolated==false) &#123;</span><br><span class="line">            getProcessRecordLocked()==null:</span><br><span class="line">              app=newProcessRecordLocked(null, info, processName, isolated==false)</span><br><span class="line">              startProcessLocked(app, hostingType==&quot;activity&quot;, hostingNameStr)</span><br><span class="line">          &#125;</span><br><span class="line">          -&gt; startProcessLocked() &#123; startResult=Process.start(&quot;android.app.ActivityThread&quot;, ...) &#125;</span><br><span class="line">          -&gt; Process#startViaZygote(processClass==&quot;android.app.ActivityThread&quot;, ...)</span><br><span class="line">          -&gt; Process#zygoteSendArgsAndGetResult() &#123; Binder命令zygote(app_process) fork新进程 &#125;</span><br></pre></td></tr></table></figure><h1 id="Launcher应用"><a href="#Launcher应用" class="headerlink" title="Launcher应用"></a>Launcher应用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--新进程Launcher--&gt; ZygoteConnection#handleChildProc()</span><br><span class="line">-&gt; ZygoteInit#invokeStaticMain()</span><br><span class="line">--抛异常方式回调--&gt; ActivityThread#main() &#123;</span><br><span class="line">  thread=new ActivityThread(); thread.attach(false);</span><br><span class="line">  sMainHandler=thread.getHandler(); Looper.loop(); &#125;</span><br><span class="line">-&gt; ActivityThread#attach(system==false) &#123;</span><br><span class="line">  mgr=ActivityManagerNative.getDefault(); mgr.attachApplication(ApplicationThread mAppThread); &#125;</span><br><span class="line">--Binder--&gt; ActivityManagerNative#attachApplication(app)</span><br><span class="line">-&gt; 子类AMS#attachApplication(app)</span><br><span class="line">-&gt; AMS#attachApplicationLocked() &#123;</span><br><span class="line">     ActivityRecord hr=mMainStack.topRunningActivityLocked();</span><br><span class="line">     hr!=null &amp;&amp; normalMode, hr.app==null:</span><br><span class="line">       mMainStack.realStartActivityLocked(hr, app, true, true);</span><br><span class="line">   &#125;</span><br><span class="line">  -&gt; ActivityStack#realStartActivityLocked() &#123; app.thread.scheduleLaunchActivity(intent, appToken, ...); &#125;</span><br><span class="line">--Binder--&gt; Launcher进程 ApplicationThread#scheduleLaunchActivity()</span><br><span class="line">-&gt; queueOrSendMessage(H.LAUNCH_ACTIVITY, r)</span><br><span class="line">--Handler H--&gt; ActivityThread#handleLaunchActivity(r, null) &#123; performLaunchActivity(); handleResumeActivity(); &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-android-4-3-r2-2&quot;&gt;&lt;a href=&quot;#版本-android-4-3-r2-2&quot; class=&quot;headerlink&quot; title=&quot;版本 android-4.3_r2.2&quot;&gt;&lt;/a&gt;版本 android-4.3_r2.2&lt;/h1&gt;&lt;h1 i
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js Crypto模块 使用示例</title>
    <link href="http://yoursite.com/nodejs/crypto%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/nodejs/crypto模块使用/</id>
    <published>2013-11-14T09:44:00.000Z</published>
    <updated>2019-05-03T12:32:08.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li>目录{:toc}</li></ul><h1 id="Node版本-v0-10-20-API-Stability-2-Unstable-1"><a href="#Node版本-v0-10-20-API-Stability-2-Unstable-1" class="headerlink" title="Node版本: v0.10.20 (API Stability: 2 - Unstable) 1"></a>Node版本: v0.10.20 (API Stability: 2 - Unstable) <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h1><h1 id="公钥私钥的签名和验证"><a href="#公钥私钥的签名和验证" class="headerlink" title="公钥私钥的签名和验证"></a>公钥私钥的签名和验证</h1><p>用 ssh 的公私钥做例子。<code>ssh-keygen</code> 可以生成不同种类和长度的公私钥对。</p><p>查看 ssh key 的种类和长度 <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -l -f id_rsa.pub  # 假设输出长度是 1024 , 种类是 RSA</span><br></pre></td></tr></table></figure><p>将 ssh格式 的公钥转换为 RFC4716/PKCS8/PEM 等格式 <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f id_rsa.pub -e -m PEM  # 假设保存到 id_rsa.pub.pem</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备公私钥和数据</span></span><br><span class="line"><span class="keyword">var</span> privatekey = fs.readFileSync(<span class="string">'.ssh/id_rsa'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">var</span> publickey = fs.readFileSync(<span class="string">'.ssh/id_rsa.pub.pem'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'www.youku.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用私钥签名</span></span><br><span class="line"><span class="keyword">var</span> signer = crypto.createSign(<span class="string">'RSA-SHA256'</span>);</span><br><span class="line">signer.update(data);</span><br><span class="line"><span class="keyword">var</span> signature = signer.sign(privatekey, <span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用公钥验证</span></span><br><span class="line"><span class="keyword">var</span> verifier = crypto.createVerify(<span class="string">'RSA-SHA256'</span>);</span><br><span class="line">verifier.update(data);</span><br><span class="line"><span class="keyword">var</span> isok = verifier.verify(publickey, signature, <span class="string">'base64'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isok); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="加密和解密2"><a href="#加密和解密2" class="headerlink" title="加密和解密2"></a>加密和解密<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h1><p>用 aes256 算法做例子, 输入字符串为utf-8编码, 加密输出base64编码串.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备密码和数据</span></span><br><span class="line"><span class="keyword">var</span> algo = <span class="string">'aes256'</span></span><br><span class="line"><span class="keyword">var</span> plain_format = <span class="string">'utf8'</span>;</span><br><span class="line"><span class="keyword">var</span> crypt_format = <span class="string">'base64'</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'secret string'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">var</span> cipher = crypto.createCipher(algo, key);</span><br><span class="line"><span class="keyword">var</span> encrypted = cipher.update(data, plain_format, crypt_format);</span><br><span class="line">encrypted += cipher.final(crypt_format);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="keyword">var</span> decipher = crypto.createDecipher(algo, key);</span><br><span class="line"><span class="keyword">var</span> decrypted = decipher.update(encrypted, crypt_format, plain_format);</span><br><span class="line">decrypted += decipher.final(plain_format);</span><br><span class="line"><span class="built_in">console</span>.log(decrypted); <span class="comment">// 'secret string'</span></span><br></pre></td></tr></table></figure><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://nodejs.org/api/crypto.html" rel="external nofollow noopener noreferrer" target="_blank">Node.js Manual &amp; Documentation</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://stackoverflow.com/questions/6953286/node-js-encrypting-data-that-needs-to-be-decrypted" rel="external nofollow noopener noreferrer" target="_blank">StackOverflow</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="http://prefetch.net/blog/index.php/2010/12/13/locating-the-ssh-key-type-and-key-size-from-a-public-key-file/" rel="external nofollow noopener noreferrer" target="_blank">prefetch.net</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://unix.stackexchange.com/questions/26924/how-do-i-convert-a-ssh-keygen-public-key-into-a-format-that-openssl-pem-read-bio" rel="external nofollow noopener noreferrer" target="_blank">unix.stackexchange.com</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;目录
{:toc}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Node版本-v0-10-20-API-Stability-2-Unstable-1&quot;&gt;&lt;a href=&quot;#Node版本-v0-10-20-API-Stability-2-Unstable-1&quot; clas
      
    
    </summary>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/nodejs/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 窗口系统 源码分析</title>
    <link href="http://yoursite.com/android/window-system/"/>
    <id>http://yoursite.com/android/window-system/</id>
    <published>2013-11-07T07:20:00.000Z</published>
    <updated>2019-05-03T12:19:07.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-android-4-3-r2-2"><a href="#版本-android-4-3-r2-2" class="headerlink" title="版本 android-4.3_r2.2"></a>版本 android-4.3_r2.2</h1><h1 id="涉及到的文件"><a href="#涉及到的文件" class="headerlink" title="涉及到的文件"></a>涉及到的文件</h1><h1 id="SystemServer进程"><a href="#SystemServer进程" class="headerlink" title="SystemServer进程"></a>SystemServer进程</h1><h1 id="应用进程"><a href="#应用进程" class="headerlink" title="应用进程"></a>应用进程</h1><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">承接 anatomy-of-android-startup-routines:</span><br><span class="line">ActivityThread#handleLaunchActivity(r, null) &#123; performLaunchActivity(); handleResumeActivity(); &#125;</span><br><span class="line"></span><br><span class="line">-&gt; ActivityThread#performLaunchActivity() &#123;</span><br><span class="line">   activity = newActivity();</span><br><span class="line">   Application app=makeApplication();</span><br><span class="line">   appContext = createBaseContextForActivity();</span><br><span class="line">   activity.attach(appContext, this, ..., app, ...);</span><br><span class="line">   mInstrumentation.callActivityOnCreate(activity, r.state); // activity.performCreate() -&gt; activity.onCreate();</span><br><span class="line">   if(!r.activity.mFinished):</span><br><span class="line">     activity.performStart();</span><br><span class="line">   if(!r.activity.mFinished &amp;&amp; r.state!=null):</span><br><span class="line">     mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</span><br><span class="line">   if(!r.activity.mFinished):</span><br><span class="line">     mInstrumentation.callActivityOnPostCreate(activity, r.state); &#125;</span><br><span class="line"></span><br><span class="line">  -&gt; Instrumentation#newActivity() &#123; ClassLoader.loadClass(className).newInstance(); &#125;</span><br><span class="line">  -&gt; LoadedApk#makeApplication() &#123; // 创建Application类的Context</span><br><span class="line">       ContextImpl appContext=new ContextImpl(); appContext.init(this, null, mActivityThread);</span><br><span class="line">       (Application app)=mActivityThread.mInstrumentation.newApplication(cl, appClass, appContext);</span><br><span class="line">       appContext.setOuterContext(app);</span><br><span class="line">       instrumentation.callApplicationOnCreate(app);</span><br><span class="line">     &#125;</span><br><span class="line">    -&gt; ContextImpl#类装载时 static &#123; registerService(WINDOW_SERVICE 等各种service); &#125;</span><br><span class="line">  -&gt; ActivityThread#createBaseContextForActivity(r, activity) &#123;</span><br><span class="line">       ContextImpl appContext = new ContextImpl();</span><br><span class="line">       appContext.init(r.packageInfo, r.token, this);</span><br><span class="line">       appContext.setOuterContext(activity;);</span><br><span class="line">       baseContext=appContext;</span><br><span class="line">       if(没有&quot;debug.second-display.pkg&quot;属性) return baseContext;</span><br><span class="line">     &#125;</span><br><span class="line">  -&gt; Activity#attach() -&gt; Activity#attach(context==ContextImpl appContext, ...) &#123;</span><br><span class="line">       attachBaseContext(context); // mBase==appContext</span><br><span class="line">       mFragments.attachActivity(this, mContainer, null);</span><br><span class="line">       (Window mWindow) = PolicyManager.makeNewWindow(this); // 得到 Window 子类 PhoneWindow</span><br><span class="line">       mWindow.setCallback(this);</span><br><span class="line">       mUiThread = Thread.currentThread();</span><br><span class="line">       mMainThread = 参数 ActivityThread aThread;</span><br><span class="line">       mWindow.setWindowManager(getSystemService(WINDOW_SERVICE));</span><br><span class="line">       mWindowManager = mWindow.getWindowManager(); // 取到WindowManagerImpl</span><br><span class="line">     &#125;</span><br><span class="line">    -&gt; PolicyManager#makeNewWindow() &#123; (com.android.internal.policy.impl.Policy sPolicy).makeNewWindow(); &#125;</span><br><span class="line">      -&gt; Policy#makeNewWindow() &#123;</span><br><span class="line">           return new PhoneWindow(context); &#125; // extends Window. mWindowAttributes = new WindowManager.LayoutParams();</span><br><span class="line">    -&gt; (Window PhoneWindow父类)#setWindowManager(wm, appToken, appName, hardwareAccelerated) &#123;</span><br><span class="line">    wm!=null:</span><br><span class="line">      mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);</span><br><span class="line">      // PhoneWindow 作为本进程所有Window的parent &#125;</span><br><span class="line">      -&gt; WindowManagerImpl#createLocalWindowManager(parentWindow) &#123; return new WindowManagerImpl(mDisplay, parentWindow); &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">ActivityThread#handleResumeActivity(r.token, clearHide==false, r.isForward==false,</span><br><span class="line">  reallyResume = (!r.activity.mFinished &amp;&amp; !r.startsNotResumed) == true) &#123;</span><br><span class="line">  ActivityClientRecord r = performResumeActivity(token, clearHide==false);</span><br><span class="line">  Activity a = r.activity;</span><br><span class="line">  r.window==null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible:</span><br><span class="line">    r.window = r.activity.getWindow(); // 就是 PhoneWindow</span><br><span class="line">    decor = r.window.getDecorView();</span><br><span class="line">    decor.setVisibility(INVISIBLE);</span><br><span class="line">    a.mDecor = decor;</span><br><span class="line">    if(a.mVisibleFromClient==初始化为true):</span><br><span class="line">      a.mWindowAdded=true;</span><br><span class="line">      WindowManager.LayoutParams l = r.window.getAttributes();</span><br><span class="line">      l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</span><br><span class="line">      l.softInputMode |= (forwardBit==0);</span><br><span class="line">      (WindowManagerImpl wm).addView(decor, l);</span><br><span class="line">    if(!r.activity.mFinished &amp;&amp; willBeVisible &amp;&amp; r.activity.mDecor!=null &amp;&amp; !r.hideForNow):</span><br><span class="line">      r.activity.mVisibleFromServer = true;</span><br><span class="line">      if(r.activity.mVisibleFromClient) r.activity.makeVisible();</span><br><span class="line">    if(!r.onlyLocalRequest) Looper.myQueue().addIdleHandler(new Idler());</span><br><span class="line">    if(reallyResume) ActivityManagerNative.getDefault().activityResumed(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  -&gt; performResumeActivity() &#123; if!(r.activity.mFinished) r.activity.performResume(); &#125;</span><br><span class="line">    -&gt; Activity#performResume() &#123;</span><br><span class="line">    performRestart(); // mStopped==false: pass</span><br><span class="line">    mInstrumentation.callActivityOnResume(this); // activity.mResumed=true; activity.onResume()</span><br><span class="line">    mFragments.dispatchResume();</span><br><span class="line">    onPostResume(); &#125;</span><br><span class="line"></span><br><span class="line">  -&gt; PhoneWindow#getDecorView() &#123; if(mDecor==null) installDecor(); return mDecor; &#125;</span><br><span class="line">    -&gt; installDecor() &#123; if(mDecor==null) mDecor=generateDecor(); &#125;</span><br><span class="line">      -&gt; generateDecor() &#123; return new DecorView(getContext(), featureId==-1); &#125;</span><br><span class="line">         // PhoneWindow.DecorView extends FrameLayout implements RootViewSurfaceTaker</span><br><span class="line"></span><br><span class="line">  -&gt; WindowManagerImpl#addView()</span><br><span class="line">  -&gt; (单实例WindowManagerGlobal mglobal)#addView(view==DecorView decor, params, display, parentWindow==PhoneWindow) &#123;</span><br><span class="line">       root = new ViewRootImpl(view.getContext(), display);</span><br><span class="line">       view 加到 mViews[], root 加到 mRoots[].</span><br><span class="line">       (ViewRootImpl root).setView(view, wparams==params, panelParentView 非SUB_WINDOW类==NULL);</span><br><span class="line">     &#125;</span><br><span class="line">    -&gt; ViewRootImpl#ctor() &#123;</span><br><span class="line">    mSurface = new Surface(); // 空surface, 以后通过 readFromParcel() 填充</span><br><span class="line">    mWindowSession = WindowManagerGlobal.getWindowSession();</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">      mWindow = new W(this); // W extends IWindow.Stub</span><br><span class="line">      mAttachInfo = new View.AttachInfo(mWindowSession, mWindow, display, this, mHandler, this);</span><br><span class="line">    mChoreographer = Chogreographer.getInstance();</span><br><span class="line">    loadSystemProperties(); &#125;</span><br><span class="line">      -&gt; WindowManagerGlobal#getWindowSession() &#123;</span><br><span class="line">         if(sWindowSession==null):</span><br><span class="line">           windowManager = getWindowManagerService() &#123;</span><br><span class="line">           sWindowManagerService = BinderProxy端 ServiceManager.getService(&quot;window&quot;); &#125;</span><br><span class="line">           sWindowSession = windowManager.openSession(</span><br><span class="line">           (单实例InuptMethodManager imm).getClient(), imm.getInputContext() );</span><br><span class="line">           // BinderProxy端 IWindowSession, systemServer进程的WMS线程增加一个 Session.</span><br><span class="line">           return sWindowSession;</span><br><span class="line">         &#125;</span><br><span class="line">         --systemServer进程的WMS所在线程--&gt; WMS#openSession() &#123; new Session(service==WMS, ...); &#125;</span><br><span class="line">           -&gt; Session#ctor() &#123; mService.mInputMethodManager.addClient(</span><br><span class="line">           InputMethodClient client, inputContext, mUid==应用的Uid, mPid==应用的Pid); &#125;</span><br><span class="line">    -&gt; ViewRootImpl#setView(view==DecorView decor, attrs=wparams, panelParentView==NULL) &#123;</span><br><span class="line">         mView == null:</span><br><span class="line">           mView = decor;</span><br><span class="line">           view instanceof RootViewSurfaceTaker:</span><br><span class="line">             mSurfaceHolderCallback = ((RootViewSurfaceTaker)view).willYouTakeTheSurface(); // == null</span><br><span class="line">           mSurfaceHolder == null: enableHardwareAcceleration(decor.getContext(), attrs);</span><br><span class="line">           mAdded = true;</span><br><span class="line">           requestLayout();</span><br><span class="line">           mWindowAttributes.inputFeatures==0: mInputChannel = new InputChannel();</span><br><span class="line">           (Session mWindowSession).addToDisplay(mWindow, mSeq==0, mWindowAttributes==attrs,</span><br><span class="line">             getHostVisibility(), mDisplay.getDisplayId(), mAttachInfo.mContentInsets, mInputChannel);</span><br><span class="line">       &#125;</span><br><span class="line">      -&gt; (PhoneWindow.DecorView implements RootViewSurfaceTaker)#willYouTakeTheSurface() &#123;</span><br><span class="line">           mFeatureId==-1 &lt; 0: return PhoneWindow.mTakeSurfaceCallback;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      -&gt; ViewRootImpl#enableHardwareAcceleration() &#123;</span><br><span class="line">          // HardwareRenderer.isAvailable() == true</span><br><span class="line">          mAttachInfo.mHardwareRenderer = HardwareRenderer.createGlRenderer(2, translucent);</span><br><span class="line">          mAttachInfo.mHardwareAccelerated = mAttachInfo.mHardwareAccelerationRequested = true;</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; HardwareRenderer#createGlRenderer()</span><br><span class="line">        -&gt; Gl20Renderer#create(translucent) &#123; if(GLES20Canvas.isAvailable(): new Gl20Renderer(translucent); &#125;</span><br><span class="line"></span><br><span class="line">      -&gt; Session#addToDisplay()</span><br><span class="line">        --Binder通信--&gt; WindowManagerService#addWindow(session, client==W, seq==0, attrs,</span><br><span class="line">            viewVisibility, displayId, outContentInsets, outInputChannel) &#123;</span><br><span class="line">            type == TYPE_BASE_APPLICATION;</span><br><span class="line">            (WindowToken token) 在 ActivityStack#startActivityLocked() -&gt; WMS#addAppToken() 中设置, 不为空.</span><br><span class="line">            (AppWindowToken atoken) 同上, 不为空.</span><br><span class="line">            win = new WindowState(this, session, client, token, attachedWindow, appOp[0],</span><br><span class="line">              seq, attrs, viewVisibility, displayContent);</span><br><span class="line">            (WindowManagerPolicy mPolicy 就是 PhoneWindowManager).adjustWindowParamsLw(win.mAttrs);</span><br><span class="line">            mPolicy.prepareAddWindowLw(win, attrs);</span><br><span class="line">            outInputChannel != null:</span><br><span class="line">              InputChannel.openInputChannelPair(name);</span><br><span class="line">              win.setInputChannel(inputChannels[0]);</span><br><span class="line">              inputChannels[1].transferTo(outInputChannel);</span><br><span class="line">              mInputManager.registerInputChannel(win.mInputChannel, win.minputWindowHandle);</span><br><span class="line">            win.attach();</span><br><span class="line">            mWindowMap.put(client.asBinder(), win);</span><br><span class="line">            type == TYPE_BASE_APPLICATION:</span><br><span class="line">              addWindowToListInOrderLocked(win, true);</span><br><span class="line">            win.mWinAnimator.mEnterAnimationPending = true;</span><br><span class="line">            if(displayContent.isDefaultDisplay) mPolicy.getContentInsetHintLw(attrs, outContentInsets);</span><br><span class="line">            mInputMonitor.setUpdateInputWindowsNeededLw();</span><br><span class="line">            if(win.canReceiveKeys()) focusChanged = updateFocusedWindowLocked();</span><br><span class="line">            assignLayersLocked(displayContent.getWindowList());</span><br><span class="line">          &#125;</span><br><span class="line">            -&gt; WindowState#ctor(service, Session s, IWindow c, WindowToken token, WindowState attachedWindow, int appOp, int seq, WindowManager.LayoutParams a, int viewVisibility, final DisplayContent displayContent) &#123;</span><br><span class="line">              mSession = s;</span><br><span class="line">              mWindowId = new IWindowId.Stub() &#123;&#125;</span><br><span class="line">              (IWindow c).asBinder().linkToDeath(new DeathRecipient(), 0);</span><br><span class="line">              type == TYPE_BASE_APPLICATION:</span><br><span class="line">                mBaseLayer = mPolicy.windowTypeToLayerLw(a.type) * ... + ...;</span><br><span class="line">                mSubLayer = 0;</span><br><span class="line">              mWinAnimator = new WindowStateAnimator(this);</span><br><span class="line">              mWinAnimator.mAlpha = a.alpha;</span><br><span class="line">            &#125;</span><br><span class="line">            -&gt; WindowState#attach() &#123; mSession.windowAddedLocked(); &#125;</span><br><span class="line">              -&gt; Session#windowAddedLocked() &#123;</span><br><span class="line">                mSurfaceSession = new SurfaceSession();</span><br><span class="line">                (WMS mService).mSessions.add(this);</span><br><span class="line">                mNumWindow++;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">  -&gt; Activity#makeVisible() &#123;</span><br><span class="line">    mWindowAdded == true: pass</span><br><span class="line">    mDecor.setVisibility(View.VISIBLE);</span><br><span class="line">  &#125;</span><br><span class="line">    -&gt; PhoneWindow.DecorView#setVisibility(View.VISIBLE) -&gt; (父类View#)setVisibility(View.VISIBLE)</span><br><span class="line">    -&gt; (父类View#)setFlags(flags==View.VISIBLE, mask==VISIBILITY_MASK) &#123;</span><br><span class="line">        (changed &amp; VISIBILITY_MASK) != 0:</span><br><span class="line">          mPrivateFlags |= PFLAG_DRAWN;</span><br><span class="line">          invalidate(true);</span><br><span class="line">          needGlobalAttributesUpdate(true);</span><br><span class="line">      &#125;</span><br><span class="line">    -&gt; (父类View#)invalidate(true) &#123;</span><br><span class="line">      HardwareRenderer.RENDER_DIRTY_REGIONS == true:</span><br><span class="line">        (p==mParent 这里是 ViewRootImpl).invalidateChild(this, r);</span><br><span class="line">    &#125;</span><br><span class="line">      -&gt; ViewRootImpl#invalidateChild(child==PhoneWindow.DecorView, dirty==r)</span><br><span class="line">      -&gt; ViewRootImpl#invalidateChildInParent(null, dirty==r) &#123; mWillDrawSoon 初始化为false: scheduleTraversals(); &#125;</span><br><span class="line">      -&gt; ViewRootImpl#scheduleTraversals() &#123;</span><br><span class="line">        mTraversalScheduled = true;</span><br><span class="line">        mChoreographer.postCallback(Choreographer.CALLBACK_TRAVERSAL,</span><br><span class="line">          mTraversalRunnable, null);// ViewRootImpl#doTraversal()</span><br><span class="line">        scheduleConsumeBatchedInput();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line">ViewRootImpl#mChoreographer 是 ThreadLocal 的, 依附在 ViewRootImpl 所在的 Looper 上.</span><br><span class="line">USE_VSYNC 时用</span><br><span class="line">(FrameDisplayEventReceiver mDisplayEventReceiver).scheduleVsync() --VSYNC--&gt; onVsync()</span><br><span class="line">  --Choreographer#mHandler--&gt; doFrame() -&gt; 从 CALLBACK_INPUT, CALLBACK_ANIMATION, CALLBACK_TRAVERSAL 队列取回调执行.</span><br><span class="line"></span><br><span class="line">ViewRootImpl#doTraversal()</span><br><span class="line">  -&gt; ViewRootImpl#performTraversals() &#123;</span><br><span class="line">    mIsInTraversal = true;</span><br><span class="line">    mWillDrawSoon = true;</span><br><span class="line">    mFirst == ture:</span><br><span class="line">      mFullRedrawNeeded = true;</span><br><span class="line">      mLayoutRequested = true;</span><br><span class="line">      attachInfo.mSurface = mSurface;</span><br><span class="line">      (host==mView DecorView).dispatchAttachedToWindow(attachInfo, 0);</span><br><span class="line">      ...</span><br><span class="line">      host.fitSystemWindows();</span><br><span class="line">    mLayoutRequest == true &amp;&amp; !mStopped:</span><br><span class="line">      ensureTouchModeLocally();</span><br><span class="line">      measureHierarchy(host, lp, res, disiredWindowWidth, desiredWindowHeight);</span><br><span class="line">    hadSurface = mSurface.isValid(); // == false, 下面relayoutWindow填充</span><br><span class="line">    mFirst == true:</span><br><span class="line">      relayoutWindow(params, viewVisibility, insetsPending);</span><br><span class="line">    !mStopped:</span><br><span class="line">      performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">    didLayout:</span><br><span class="line">      performLayout(lp, desiredWindowWidth, desiredWindowHeight);</span><br><span class="line">    mFirst == true:</span><br><span class="line">      mView.requestFocus(View.FOCUS_FORWARD);</span><br><span class="line">    !hadSurface &amp;&amp; mSurface.isValid(): &#123; newSurface = true; mFullRedrawNeeded = true; &#125;</span><br><span class="line">    // If we are creating a new surface, then we need to</span><br><span class="line">    // completely redraw it.  Also, when we get to the</span><br><span class="line">    // point of drawing it we will hold off and schedule</span><br><span class="line">    // a new traversal instead.</span><br><span class="line">    mWillDrawSoon = false;</span><br><span class="line">    ...</span><br><span class="line">    scheduleTraversals(); // 第二遍时会调 performDraw()</span><br><span class="line">    mIsInTraversal = false;</span><br><span class="line">  &#125;</span><br><span class="line">    -&gt; (DecorView 父类 ViewGroup)#dispatchAttachedToWindow(attachInfo, visibility==0) &#123;</span><br><span class="line">      for child: child.dispatchAttachedToWindow(info, ...); // (View child).mAttachInfo = info</span><br><span class="line">      // 动态添加的view也可以在 addView() -&gt; addViewInner() 时设置 mAttachInfo</span><br><span class="line">    &#125;</span><br><span class="line">    -&gt; (DecorView 父类 ViewGroup)#fitSystemWindows() &#123;</span><br><span class="line">      done = (super==View).fitSystemWindows(); // View#computeFitSystemWindows()</span><br><span class="line">      if(!done):</span><br><span class="line">        for child:</span><br><span class="line">          done = child.fitSystemWindows();</span><br><span class="line">    &#125;</span><br><span class="line">      -&gt; (DecorView 父类 View)#fitSystemWindows() -&gt; DecorView#internalSetPadding()</span><br><span class="line">        -&gt; View#internalSetPadding() &#123; if(changed): requestLayout(); &#125;</span><br><span class="line">    -&gt; ViewRootImpl#measureHierarchy() -&gt; ViewRootImpl#performMeasure() &#123; (DecorView mView).measure(); &#125;</span><br><span class="line">      -&gt; (DecorView 父类View)#measure() -&gt; DecorView#onMeasure() -&gt; MeasureSpec#makeMeasureSpec()</span><br><span class="line">      -&gt; (父类FrameLayout)#onMeasure() &#123;</span><br><span class="line">        for(getChildCount()) measureChildWithMargins(child, ...);</span><br><span class="line">        setMeasuredDimension(resolveSizeAndState(), ...);</span><br><span class="line">      &#125;</span><br><span class="line">      -&gt; (父类View)#measureChildWIthMargins() &#123; child.measure(); &#125;</span><br><span class="line">      --如果有child--&gt; (View或其子类)#measure() -&gt; (View或其子类)#onMeasure() -&gt; (View或其子类)#setMeasuredDimension()</span><br><span class="line"></span><br><span class="line">    -&gt; ViewRootImpl#relayoutWindow() &#123; (IWindowSession mWindowSession).relayout(); &#125;</span><br><span class="line">    --Binder通信--&gt; Session#relayout()</span><br><span class="line">    -&gt; WindowManagerService#relayoutWindow() &#123;</span><br><span class="line">      (WindowStateAnimator winAnimator).applyEnterAnimationLocked();</span><br><span class="line">      outSurface.copyFrom(winAnimator.createSurfaceLocked());</span><br><span class="line">      ...</span><br><span class="line">      performLayoutAndPlaceSurfacesLocked();</span><br><span class="line">    &#125;</span><br><span class="line">      -&gt; WindowStateAnimator#createSurfaceLocked() &#123;</span><br><span class="line">        (WMS mService).makeWindowFreezingScreenIfNeededLocked(mWin);</span><br><span class="line">        mSurfaceControl = new SurfaceControl(mSession.mSurfaceSession, attrs.getTitle(), w, h, format, flags);</span><br><span class="line">        SurfaceControl.openTransaction();</span><br><span class="line">        mSurfaceControl.setPosition(mSurfaceX, mSurfaceY);</span><br><span class="line">        mSurfaceLayer = mAnimLayer;</span><br><span class="line">        mSurfaceControl.setLayerStack(mLayerStack);</span><br><span class="line">        mSurfaceControl.setLayer(mAnimLayer);</span><br><span class="line">        mSurfaceControl.setAlpha(0);</span><br><span class="line">      &#125;</span><br><span class="line">      -&gt; WMS#performLayoutAndPlaceSurfacesLocked() &#123;</span><br><span class="line">          loopCount = 6;</span><br><span class="line">          do &#123;</span><br><span class="line">            mTraversalScheduled = false;</span><br><span class="line">            performLayoutAndPlaceSurfacesLockedLoop();</span><br><span class="line">            ...</span><br><span class="line">            loopCount--;</span><br><span class="line">            &#125; while(mTraversalScheduled &amp;&amp; loopCount &gt; 0);</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; WMS#performLayoutAndPlaceSurfacesLockedLoop() -&gt; WMS#performLayoutAndPlaceSurfacesLockedInner() &#123;</span><br><span class="line">            ...</span><br><span class="line">            performLayoutLockedInner(displayContent, repeats == 1, false);</span><br><span class="line">            ...</span><br><span class="line">            scheduleAnimationLocked();</span><br><span class="line">          &#125;</span><br><span class="line">          -&gt; WMS#performLayoutLockedInner() &#123;</span><br><span class="line">              (mPolicy 就是 PhoneWindowManager).beginLayoutLw(isDefaultDisplay, dw, dh, mRotation);</span><br><span class="line">              // 计算 mNavigationBar.computeFrameLw() 和 mStatusBar.computeFrameLw()</span><br><span class="line">              for WindowState win:</span><br><span class="line">                !gone &amp;&amp; !win.mLayoutAttached:</span><br><span class="line">                  win.preLayout();</span><br><span class="line">                  mPolicy.layoutWindowLw(win, win.mAttrs, null);</span><br><span class="line">            &#125;</span><br><span class="line">            -&gt; PhoneWindowManager#layoutWindowLw(WindowState win, win.mAttrs, attached==null) &#123;</span><br><span class="line">                win.computeFrameLw(pf, df, of, cf, vf);</span><br><span class="line">                // 设置 mContainingFrame, mDisplayFrame, mParentFrame, mOverScanFrame,</span><br><span class="line">                // mContentFrame, mVisibleFrame, mFrame, mOverscanInsets, mContentInsets, mVisibleInsets, mCompatFrame 等</span><br><span class="line">              &#125;</span><br><span class="line">          -&gt; WMS#scheduleAnimationLocked() &#123;</span><br><span class="line">              mAnimationScheduled = true;</span><br><span class="line">              mChoreographer.postCallback(CALLBACK_ANIMATION, mAnimator.mAnimationRunnable, null;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    -&gt; ViewRootImpl#performDraw() &#123; draw(fullRedrawNeeded); 如果有mSurfaceHolder,调SurfaceHolder.Callback; &#125;</span><br><span class="line">    -&gt; ViewRootImpl#draw(fullRedrawNeeded) &#123;</span><br><span class="line">        sFirstDrawComplete 初始化为false: for() mHandler.post(sFirstDrawHandlers.get(i));</span><br><span class="line">        !dirty.isEmpty():</span><br><span class="line">          attachInfo.mHardwareRenderer.isEnabled() 初始化为false, attachInfo.mHardwareRenderer.isRequested() 初始化== true:</span><br><span class="line">            attachInfo.mHardwareRenderer.initializeIfNeeded();</span><br><span class="line">            mFullRedrawNeeded = true;</span><br><span class="line">            scheduleTraversals();</span><br><span class="line">            // 下一遍 performTraversals() -&gt; performDraw() -&gt; draw() 时 attachInfo.mHardwareRenderer.draw(),</span><br><span class="line">            // 就是 Gl20Renderer#draw()</span><br><span class="line">      &#125;</span><br><span class="line">      -&gt; (Gl20Renderer 父类HardwareRenderer)#initializeIfNeeded(width, height, surface) &#123;</span><br><span class="line">          isRequested() == true, !isEnabled() == true:</span><br><span class="line">            initialize(surface);</span><br><span class="line">            setup(width, height);</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; (Gl20Renderer 父类GlRenderer)#initialize(surface) &#123;</span><br><span class="line">            initializeEgl(); // sEgl = com.google.android.gles_jni.EGLImpl()</span><br><span class="line">            mGl = createEglSurface(surface);</span><br><span class="line">            mCanvas = createCanvas(); // GLES20Canvas</span><br><span class="line">            setEnabled(true);</span><br><span class="line">          &#125;</span><br><span class="line">          -&gt; Gl20Renderer#createCanvas() &#123; mGlCanvas = new GLES20Canvas(mTranslucent); &#125;</span><br><span class="line">          -&gt; GLES20Canvas#ctor(record==false, translucent) &#123;</span><br><span class="line">              mRenderer = nCreateRenderer(); // C++: new OpenGLRenderer()</span><br><span class="line">              setupFinalizer(); // new CanvasFinalizer(mRenderer)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">      -&gt; (Gl20Renderer 父类GlRenderer)#draw(view, attachInfo, callbacks, dirty) &#123;</span><br><span class="line">          dirty = beginFrame(canvas, dirty, surfaceState); // canvas == mCanvas</span><br><span class="line">          DisplayList displayList = buildDisplayList(view, mCanvas);</span><br><span class="line">          status = prepareFrame(dirty);</span><br><span class="line">          saveCount = canvas.save();</span><br><span class="line">          callbacks.onHardwarePreDraw(canvas);</span><br><span class="line">          displayList != null:</span><br><span class="line">            status |= drawDisplayList(attachInfo, canvas, displayList, status);</span><br><span class="line">          callbacks.onHardwarePostDraw(canvas);</span><br><span class="line">          canvas.restoreToCount(saveCount);</span><br><span class="line">          onPostDraw();</span><br><span class="line">          swapBuffers(status);</span><br><span class="line">          attachInfo.mIgnoreDirtyState = false;</span><br><span class="line">        &#125;</span><br><span class="line">        -&gt; (Gl20Renderer 父类HardwareRenderer)#beginFrame() -&gt; nBeginFrame()</span><br><span class="line">          --JNI--&gt; android_view_HardwareRenderer_beginFrame() &#123;</span><br><span class="line">              EGLDisplay display = eglGetCurrentDisplay();</span><br><span class="line">              EGLSurface surface = eglGetCurrentSurface(EGL_DRAW);</span><br><span class="line">              eglBeginFrame(display, surface);</span><br><span class="line">            &#125;</span><br><span class="line">        -&gt; (Gl20Renderer 父类Glrenderer)#buildDisplayList(view, canvas) &#123; view.getDisplayList(); &#125;</span><br><span class="line">          -&gt; View#getDisplayList() -&gt; View#getDisplayList(mDisplayList, isLayer==false) &#123;</span><br><span class="line">              if displayList!=null: // 非第一次</span><br><span class="line">                dispatchGetDisplayList();</span><br><span class="line">                // DecorView 父类 ViewGroup#dispatchGetDisplayList &#123; for child: child.getDisplayList(); &#125;</span><br><span class="line">              else: // 第一次</span><br><span class="line">                !isLayer: mRecreateDisplayList = true;</span><br><span class="line">                displayList = (Gl20Renderer mAttachInfo.mHardwareRenderer).createDisplayList(name); // new GLES20DisplayList</span><br><span class="line">                invalidateParentCaches(); // mParent.mPrivateFlags |= PFLAG_INVALIDATED</span><br><span class="line">              HardwareCanvas canvas = displayList.start(width, height); // GLES20RecordingCanvas</span><br><span class="line">              layerType 初始化为 LAYER_TYPE_NONE:</span><br><span class="line">                computeScroll();</span><br><span class="line">                canvas.translate(-mScrollX, -mScrollY);</span><br><span class="line">                (View#)draw(canvas);</span><br><span class="line">              displayList.end();</span><br><span class="line">              displayList.setCaching(caching);</span><br><span class="line">              setDisplayListProperties(displayList);</span><br><span class="line">            &#125;</span><br><span class="line">            -&gt; GLES20DisplayList#start(width, height) &#123;</span><br><span class="line">                mCanvas = GLES20RecordingCanvas.obtain(this); // GLES20RecordingCanvas</span><br><span class="line">                mCanvas.start(); // &#123; mDisplayList.mBitmaps.clear(); mDisplayList.mChildDisplayLists.clear(); 都是ArrayList&#125;</span><br><span class="line">                mCanvas.setViewport(width, height);</span><br><span class="line">                mCanvas.onPreDraw(null); // --JNI--&gt; nPrepare() --C++--&gt; (OpenGlRenderer renderer)-&gt;prepareDirty()</span><br><span class="line">              &#125;</span><br><span class="line">              -&gt; GLES20RecordingCanvas#obtain(DisplayList) &#123;</span><br><span class="line">                  new GLES20RecordingCanvas();</span><br><span class="line">                  // 父类 GLES20Canvas(true, true) &#123; nCreateDisplayListRenderer(); // C++:new DisplayListRenderer &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            -&gt; (DecorView 父类View)#draw(canvas) &#123; // DecorView#draw() -&gt; FrameLayout#draw() -&gt; ViewGroup#draw()</span><br><span class="line">                // light version</span><br><span class="line">                onDraw(canvas);</span><br><span class="line">                dispatchDraw(canvas);</span><br><span class="line">                onDrawScrollBars(canvas);</span><br><span class="line">                // full version</span><br><span class="line">                canvas.saveLayer();</span><br><span class="line">                onDraw(canvas);</span><br><span class="line">                dispatchDraw(canvas);</span><br><span class="line">                canvas.drawRect();</span><br><span class="line">                onDrawScrollBars(canvas);</span><br><span class="line">              &#125;</span><br><span class="line">              -&gt; ViewGroup#dispatchDraw() &#123;</span><br><span class="line">                  for child: drawChild(canvas, child, drawingTime) -&gt; (View child).draw(canvas, this, drawingTime)</span><br><span class="line">                &#125;</span><br><span class="line">                -&gt; View#draw(canvas, parent==ViewGroup, drawingTime) &#123;</span><br><span class="line">                    useDisplayListProperties == true;</span><br><span class="line">                    hardwareAccelerated == true: // GLES20Canvas 父类HardwareCanvas 直接返回</span><br><span class="line">                      caching = true;</span><br><span class="line">                    layerType == LAYER_TYPE_NONE: 初始化值</span><br><span class="line">                      hasDisplayList = canHaveDisplayList(); // true</span><br><span class="line">                    useDisplayListProperties &amp;= hasDisplayList; // true</span><br><span class="line">                    useDisplayListProperties == true:</span><br><span class="line">                      displayList = getDisplayList(); // !!递归调自己</span><br><span class="line">                    hasNoCache == true:</span><br><span class="line">                      (HardwareCanvas 子类 GLES20RecordingCanvas canvas).drawDisplayList(displayList, null, flags);</span><br><span class="line">                  &#125;</span><br><span class="line">              -&gt; GLES20RecordingCanvas#drawRect() &#123;</span><br><span class="line">                super.drawRect(); </span><br><span class="line">                // (父类 GLES20Canvas)#drawRect() -&gt; nDrawRect() --JNI--&gt; (OpenGLRenderer renderer).drawRect()</span><br><span class="line">                recordShaderBitmap(paint); // mDisplayList.mBitmaps.add()</span><br><span class="line"></span><br><span class="line">            -&gt; GLES20DisplayList#end() &#123;</span><br><span class="line">                (GLES20RecordingCanvas mCanvas).onPostDraw();</span><br><span class="line">                mFinalizer == null:</span><br><span class="line">                  mFinalizer = new DisplayListFinalizer(mCanvas.end(0));</span><br><span class="line">                mCanvas.recycle();</span><br><span class="line">                mCanvas = null;</span><br><span class="line">                mValid = true;</span><br><span class="line">              &#125;</span><br><span class="line">              -&gt; GLES20RecordingCanvas#end(0) -&gt; (父类 GLES20Canvas)#getDisplayList(0)</span><br><span class="line">                --JNI--&gt; (DisplayListRenderer renderer).getDisplayList(DisplayList displayList==NULL) &#123;</span><br><span class="line">                  C++: return new DisplayList(*this); &#125;</span><br><span class="line">              -&gt; GLES20RecordingCanvas#recycle() &#123;</span><br><span class="line">                  mDisplayList = null;</span><br><span class="line">                  resetDisplayListRenderer(); // (父类 GLES20Canvas)#resetDisplayListRenderer() -&gt; nResetDisplayListRenderer</span><br><span class="line">                  sPool.release(this); // 放入缓存池, 方便下次重用</span><br><span class="line">                &#125;</span><br><span class="line">        -&gt; (Gl20Renderer 父类GlRenderer)#prepareFrame(dirty) -&gt; Gl20Renderer#onPreDraw(dirty)</span><br><span class="line">          -&gt; (GLES20Canvas mGlCanvas)#onPreDraw(dirty) --JNI--&gt; nPrepareDirty()</span><br><span class="line">            -&gt; (OpenGLRenderer renderer).prepareDirty() &#123;</span><br><span class="line">                setupFrameState();</span><br><span class="line">                if(mSnapshot-&gt;fbo == 0)</span><br><span class="line">                  syncState();</span><br><span class="line">                  updateLayers();</span><br><span class="line">                else</span><br><span class="line">                  startFrame();</span><br><span class="line">              &#125;</span><br><span class="line">              -&gt; OpenGlRenderer::setupFrameState() &#123;</span><br><span class="line">                  mCaches.clearGarbage();</span><br><span class="line">                  mSnapshot = new Snapshot();</span><br><span class="line">                  mSnapshot-&gt;fbo = getTargetFbo();</span><br><span class="line">                &#125;</span><br><span class="line">        -&gt; GLES20Canvas#drawDisplayList() --JNI--&gt; nDrawDisplayList()</span><br><span class="line">          --C++--&gt; (OpenGLRenderer renderer)::drawDisplayList() &#123;</span><br><span class="line">              if(CC_UNLIKELY(mCaches.drawDeferDisabled)):</span><br><span class="line">                status = startFrame();</span><br><span class="line">                displayList.replay(replayStruct, 0);</span><br><span class="line">                return status | replayStruct.mDrawGlStatus;</span><br><span class="line">              displayList.defer(deferStruct, 0);</span><br><span class="line">              flushLayers();</span><br><span class="line">              status = startFrame();</span><br><span class="line">              return status | deferredList.flush(*this, dirty);</span><br><span class="line">            &#125;</span><br><span class="line">        -&gt; (Gl20Renderer 父类Glrenderer)#swapBuffers(status) &#123;</span><br><span class="line">            if(status &amp; DisplayList.STATUS_DREW)</span><br><span class="line">              (EGL10 sEgl).eglSwapBuffers(sEglDisplay, mEglSurface);</span><br><span class="line">              checkEglErrors();</span><br><span class="line">          &#125;</span><br><span class="line">          -&gt; (EGL10 sEgl)#eglSwapBuffers() --JNI--&gt; jni_eglSwapBuffers() --C++--&gt; eglSwapBuffers(dpy, sur)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;版本-android-4-3-r2-2&quot;&gt;&lt;a href=&quot;#版本-android-4-3-r2-2&quot; class=&quot;headerlink&quot; title=&quot;版本 android-4.3_r2.2&quot;&gt;&lt;/a&gt;版本 android-4.3_r2.2&lt;/h1&gt;&lt;h1 id=&quot;涉及到的文件&quot;&gt;&lt;a href=&quot;#涉及到的文件&quot; class=&quot;headerlink&quot; title=&quot;涉及到的文件&quot;&gt;&lt;/a&gt;涉及到的文件&lt;/h1&gt;&lt;h1 id=&quot;SystemServer进程&quot;&gt;&lt;a href=&quot;#SystemServer进程&quot; class=&quot;headerlink&quot; title=&quot;SystemServer进程&quot;&gt;&lt;/a&gt;SystemServer进程&lt;/h1&gt;&lt;h1 id=&quot;应用进程&quot;&gt;&lt;a href=&quot;#应用进程&quot; class=&quot;headerlink&quot; title=&quot;应用进程&quot;&gt;&lt;/a&gt;应用进程&lt;/h1&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 输入系统 源码分析</title>
    <link href="http://yoursite.com/android/input-system/"/>
    <id>http://yoursite.com/android/input-system/</id>
    <published>2013-11-04T08:45:00.000Z</published>
    <updated>2019-05-02T15:35:16.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-android-4-3-r2-2"><a href="#版本-android-4-3-r2-2" class="headerlink" title="版本 android-4.3_r2.2"></a>版本 android-4.3_r2.2</h1><h1 id="涉及到的文件"><a href="#涉及到的文件" class="headerlink" title="涉及到的文件"></a>涉及到的文件</h1><ul><li>frameworks/base/services/input/InputDispatcher.cpp<ul><li>InputDispatcher</li><li>InputDispatcherThread</li></ul></li><li>frameworks/base/services/input/InputReader.cpp<ul><li>InputReader</li><li>InputReaderThread</li></ul></li><li>frameworks/base/services/input/EventHub.cpp</li><li>frameworks/base/services/java/com/android/server/input/InputManagerService.java</li><li>frameworks/base/services/jni/com_android_server_input_InputManagerService.cpp</li><li>frameworks/base/core/jni/android_view_InputChannel.cpp<ul><li>NativeInputChannel</li></ul></li><li>frameworks/base/services/input/InputManager.cpp</li><li>frameworks/native/libs/utils/Threads.cpp</li><li>/frameworks/base/include/androidfw/InputTransport.h .cpp<ul><li>InputPublisher</li><li>InputChannel</li></ul></li></ul><h1 id="初始化-SystemServer-java-ServerThread-run"><a href="#初始化-SystemServer-java-ServerThread-run" class="headerlink" title="初始化( SystemServer.java: ServerThread#run() )"></a>初始化( SystemServer.java: ServerThread#run() )</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NIM: NativeInputManager</span><br><span class="line">InputManagerService#ctor()</span><br><span class="line">--JNI--&gt; nativeInit()</span><br><span class="line">--C++--&gt; NativeInputManager::ctor()</span><br><span class="line">-&gt; InputManager::ctor(new eventHub(), NIM, NIM)</span><br><span class="line">    &#123;mDispatcher=InputDispatcher::ctor(NIM),</span><br><span class="line">     mReader=InputReader::ctor(eventHub==new eventHub in NIM, NIM, mDispatcher), InputReader::mQueuedListener=QueuedInputListener::ctor(mDispatcher)) &#125;</span><br><span class="line">-&gt; InputManager::initialize() &#123; InputReaderThread::ctor(mReader), InputDispatcherThread::ctor() &#125;</span><br><span class="line"></span><br><span class="line">InputManagerService#setWindowManagerCallbacks(wm.getInputMonitor())</span><br><span class="line">    &#123; mWindowManagerCallbacks == InputMonitor#ctor() &#125;</span><br></pre></td></tr></table></figure><h1 id="启动-SystemServer-java-ServerThread-run"><a href="#启动-SystemServer-java-ServerThread-run" class="headerlink" title="启动( SystemServer.java: ServerThread#run() )"></a>启动( SystemServer.java: ServerThread#run() )</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">InputManagerService#start()</span><br><span class="line">--JNI--&gt; nativeStart()</span><br><span class="line">--C++--&gt; InputManager::start() &#123; mDispatcherThread-&gt;run(), mReaderThread-&gt;run() &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcherThread::run() [重载 Thread::run]</span><br><span class="line">    &#123; androidCreateRawThreadEtc() -&gt; pthread_create()</span><br><span class="line">     --新线程--&gt; Thread::_threadLoop() --无限循环--&gt; InputDispatcherThread::threadLoop() -&gt; Dispatcher::dispatchOnce() &#125;</span><br><span class="line"></span><br><span class="line">InputReaderThread::run() [重载 Thread::run]</span><br><span class="line">    --新线程--&gt; ... --无限循环--&gt; InputReaderThread::threadLoop()</span><br><span class="line">    -&gt; mReader::loopOnce()</span><br><span class="line">      &#123; mEventHub::getEvents(timeout, eventBuffer), processEventsLocked(eventBuffer), 更新inputDevices列表, mQueuedListener::flush() &#125;</span><br><span class="line">    -&gt; EventHub::getEvents()</span><br><span class="line">        &#123; (mNeedToScanDevices 初始化为 true) scanDevicesLocked(),</span><br><span class="line">          无限循环: 处理 ReopenDevice/ScanDevice/pendingEvent, epoll_wait(device_fds) 获取 pendingEvent &#125;</span><br><span class="line"></span><br><span class="line">EventHub::scanDevicesLocked()</span><br><span class="line">-&gt; EventHub::scanDirLocked(&quot;/dev/input&quot;) &#123; foreach devFile: openDeviceLocked(devname) &#125;</span><br><span class="line">-&gt; EventHub::openDeviceLocked()</span><br><span class="line">    &#123; LoadConfigurationLocked(), epoll_ctl(CTL_ADD), addDeviceLocked() &#125;</span><br><span class="line">-&gt; EventHub::addDeviceLocked() &#123; 加到 mDevices &#125;</span><br></pre></td></tr></table></figure><h1 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">如果没有任何连接, InputDispatcher会扔掉接收到的按键.</span><br><span class="line">ViewRootImpl#setView()</span><br><span class="line">    &#123; mInputChannel=InputChannel#ctor,</span><br><span class="line">      mWindowSession.addToDisplay(..., mInputChannel),</span><br><span class="line">      mInputEventReceiver = WindowInputEventReceiver#ctor((mInputChannel==transfer过来的客户端channel), Looper.myLooper()) &#125;</span><br><span class="line"></span><br><span class="line">mWindowSession.addToDisplay()</span><br><span class="line">--Binder--&gt; Session#addToDisplay(..., outInputChannel==mInputChannel)</span><br><span class="line">-&gt; WindowManagerService#addWindow(..., outInputChannel)</span><br><span class="line">    &#123; inputChannels=InputChannel#openInputChannelPair(name),</span><br><span class="line">      (WindowState win).setInputChannel(inputChannels[0]),</span><br><span class="line">      inputChannels[1].transferTo(outInputChannel), 结果是 ViewRootImpl#mInputChannel 赋值为 socketpair() 客户端</span><br><span class="line">      (InputManagerService mInputManager).registerInputChannel(win.mInputChannel==inputChannels[0], ...), 结果是 InputDispatcher 中一个 Connection::inputChannel 赋值为 socketpair() 服务器端 &#125;</span><br><span class="line"></span><br><span class="line">WindowInputEventReceiver#ctor()</span><br><span class="line">-&gt; InputEventReceiver#ctor()</span><br><span class="line">--JNI--&gt; InputEventReceiver::nativeInit() &#123; receiver=NativeInputEventReceiver::ctor(), receiver-&gt;initialize() &#125;</span><br><span class="line">-&gt; receiver-&gt;initialize()</span><br><span class="line">-&gt; setFdEvents() &#123; mMessageQueue-&gt;getLooper()-&gt;addFd(mInputConsumer.getChannel()-&gt;getFd()) 客户端, ViewRootImpl Looper &#125;</span><br><span class="line"></span><br><span class="line">InputChannel#openInputChannelPair()</span><br><span class="line">--JNI--&gt; nativeOpenInputChannelPair()</span><br><span class="line">--C++--&gt; InputChannel::openInputChannelPair([0]==serverChannel, [1]==clientChannel)</span><br><span class="line">    &#123; fd[2]=socketpair(), serverChannel.mFd=fd[0], clientChannel.mFd=fd[1] &#125;</span><br><span class="line"></span><br><span class="line">InputChannel#transferTo()</span><br><span class="line">--JNI--&gt; nativeTransferTo() &#123; outInputChannel=inputChannels[1], inputChannels[1]==null &#125;</span><br><span class="line"></span><br><span class="line">InputManagerService#registerInputChannel(inputChannel)</span><br><span class="line">--JNI--&gt; nativeRegisterInputChannel(inputChannel)</span><br><span class="line">--C++--&gt; (NativeInputManager im)-&gt;registerInputChannel(env, inputChannel, ...)</span><br><span class="line">-&gt; InputManager::-&gt;getDispatcher()-&gt;registerInputChannel(inputChannel, ...)</span><br><span class="line">-&gt; InputDispatcher::registerInputChannel()</span><br><span class="line">    &#123; Connection::ctor(inputChannel, ...),</span><br><span class="line">      mLooper-&gt;addFd(inputChannel-&gt;getFd(), ...) &#125;</span><br><span class="line"></span><br><span class="line">Looper::addFd()</span><br><span class="line">    &#123; epoll_ctl(ADD/MOD), 加入到 mRequests 队列 &#125;</span><br><span class="line"></span><br><span class="line">接收event</span><br><span class="line">------------------------</span><br><span class="line">ViewRootImpl#requestLayout() / invalidate() / setLayoutParams() 等</span><br><span class="line">-&gt; ViewRootImpl#scheduleTraversals()</span><br><span class="line">-&gt; ViewRootImpl#scheduleConsumeBatchedInput()</span><br><span class="line">--Looper机制--&gt; (ConsumeBatchedinputRunnable mConsumedBatchedInputRunnable)#run()</span><br><span class="line">-&gt; ViewRootImpl#doConsumeBatchedInput()</span><br><span class="line">-&gt; (WindowInputEventReceiver mInputEventReceiver).consumeBatchedInputEvents()</span><br><span class="line">-&gt; InputEventReceiver#consumeBatchedInputEvents()</span><br><span class="line">--JNI--&gt; nativeConsumeBatchedInputEvents(receiver)</span><br><span class="line">--C++--&gt; (NativeInputEventReceiver receiver)::consumeEvents()</span><br><span class="line">    &#123; 无限循环: [</span><br><span class="line">        (InputConsumer mInputConsumer==WRAPS(inputChannel == InputEventReceiver 构造时传入)).consume(),</span><br><span class="line">        (JNI调java) InputEventReceiver#dispatchInputEvent()] &#125;</span><br><span class="line"></span><br><span class="line">InputEventReceiver#dispatchInputEvent()</span><br><span class="line"> --重载--&gt; WindowInputEventReceiver::onInputEvent(event)</span><br><span class="line"> -&gt; ViewRootImpl#enqueueInputEvent()</span><br><span class="line"></span><br><span class="line">InputConsumer::consume()</span><br><span class="line">-&gt; mChannel-&gt;receiveMessage(), 是 socketpair() 客户端</span><br><span class="line">    &#123; UNIX Socket ::recv(mFd) &#125;</span><br></pre></td></tr></table></figure><h1 id="InputReader处理"><a href="#InputReader处理" class="headerlink" title="InputReader处理"></a>InputReader处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">InputReaderThread::processEventsLocked(deviceId, rawEvents, count)</span><br><span class="line">-&gt; --::processEventsForDeviceLocked(deviceId, rawEvent, batchSize) [或 add/remove)DeviceLocked / handleConfigurationChangedLocked]</span><br><span class="line">-&gt; mDevices中取 (InputDevice device)::process(rawEvents, count)</span><br><span class="line">    &#123; for rawEvents: 命令扔掉 or &#123; for mMappers: InputMapper::process(rawEvent) &#125; &#125;</span><br><span class="line">    mMappers 在 InputReader::createDeviceLocked() 中添加, 包括 (Switch/Vibrator/Keyboard/Cursor/MultiTouch/SingleTouch/Joystick)InputMapper</span><br><span class="line">-&gt; InputMapper子类::process(rawEvent), 以Keyboard为例 &#123; mReader-&gt;mQueuedListener::notifyKey(args) &#125;</span><br><span class="line">-&gt; QueuedInputListener::notifyKey(args) &#123; (Vector&lt;NotifyArgs*&gt; mArgsQueue).push(new NotifyKeyArgs(*args)) &#125;</span><br><span class="line"></span><br><span class="line">(QueuedInputListener mQueuedListener)::flush()</span><br><span class="line">-&gt; NotifyArgs::notify(mInnerListener==InputDispatcher)</span><br><span class="line">-&gt; InputDispatcher::notifyKey(NotifyKeyArgs) &#123; mPolicy-&gt;interceptKeyBeforeQueueing(), enqueueInboundEventLocked(newEntry) &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::enqueueInboundEventLocked(entry) &#123; mInboundQueue.enqueueAtTail(entry) &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InputReaderThread和InputDispatcherThread两线程对 inBoundQueue 的访问是通过 InputDispatcher::mLock 锁来保护的.</span><br></pre></td></tr></table></figure><h1 id="InputDispatcher处理"><a href="#InputDispatcher处理" class="headerlink" title="InputDispatcher处理"></a>InputDispatcher处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">InputDispatcher::dispatchOnce()</span><br><span class="line">    &#123; dispatchOnceInnerLocked() 最终目的 UNIX Socket send 给注册的 inputChannel,</span><br><span class="line">      mLooper-&gt;pollOnce() 最终目的 epoll_wait(inputChannelFd) 确认应用返回的已处理消息 &#125;</span><br><span class="line"></span><br><span class="line">dispatchOnceInnerLocked() [或 runCommandsLockedInterruptible()]</span><br><span class="line">------------------------</span><br><span class="line">    &#123; mInboundQueue.dequeueAtHead() , 以键盘 TYPE_KEY 为例 dispatchKeyLocked() &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::dispatchKeyLocked(currentTime, entry, dopReason, nextWakeupTime)</span><br><span class="line">    &#123; (policy==NIM) intercept key 转为 CommandEntry, 或 扔掉, 或</span><br><span class="line">      findFocusedWindowTargetsLocked(), dispatchEventLocked(currentTime, entry, inputTargets) &#125;</span><br><span class="line">-&gt; dispatchEventLocked() &#123; foreach (InputDispatcher::Connection connection): prepareDispatchCycleLocked() &#125;</span><br><span class="line">-&gt; prepareDispatchCycleLocked()</span><br><span class="line">-&gt; enqueueDispatchEntriesLocked() &#123; enqueueDispatchEntryLocked(), 若之前为空则 startDispatchCycleLocked() &#125;</span><br><span class="line">-&gt; enqueueDispatchEntryLocked() &#123; connection-&gt;outboundQueue.enqueueAtTail(dispatchEntry) &#125;</span><br><span class="line"></span><br><span class="line">(policy==NIM) intercept key</span><br><span class="line">-&gt; InputDispatcher::postCommandLocked()</span><br><span class="line">--重新以CommandEntry形式dispatch--&gt; InputDispatcher::runCommandsLockedInterruptible()</span><br><span class="line">    &#123; (commandEntry-&gt;command函数指针==doInterceptKeyBeforeDispatchingLockedInterruptible)(commandEntry) &#125;</span><br><span class="line">-&gt; (mPolicy==NIM)-&gt;interceptKeyBeforeDispatching()</span><br><span class="line">--JNI回调java--&gt; InputManagerService#interceptKeyBeforeDispatching()</span><br><span class="line">--JAVA--&gt; (mWindowManagerCallbacks==InputMonitor).interceptKeyBeforeDispatching()</span><br><span class="line">-&gt; (WindowManagerService mService).(WindowManagerPolicy mPolicy==Binder通信的PhoneWindowManager).interceptKeyBeforeDispatching()</span><br><span class="line">--Binder通信--&gt; PhoneWindowManager#interceptKeyBeforeDispatching()</span><br><span class="line">    &#123; HOME/MENU/SEARCH 等全局键处理 &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::startDispatchCycleLocked(currentTime, connection)</span><br><span class="line">    &#123; 以键盘 TYPE_KEY 为例 connection-&gt;( InputPublisher inputPublisher ==WRAPS(mChannel)== connection 建立时的 inputChannel == NativeInputChannel 建立时的 inputChannel )-&gt;publishKeyEvent(),</span><br><span class="line">      如果成功则 connection-&gt;outboundQueue.dequeue(dispatchEntry), connection-&gt;waitQueue.enqueueAtTail(dispatchEntry) &#125;</span><br><span class="line">-&gt; InputPublisher::publishKeyEvent()</span><br><span class="line">-&gt; (InputChannel mChannel)::sendMessage(InputMessage::ctor()) &#123; UNIX Socket ::send(mFd, msg ...) &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::Connection 类在 InputDispatcher.h 中. 所有的connection在 InputDispatcher::registerInputChannel() 中注册.</span><br><span class="line"></span><br><span class="line">mLooper-&gt;pollOnce()</span><br><span class="line">------------------------</span><br><span class="line">-&gt; Looper::pollInner()</span><br><span class="line">    &#123; epoll_wait(inputChannelFd), foreach event: [pushResponse(events, mRequests[idx])],</span><br><span class="line">      foreach in mMessageEnvelopes: messageEnvelope.handler-&gt;handleMessage(messageEnvelope.messge),</span><br><span class="line">      foreach in mResponses: response.request.callback-&gt;handleEvent() &#125;</span><br><span class="line">-&gt; Looper::pushResponse() &#123; 添加到 mResponses 队列 &#125;</span><br><span class="line">-&gt; response.request.callback-&gt;handleEvent()</span><br><span class="line">-&gt; InputDispatcher::handleReceiveCallback()</span><br><span class="line">    &#123; connection-&gt;inputPublisher.receiveFinishedSignal(), (InputDispatcher d)-&gt;finishDispatchCycleLocked() &#125;</span><br><span class="line"></span><br><span class="line">InputPublisher::receiveFinishedSignal()</span><br><span class="line">-&gt; mChannel-&gt;receiveMessage(), 是 socketpair() 服务器端</span><br><span class="line"></span><br><span class="line">InputDispatcher::finishDispatchCycleLocked()</span><br><span class="line">-&gt; InputDispatcher::onDispatchCycleFinishedLocked() &#123; 通知并准备下个 dispatch cycle &#125;</span><br><span class="line">--mCommandQueue队列--&gt; InputDispatcher::doDispatchCycleFinishedLockedInterruptible()</span><br><span class="line">    &#123; connection-&gt;waitQueue.dequeue(dispatchEntry), startDispatchCycleLocked() &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Looper机制</span><br><span class="line">----------------------------------</span><br><span class="line">ActivityThread#main()</span><br><span class="line">-&gt; Looper#loop() &#123; 无限循环: 处理 (MessageQueue queue).next() &#125;</span><br><span class="line">-&gt; MessageQueue#next()</span><br><span class="line">--JNI--&gt; nativePollOnce()</span><br><span class="line">--C++--&gt; NativeMessageQueue::pollOnce()</span><br><span class="line">-&gt; Looper::pollOnce()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-android-4-3-r2-2&quot;&gt;&lt;a href=&quot;#版本-android-4-3-r2-2&quot; class=&quot;headerlink&quot; title=&quot;版本 android-4.3_r2.2&quot;&gt;&lt;/a&gt;版本 android-4.3_r2.2&lt;/h1&gt;&lt;h1 i
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>用Octopress在GitHub上搭建博客</title>
    <link href="http://yoursite.com/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/octopress-setup/"/>
    <id>http://yoursite.com/博客搭建/octopress-setup/</id>
    <published>2013-09-01T05:23:00.000Z</published>
    <updated>2019-05-02T15:24:24.550Z</updated>
    
    <content type="html"><![CDATA[<ul><li>目录{:toc}<a id="more"></a></li></ul><h1 id="备料"><a href="#备料" class="headerlink" title="备料"></a>备料</h1><h2 id="注册-GitHub-账户并创建一个空仓库"><a href="#注册-GitHub-账户并创建一个空仓库" class="headerlink" title="注册 GitHub 账户并创建一个空仓库"></a>注册 GitHub 账户并创建一个空仓库</h2><ul><li>(<strong>假定注册名为 yourname, 注册邮箱 yourname@gmail.com</strong>, 下同)</li><li>创建空仓库 yourname.github.io</li></ul><h2 id="下载并配置-Git"><a href="#下载并配置-Git" class="headerlink" title="下载并配置 Git"></a>下载并配置 Git</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><p>Linux</p><ul><li>使用系统包管理安装git</li></ul></li><li><p>Windows</p><ul><li><a href="http://code.google.com/p/msysgit/downloads/list" rel="external nofollow noopener noreferrer" target="_blank">MsysGit</a></li><li>vim着色：MsysGit上的vim着色文件不全, 可从完整vim73的syntax目录拷过来, 如 <code>/usr/share/vim/vim73/syntax</code></li></ul></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>设置 LANG 环境变量(可以不设LC_ALL; 可以不是zh_CN, 后缀是UTF-8即可;)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># locale和中文显示</span></span><br><span class="line">touch ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export LANG="en_US.UTF-8"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">touch ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set meta-flag on'</span> &gt;&gt; ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set convert-meta off'</span> &gt;&gt; ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set input-meta on'</span> &gt;&gt; ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set output-meta on'</span> &gt;&gt; ~/.inputrc</span><br><span class="line">touch ~/.vimrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set fileencodings=utf-8'</span> &gt;&gt; ~/.vimrc</span><br><span class="line"><span class="comment"># git options</span></span><br><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"yourname@gmail.com"</span></span><br><span class="line">git config core.autocrlf <span class="literal">false</span></span><br><span class="line">git config credential.helper <span class="string">'cache --timeout=3600'</span> <span class="comment"># Keep your password cached in memory</span></span><br><span class="line">git config github.user <span class="string">"yourname"</span></span><br><span class="line"><span class="comment"># ssh key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"yourname@gmail.com"</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub <span class="comment"># 将内容复制到 https://github.com/settings/ssh 上</span></span><br></pre></td></tr></table></figure><h2 id="下载并配置-Ruby-1-9-3"><a href="#下载并配置-Ruby-1-9-3" class="headerlink" title="下载并配置 Ruby(1.9.3)"></a>下载并配置 Ruby(1.9.3)</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><ul><li><a href="http://rubyinstaller.org/downloads" rel="external nofollow noopener noreferrer" target="_blank">Windows</a><ul><li>7zip包解压(假设到 D:\ruby1.9.3), 添加到系统PATH</li><li>下载并配置 DevKit(<a href="http://github.com/oneclick/rubyinstaller/wiki/Development-Kit" rel="external nofollow noopener noreferrer" target="_blank">wiki</a>)<ul><li>1.9.3 配对 <a href="http://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe" rel="external nofollow noopener noreferrer" target="_blank">DevKit-tdm</a>, 解压(假设到 D:\ruby1.9.3-DevKit), 添加到系统PATH</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /D/ruby1.9.3-DevKit</span><br><span class="line">ruby dk.rb init</span><br><span class="line">ruby dk.rb review <span class="comment"># 确认ruby位置正确</span></span><br><span class="line">ruby dk.rb install</span><br><span class="line"><span class="comment"># 验证DevKit</span></span><br><span class="line">gem install json --platform=ruby <span class="comment"># 能看到 build native</span></span><br><span class="line">ruby -rubygems -e <span class="string">"require 'json'; puts JSON.load('[42]').inspect"</span> <span class="comment"># 确认json gem安装成功</span></span><br></pre></td></tr></table></figure><ul><li>Linux<ul><li>使用 <a href="http://rvm.io/rvm/install" rel="external nofollow noopener noreferrer" target="_blank">RVM(Ruby版本管理)</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install RVM stable with ruby in user's $HOME</span></span><br><span class="line">\curl -L http://get.rvm.io | bash -s stable --ruby <span class="comment"># 反斜杠是防止使用到 ~/.curlrc 定义的 alias</span></span><br><span class="line"><span class="comment"># rvm安装完毕</span></span><br><span class="line"><span class="comment"># rvm list known</span></span><br><span class="line">rvm install 1.9.3</span><br><span class="line">rvm use 1.9.3 --default</span><br><span class="line"><span class="comment"># ruby -v</span></span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem更新源</span></span><br><span class="line">gem sources --remove http://rubygems.org/ <span class="comment"># 要包含最后的斜杠</span></span><br><span class="line">gem sources -a http://ruby.taobao.org/</span><br><span class="line">gem sources -l <span class="comment"># 验证源只有 ruby.taobao.org</span></span><br></pre></td></tr></table></figure><h1 id="安装Octopress"><a href="#安装Octopress" class="headerlink" title="安装Octopress"></a>安装Octopress</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/imathis/octopress.git mygithubio</span><br><span class="line"><span class="built_in">cd</span> mygithubio</span><br><span class="line">gem install bundler <span class="comment"># 不是 bundle</span></span><br><span class="line">bundle install <span class="comment"># 下载安装依赖项目(bundle是ruby的依赖管理工具)</span></span><br><span class="line">rake install <span class="comment"># 编译octopress项目(Rake to Ruby == Make to C)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake setup_github_pages</span><br></pre></td></tr></table></figure><ul><li><p><code>hellip; 不是内部命令</code>错误 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><ul><li><code>Rakefile</code>文件 <code>My Octopress Page is coming soon &amp;hellip;</code> 在 <code>&amp;hellip;</code> 前加 <code>^</code> (Windows cmd转义)</li></ul></li><li><p>setup_github_pages目标主要做了2件事:</p><ul><li>将原来git upstream的 origin 改到 octopress</li><li>将你在 GitHub 上的博客地址(如 yourname.github.io) 作为 origin. 验证: <code>git remote -v</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rake new_post['hello octopress'] # 创建新markdown博文</span></span><br><span class="line">rake generate <span class="comment"># 确保 `.gitignore` 包含忽略 _deploy 目录</span></span><br><span class="line"><span class="comment"># rake preview # 可通过本机4000端口预览</span></span><br><span class="line"><span class="comment"># rake deploy # push 到 GitHub 博客项目的 master 分支</span></span><br></pre></td></tr></table></figure><h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><h3 id="找不到python213"><a href="#找不到python213" class="headerlink" title="找不到python213"></a>找不到python2<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Python27</span><br><span class="line">mklink /H python2.exe python.exe</span><br></pre></td></tr></table></figure><h1 id="基本使用和配置"><a href="#基本使用和配置" class="headerlink" title="基本使用和配置"></a>基本使用和配置</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="rake-new-post-39-new-post-today-39-生成新博文"><a href="#rake-new-post-39-new-post-today-39-生成新博文" class="headerlink" title="rake new_post[&#39;new-post-today&#39;] 生成新博文"></a><code>rake new_post[&#39;new-post-today&#39;]</code> 生成新博文</h3><h3 id="rake-new-page-39-new-page-in-here-39-生成新页面-不属于博文系列"><a href="#rake-new-page-39-new-page-in-here-39-生成新页面-不属于博文系列" class="headerlink" title="rake new_page[&#39;new-page-in-here&#39;] 生成新页面(不属于博文系列)"></a><code>rake new_page[&#39;new-page-in-here&#39;]</code> 生成新页面(不属于博文系列)</h3><h2 id="配置2"><a href="#配置2" class="headerlink" title="配置2"></a>配置<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h2><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 博客链接格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/blog/:year/:month-:day-:title.html</span></span><br><span class="line"><span class="comment"># 使用kramdown</span></span><br><span class="line"><span class="attr">markdown:</span> <span class="string">kramdown</span></span><br><span class="line"><span class="comment"># SEO</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">yourname的技术博客</span></span><br></pre></td></tr></table></figure><h3 id="自动生成目录6"><a href="#自动生成目录6" class="headerlink" title="自动生成目录6"></a>自动生成目录<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></h3><h4 id="使用kramdown-下面配置-写博客时加入以下两行即可自动生成目录"><a href="#使用kramdown-下面配置-写博客时加入以下两行即可自动生成目录" class="headerlink" title="使用kramdown(下面配置), 写博客时加入以下两行即可自动生成目录:"></a>使用kramdown(下面配置), 写博客时加入以下两行即可自动生成目录:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* list element with functor item</span><br><span class="line">&#123;:toc&#125;</span><br></pre></td></tr></table></figure><h4 id="目录样式"><a href="#目录样式" class="headerlink" title="目录样式"></a>目录样式</h4><p><code>touch sass/custom/_styles.scss</code>, 添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#markdown-toc</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"TOC"</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-id">#markdown-toc</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">//  float: left;</span><br><span class="line">  <span class="selector-tag">background-color</span>: <span class="selector-tag">LightGray</span>;</span><br><span class="line">  <span class="selector-tag">margin-right</span><span class="selector-pseudo">:2em</span>;</span><br><span class="line">  <span class="selector-tag">border-radius</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line">  <span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span><br><span class="line">  <span class="selector-tag">-moz-box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">  <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧栏"><a href="#侧栏" class="headerlink" title="侧栏"></a>侧栏</h3><h4 id="about-me"><a href="#about-me" class="headerlink" title="about me"></a>about me</h4><h5 id="config-yml-的-default-asides-里添加-custom-asides-about-html"><a href="#config-yml-的-default-asides-里添加-custom-asides-about-html" class="headerlink" title="_config.yml 的 default_asides 里添加 custom/asides/about.html"></a><code>_config.yml</code> 的 <code>default_asides</code> 里添加 <code>custom/asides/about.html</code></h5><h5 id="touch-source-includes-custom-asides-about-html-添加内容"><a href="#touch-source-includes-custom-asides-about-html-添加内容" class="headerlink" title="touch source/_includes/custom/asides/about.html, 添加内容"></a><code>touch source/_includes/custom/asides/about.html</code>, 添加内容</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一句话介绍<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>微博: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://weibo.com/yourname"</span>&gt;</span>@yourweiboname<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://douban.com/yourname"</span>&gt;</span>@yourdoubanname<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分类标签-支持中文-categories5"><a href="#分类标签-支持中文-categories5" class="headerlink" title="分类标签(支持中文)/categories5"></a>分类标签(支持中文)/categories<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></h4><p>categories 多个以逗号分隔</p><h5 id="中文支持-确认-plugins-category-generator-rb-中-write-category-indexes-和-category-link-函数包含-to-url-调用-url-不区分大小写-不用再调-downcase"><a href="#中文支持-确认-plugins-category-generator-rb-中-write-category-indexes-和-category-link-函数包含-to-url-调用-url-不区分大小写-不用再调-downcase" class="headerlink" title="中文支持: 确认 plugins/category_generator.rb 中 write_category_indexes 和 category_link 函数包含 to_url 调用 (url 不区分大小写, 不用再调 downcase)"></a>中文支持: 确认 <code>plugins/category_generator.rb</code> 中 <code>write_category_indexes</code> 和 <code>category_link</code> 函数包含 <code>to_url</code> 调用 (url 不区分大小写, 不用再调 downcase)</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 109行附近</span></span><br><span class="line"><span class="keyword">self</span>.write_category_index(File.join(dir, category.to_url), category)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 176行附近</span></span><br><span class="line"><span class="string">"&lt;a class='category' href='/<span class="subst">#&#123;dir&#125;</span>/<span class="subst">#&#123;category.to_url&#125;</span>/'&gt;<span class="subst">#&#123;category&#125;</span>&lt;/a&gt;"</span></span><br></pre></td></tr></table></figure><h5 id="touch-plugins-category-list-tag-rb-添加内容"><a href="#touch-plugins-category-list-tag-rb-添加内容" class="headerlink" title="touch plugins/category_list_tag.rb, 添加内容"></a><code>touch plugins/category_list_tag.rb</code>, 添加内容</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Jekyll</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CategoryListTag</span> &lt; Liquid::Tag</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(context)</span></span></span><br><span class="line">      html = <span class="string">""</span></span><br><span class="line">      categories = context.registers[<span class="symbol">:site</span>].categories.keys</span><br><span class="line">      categories.sort.each <span class="keyword">do</span> <span class="params">|category|</span></span><br><span class="line">        posts_in_category = context.registers[<span class="symbol">:site</span>].categories[category].size</span><br><span class="line">        html &lt;&lt; <span class="string">"&lt;li class='category'&gt;&lt;a href='/blog/categories/<span class="subst">#&#123;category.to_url&#125;</span>/'&gt;<span class="subst">#&#123;category&#125;</span> (<span class="subst">#&#123;posts_in_category&#125;</span>)&lt;/a&gt;&lt;/li&gt;\n"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      html</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Liquid::Template.register_tag(<span class="string">'category_list'</span>, Jekyll::CategoryListTag)</span><br></pre></td></tr></table></figure><h5 id="touch-source-includes-asides-category-list-html-添加内容"><a href="#touch-source-includes-asides-category-list-html-添加内容" class="headerlink" title="touch source/_includes/asides/category_list.html, 添加内容"></a><code>touch source/_includes/asides/category_list.html</code>, 添加内容</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Categories<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"categories"</span>&gt;</span></span><br><span class="line">    &#123;% category_list %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="config-yml-中-default-asides-添加-asides-category-list-html"><a href="#config-yml-中-default-asides-添加-asides-category-list-html" class="headerlink" title="_config.yml 中 default_asides 添加 asides/category_list.html"></a><code>_config.yml</code> 中 <code>default_asides</code> 添加 <code>asides/category_list.html</code></h5><h3 id="Jekyll-lunr-js-即时搜索7"><a href="#Jekyll-lunr-js-即时搜索7" class="headerlink" title="Jekyll+lunr.js 即时搜索7"></a>Jekyll+lunr.js 即时搜索<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></h3><ul><li>下载 <a href="http://github.com/slashdotdash/jekyll-lunr-js-search/raw/master/build/jekyll_lunr_js_search.rb" rel="external nofollow noopener noreferrer" target="_blank">jekyll_lunr_js_search.rb</a> 放到 <code>plugins</code> 目录. 可按 <sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup> 中提示修改一个小bug.</li><li>下载 <a href="http://github.com/slashdotdash/jekyll-lunr-js-search/raw/master/js/jquery.lunr.search.js" rel="external nofollow noopener noreferrer" target="_blank">jquery.lunr.search.js</a> 放到 <code>source/javascripts</code> 目录</li><li>jQuery 已在 Octopress 中内置: <code>source/javascripts/libs/jquery.min.js</code></li><li>下载 以下几个 javascript 依赖, 放到 <code>source/javascripts</code> 目录<ul><li><a href="http://raw.github.com/olivernn/lunr.js/master/lunr.min.js" rel="external nofollow noopener noreferrer" target="_blank">lunr.min.js</a></li><li><a href="http://github.com/janl/mustache.js/raw/master/mustache.js" rel="external nofollow noopener noreferrer" target="_blank">mustache.js</a></li><li><a href="http://stevenlevithan.com/assets/misc/date.format.js" rel="external nofollow noopener noreferrer" target="_blank">date.format.js</a></li><li><a href="http://github.com/medialize/URI.js/raw/gh-pages/src/URI.min.js" rel="external nofollow noopener noreferrer" target="_blank">URI.min.js</a></li></ul></li><li><code>gem install nokogiri json</code> 安装依赖, <code>gem list</code> 查看 nokogiri 版本(假设为 <code>1.6.0</code>)</li><li>修改 <code>Gemfile</code>, 标明依赖 <code>gem &#39;nokogiri&#39;, &#39;~&gt; 1.6.0&#39;</code></li><li><code>rake new_page[&#39;search&#39;]</code>, 编辑 search页(<code>source/search/index.markdown</code>):</li></ul><script src="//gist.github.com/7367525.js"></script><ul><li>屏蔽页面被索引有两种方式<ul><li>每个 markdown页 的 YAML配置头 加 <code>exclude_from_search: true</code></li><li><code>_config.yml</code> 统一添加(即使没有也添加, 防止索引运行出错)</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lunr_search:</span></span><br><span class="line"><span class="attr">  excludes:</span> <span class="string">[rss.xml,</span> <span class="string">atom.xml]</span></span><br></pre></td></tr></table></figure><ul><li>首页添加链接到 search页面</li><li>重新 <code>rake generate</code></li></ul><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><ul><li>about页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake new_page[<span class="string">'about'</span>] <span class="comment"># 生成 source/about/index.markdown</span></span><br></pre></td></tr></table></figure><p>头部导航菜单 <code>/source/_includes/custom/navigation.html</code> 加入 about页面 链接.</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li><code>source/_includes/custom/head.html</code> 全部注释掉, 不装载 Google Webfonts(此字体没有包含中文, 粗体中文显示不出)</li><li><code>sass/custom/_fonts.scss</code> 添加(<a href="http://lifesinger.wordpress.com/2011/04/06/best-web-default-fonts/" rel="external nofollow noopener noreferrer" target="_blank">最佳 Web 中文默认字体</a>)</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$heading-font-family: arial, sans-serif;</span><br><span class="line">$header-title-font-family: arial, sans-serif;</span><br><span class="line">$header-subtitle-font-family: arial, sans-serif;</span><br></pre></td></tr></table></figure><h1 id="社交功能"><a href="#社交功能" class="headerlink" title="社交功能"></a>社交功能</h1><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><h3 id="JiaThis3"><a href="#JiaThis3" class="headerlink" title="JiaThis3"></a><a href="http://www.jiathis.com" rel="external nofollow noopener noreferrer" target="_blank">JiaThis</a><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3><p><code>_config.yml</code> 加入变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JiaThis</span></span><br><span class="line"><span class="attr">jiathis:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>source/_includes/post/sharing.html</code> 尾部 <code>&lt;/div&gt;</code> 之前添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">if</span> <span class="string">site.jiathis</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&#123;%</span> <span class="string">include</span> <span class="string">post/jiathis.html</span> <span class="string">%&#125;</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><p><code>touch source/_includes/post/jiathis.html</code>, 将从 JiaThis 获得的代码放入其中</p><h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><h3 id="多说4"><a href="#多说4" class="headerlink" title="多说4"></a><a href="http://duoshuo.com" rel="external nofollow noopener noreferrer" target="_blank">多说</a><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></h3><p><code>_config.yml</code> 加入变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DuoShuo comments</span></span><br><span class="line"><span class="attr">duoshuo_comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">duoshuo_short_name:</span> <span class="string">yourname</span></span><br></pre></td></tr></table></figure><p><code>source/_layouts/post.html</code> 中 disqus 代码下添加 (单独页面也加评论的话 <code>source/_layouts/page.html</code> 中也放相同代码)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Comments"</span> <span class="attr">aria-live</span>=<span class="string">"polite"</span>&gt;</span>&#123;% include post/duoshuo-thread.html %&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>创建 <code>source/_includes/post/duoshuo-thread.html</code>, 将从多说获得的代码放入其中</p><h2 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h2><h3 id="站长统计"><a href="#站长统计" class="headerlink" title="站长统计"></a><a href="http://www.cnzz.com" rel="external nofollow noopener noreferrer" target="_blank">站长统计</a></h3><p><code>source/_includes/custom/footer.html</code> 中加入注册后给出的统计代码.</p><h1 id="换主题"><a href="#换主题" class="headerlink" title="换主题"></a>换主题</h1><p><a href="http://github.com/bkutil/bootstrap-theme" rel="external nofollow noopener noreferrer" target="_blank">bootstrap-theme</a> , 或者<a href="http://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" rel="external nofollow noopener noreferrer" target="_blank">其他的</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://github.com/bkutil/bootstrap-theme.git .themes/bootstrap-theme</span><br><span class="line">rake install[<span class="string">'bootstrap-theme'</span>] <span class="comment"># 注意: 换主题后所有非custom目录下的内容都会被覆盖掉！！</span></span><br><span class="line">rake generate</span><br></pre></td></tr></table></figure><h1 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h1><p>I forked from <a href="http://github.com/hendricius/jekyll-i18n.git" rel="external nofollow noopener noreferrer" target="_blank">hendricius/jekyll-i18n</a> and adapted to octopress(in <a href="http://github.com/wangmuy/octopress-i18n" rel="external nofollow noopener noreferrer" target="_blank">octopress-i18n</a>).</p><p>However, AFAIK there’s no i18n capable themes right now. You have to create your own theme branch and adapt to i18n.</p><p>html中写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">i18nvar</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><p>, <code>source/_locales/zh_CN.yml</code> 中定义对应变量 <code>i18nvar: 中文名称</code></p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull octopress master <span class="comment"># 自动或手动merge</span></span><br><span class="line">bundle install</span><br><span class="line">rake update_source</span><br><span class="line">rake update_style</span><br></pre></td></tr></table></figure><h1 id="使用-travis-ci-自动编译发布"><a href="#使用-travis-ci-自动编译发布" class="headerlink" title="使用 travis-ci 自动编译发布"></a>使用 travis-ci 自动编译发布</h1><ul><li>登录<a href="https://travis-ci.org" rel="external nofollow noopener noreferrer" target="_blank">Travis-CI</a>, 注册授权,  右上角 Accounts, 对应项目repo 置为 ON</li><li>生成 https 访问 github 所需的 token. 可用<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>中的界面方法, 或<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>中的curl直接获取</li><li><code>gem install travis; travis encrypt GH_TOKEN=&lt;token&gt;</code> 生成加密的token</li><li>修改 .travis.yml, 几点注意:<ul><li>调用 rake 命令时前面要加 <code>bundle exec</code>, 防止 rake 命令版本冲突</li><li>Travis 默认使用 <code>Gemfile.lock</code> 中的信息, 但此文件中包含平台相关的build信息, 会导致nokogiri编译问题<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>. 所以最好是将 <code>Gemfile</code> 拷贝出一份独立的 <code>Gemfile.travis</code> 供 Travis 使用.</li><li><code>Gemfile.travis</code> 中的 <code>source</code> 此时也可改用通用的 <a href="https://rubygems.org" rel="external nofollow noopener noreferrer" target="_blank">rubygems</a></li><li>Travis上构建时如果出现 <code>Liquid Exception: Gist replied with 301</code> 错误提示, 是Octopress的一个bug, 则需要更新一下Octopress<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup></li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">source</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">ruby</span></span><br><span class="line"><span class="attr">rvm:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">1.9</span><span class="number">.3</span></span><br><span class="line"><span class="attr">gemfile:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Gemfile.travis</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"yourname"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"yourname@gmail.com"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">REPO_URL="https://$GH_TOKEN@github.com/$GH_REPO.git"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rake</span> <span class="string">setup_github_pages[$REPO_URL]</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rake</span> <span class="string">generate</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rake</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">GH_REPO="your_github_name/your_github_name.github.io"</span></span><br><span class="line"><span class="attr">  - secure:</span> <span class="string">"&lt;your-travis-encrypted-token&gt;"</span></span><br></pre></td></tr></table></figure><ul><li>修改 Rakefile</li></ul><p>隐藏token</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-      puts "Added remote #&#123;repo_url&#125; as origin"</span></span><br><span class="line"><span class="addition">+      puts "Added remote as origin" # don't put repo_url in travis-ci as it may contains token</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-    system "git push origin #&#123;deploy_branch&#125; --force"</span></span><br><span class="line"><span class="addition">+    system "git push origin #&#123;deploy_branch&#125; --force --quiet" # hide github token</span></span><br></pre></td></tr></table></figure><p>支持https提交</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    puts "(For example, 'git@github.com:yourname/yourname.github.com)"</span></span><br><span class="line"><span class="addition">+    puts "(For example, 'git@github.com:yourname/yourname.github.com' or 'https://github.com/yourname/yourname.github.com')"</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-  user = repo_url.match(/:([^\/]+)/)[1]</span></span><br><span class="line"><span class="addition">+  user = repo_url.match(/[\/:]([^\/]+)\/[^\/]+$/)[1]</span></span><br></pre></td></tr></table></figure><p>跳过不需要触发travis的commit</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    message = "Site updated at #&#123;Time.now.utc&#125;"</span></span><br><span class="line"><span class="addition">+    message = "Site updated at #&#123;Time.now.utc&#125;\n\n[ci skip]"</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-    system "git commit -m \"Octopress init\""</span></span><br><span class="line"><span class="addition">+    system "git commit -m \"Octopress init\n\n[ci skip]\""</span></span><br></pre></td></tr></table></figure><ul><li>README.markdown 加入 build 状态图标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Build Status](https://travis-ci.org/yourname/yourname.github.io.png?branch=source)](https://travis-ci.org/yourname/yourname.github.io)</span><br></pre></td></tr></table></figure><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://netwjx.github.io/blog/2012/03/18/octopress-note/" rel="external nofollow noopener noreferrer" target="_blank">Octopress 笔记</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.yanjiuyanjiu.com/blog/20130402/" rel="external nofollow noopener noreferrer" target="_blank">我的Octopress配置</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="http://sinosmond.github.io/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/" rel="external nofollow noopener noreferrer" target="_blank">在 Windows7 下从头开始安装部署 Octopress</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://ihavanna.org/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html" rel="external nofollow noopener noreferrer" target="_blank">为 Octopress 添加多说评论系统</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="http://selfecy.com/blog/2013/07/13/rang-octopressyou-zhong-wen-fen-lei-ji-ce-bian-lie/" rel="external nofollow noopener noreferrer" target="_blank">讓Octopress有中文分類及側邊列</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/" rel="external nofollow noopener noreferrer" target="_blank">Table of Contents in Octopress</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;"><a href="http://github.com/slashdotdash/jekyll-lunr-js-search" rel="external nofollow noopener noreferrer" target="_blank">Jekyll+lunr.js</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.hydra1983.com/my%20tech/2013/05/05/create-a-blog-using-jekyll-bootstrap/" rel="external nofollow noopener noreferrer" target="_blank">使用Jekyll-Bootstrap搭建博客时出现的问题</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;"><a href="http://xuhehuan.com/1761.html" rel="external nofollow noopener noreferrer" target="_blank">打造Octopress博客在线写作平台</a></span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;"><a href="http://rogerz.github.io/blog/2013/02/21/prose-io-github-travis-ci/" rel="external nofollow noopener noreferrer" target="_blank">Octopress+Prose+Github+Travis CI = Coders’ Blog</a></span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">11.</span><span style="display: inline-block; vertical-align: top;"><a href="http://github.com/travis-ci/travis-ci/issues/1919" rel="external nofollow noopener noreferrer" target="_blank">travis-ci-nokogiri-LoadError</a></span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">12.</span><span style="display: inline-block; vertical-align: top;"><a href="http://github.com/imathis/octopress/pull/1506/commits" rel="external nofollow noopener noreferrer" target="_blank">octopress-gist-replied-with-301</a></span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">13.</span><span style="display: inline-block; vertical-align: top;"><a href="http://fabian-kostadinov.github.io/2015/01/04/problems-using-syntax-highlighting-with-pygments-on-windows" rel="external nofollow noopener noreferrer" target="_blank">Probmes using syntax highlighting with pygments on windows</a></span><a href="#fnref:13" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      octopress配置
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
</feed>
