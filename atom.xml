<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangmuy 的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-02T15:35:16.122Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wangmuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 输入系统 源码分析</title>
    <link href="http://yoursite.com/android/input-system/"/>
    <id>http://yoursite.com/android/input-system/</id>
    <published>2013-11-04T08:45:00.000Z</published>
    <updated>2019-05-02T15:35:16.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本-android-4-3-r2-2"><a href="#版本-android-4-3-r2-2" class="headerlink" title="版本 android-4.3_r2.2"></a>版本 android-4.3_r2.2</h1><h1 id="涉及到的文件"><a href="#涉及到的文件" class="headerlink" title="涉及到的文件"></a>涉及到的文件</h1><ul><li>frameworks/base/services/input/InputDispatcher.cpp<ul><li>InputDispatcher</li><li>InputDispatcherThread</li></ul></li><li>frameworks/base/services/input/InputReader.cpp<ul><li>InputReader</li><li>InputReaderThread</li></ul></li><li>frameworks/base/services/input/EventHub.cpp</li><li>frameworks/base/services/java/com/android/server/input/InputManagerService.java</li><li>frameworks/base/services/jni/com_android_server_input_InputManagerService.cpp</li><li>frameworks/base/core/jni/android_view_InputChannel.cpp<ul><li>NativeInputChannel</li></ul></li><li>frameworks/base/services/input/InputManager.cpp</li><li>frameworks/native/libs/utils/Threads.cpp</li><li>/frameworks/base/include/androidfw/InputTransport.h .cpp<ul><li>InputPublisher</li><li>InputChannel</li></ul></li></ul><h1 id="初始化-SystemServer-java-ServerThread-run"><a href="#初始化-SystemServer-java-ServerThread-run" class="headerlink" title="初始化( SystemServer.java: ServerThread#run() )"></a>初始化( SystemServer.java: ServerThread#run() )</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NIM: NativeInputManager</span><br><span class="line">InputManagerService#ctor()</span><br><span class="line">--JNI--&gt; nativeInit()</span><br><span class="line">--C++--&gt; NativeInputManager::ctor()</span><br><span class="line">-&gt; InputManager::ctor(new eventHub(), NIM, NIM)</span><br><span class="line">    &#123;mDispatcher=InputDispatcher::ctor(NIM),</span><br><span class="line">     mReader=InputReader::ctor(eventHub==new eventHub in NIM, NIM, mDispatcher), InputReader::mQueuedListener=QueuedInputListener::ctor(mDispatcher)) &#125;</span><br><span class="line">-&gt; InputManager::initialize() &#123; InputReaderThread::ctor(mReader), InputDispatcherThread::ctor() &#125;</span><br><span class="line"></span><br><span class="line">InputManagerService#setWindowManagerCallbacks(wm.getInputMonitor())</span><br><span class="line">    &#123; mWindowManagerCallbacks == InputMonitor#ctor() &#125;</span><br></pre></td></tr></table></figure><h1 id="启动-SystemServer-java-ServerThread-run"><a href="#启动-SystemServer-java-ServerThread-run" class="headerlink" title="启动( SystemServer.java: ServerThread#run() )"></a>启动( SystemServer.java: ServerThread#run() )</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">InputManagerService#start()</span><br><span class="line">--JNI--&gt; nativeStart()</span><br><span class="line">--C++--&gt; InputManager::start() &#123; mDispatcherThread-&gt;run(), mReaderThread-&gt;run() &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcherThread::run() [重载 Thread::run]</span><br><span class="line">    &#123; androidCreateRawThreadEtc() -&gt; pthread_create()</span><br><span class="line">     --新线程--&gt; Thread::_threadLoop() --无限循环--&gt; InputDispatcherThread::threadLoop() -&gt; Dispatcher::dispatchOnce() &#125;</span><br><span class="line"></span><br><span class="line">InputReaderThread::run() [重载 Thread::run]</span><br><span class="line">    --新线程--&gt; ... --无限循环--&gt; InputReaderThread::threadLoop()</span><br><span class="line">    -&gt; mReader::loopOnce()</span><br><span class="line">      &#123; mEventHub::getEvents(timeout, eventBuffer), processEventsLocked(eventBuffer), 更新inputDevices列表, mQueuedListener::flush() &#125;</span><br><span class="line">    -&gt; EventHub::getEvents()</span><br><span class="line">        &#123; (mNeedToScanDevices 初始化为 true) scanDevicesLocked(),</span><br><span class="line">          无限循环: 处理 ReopenDevice/ScanDevice/pendingEvent, epoll_wait(device_fds) 获取 pendingEvent &#125;</span><br><span class="line"></span><br><span class="line">EventHub::scanDevicesLocked()</span><br><span class="line">-&gt; EventHub::scanDirLocked(&quot;/dev/input&quot;) &#123; foreach devFile: openDeviceLocked(devname) &#125;</span><br><span class="line">-&gt; EventHub::openDeviceLocked()</span><br><span class="line">    &#123; LoadConfigurationLocked(), epoll_ctl(CTL_ADD), addDeviceLocked() &#125;</span><br><span class="line">-&gt; EventHub::addDeviceLocked() &#123; 加到 mDevices &#125;</span><br></pre></td></tr></table></figure><h1 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">如果没有任何连接, InputDispatcher会扔掉接收到的按键.</span><br><span class="line">ViewRootImpl#setView()</span><br><span class="line">    &#123; mInputChannel=InputChannel#ctor,</span><br><span class="line">      mWindowSession.addToDisplay(..., mInputChannel),</span><br><span class="line">      mInputEventReceiver = WindowInputEventReceiver#ctor((mInputChannel==transfer过来的客户端channel), Looper.myLooper()) &#125;</span><br><span class="line"></span><br><span class="line">mWindowSession.addToDisplay()</span><br><span class="line">--Binder--&gt; Session#addToDisplay(..., outInputChannel==mInputChannel)</span><br><span class="line">-&gt; WindowManagerService#addWindow(..., outInputChannel)</span><br><span class="line">    &#123; inputChannels=InputChannel#openInputChannelPair(name),</span><br><span class="line">      (WindowState win).setInputChannel(inputChannels[0]),</span><br><span class="line">      inputChannels[1].transferTo(outInputChannel), 结果是 ViewRootImpl#mInputChannel 赋值为 socketpair() 客户端</span><br><span class="line">      (InputManagerService mInputManager).registerInputChannel(win.mInputChannel==inputChannels[0], ...), 结果是 InputDispatcher 中一个 Connection::inputChannel 赋值为 socketpair() 服务器端 &#125;</span><br><span class="line"></span><br><span class="line">WindowInputEventReceiver#ctor()</span><br><span class="line">-&gt; InputEventReceiver#ctor()</span><br><span class="line">--JNI--&gt; InputEventReceiver::nativeInit() &#123; receiver=NativeInputEventReceiver::ctor(), receiver-&gt;initialize() &#125;</span><br><span class="line">-&gt; receiver-&gt;initialize()</span><br><span class="line">-&gt; setFdEvents() &#123; mMessageQueue-&gt;getLooper()-&gt;addFd(mInputConsumer.getChannel()-&gt;getFd()) 客户端, ViewRootImpl Looper &#125;</span><br><span class="line"></span><br><span class="line">InputChannel#openInputChannelPair()</span><br><span class="line">--JNI--&gt; nativeOpenInputChannelPair()</span><br><span class="line">--C++--&gt; InputChannel::openInputChannelPair([0]==serverChannel, [1]==clientChannel)</span><br><span class="line">    &#123; fd[2]=socketpair(), serverChannel.mFd=fd[0], clientChannel.mFd=fd[1] &#125;</span><br><span class="line"></span><br><span class="line">InputChannel#transferTo()</span><br><span class="line">--JNI--&gt; nativeTransferTo() &#123; outInputChannel=inputChannels[1], inputChannels[1]==null &#125;</span><br><span class="line"></span><br><span class="line">InputManagerService#registerInputChannel(inputChannel)</span><br><span class="line">--JNI--&gt; nativeRegisterInputChannel(inputChannel)</span><br><span class="line">--C++--&gt; (NativeInputManager im)-&gt;registerInputChannel(env, inputChannel, ...)</span><br><span class="line">-&gt; InputManager::-&gt;getDispatcher()-&gt;registerInputChannel(inputChannel, ...)</span><br><span class="line">-&gt; InputDispatcher::registerInputChannel()</span><br><span class="line">    &#123; Connection::ctor(inputChannel, ...),</span><br><span class="line">      mLooper-&gt;addFd(inputChannel-&gt;getFd(), ...) &#125;</span><br><span class="line"></span><br><span class="line">Looper::addFd()</span><br><span class="line">    &#123; epoll_ctl(ADD/MOD), 加入到 mRequests 队列 &#125;</span><br><span class="line"></span><br><span class="line">接收event</span><br><span class="line">------------------------</span><br><span class="line">ViewRootImpl#requestLayout() / invalidate() / setLayoutParams() 等</span><br><span class="line">-&gt; ViewRootImpl#scheduleTraversals()</span><br><span class="line">-&gt; ViewRootImpl#scheduleConsumeBatchedInput()</span><br><span class="line">--Looper机制--&gt; (ConsumeBatchedinputRunnable mConsumedBatchedInputRunnable)#run()</span><br><span class="line">-&gt; ViewRootImpl#doConsumeBatchedInput()</span><br><span class="line">-&gt; (WindowInputEventReceiver mInputEventReceiver).consumeBatchedInputEvents()</span><br><span class="line">-&gt; InputEventReceiver#consumeBatchedInputEvents()</span><br><span class="line">--JNI--&gt; nativeConsumeBatchedInputEvents(receiver)</span><br><span class="line">--C++--&gt; (NativeInputEventReceiver receiver)::consumeEvents()</span><br><span class="line">    &#123; 无限循环: [</span><br><span class="line">        (InputConsumer mInputConsumer==WRAPS(inputChannel == InputEventReceiver 构造时传入)).consume(),</span><br><span class="line">        (JNI调java) InputEventReceiver#dispatchInputEvent()] &#125;</span><br><span class="line"></span><br><span class="line">InputEventReceiver#dispatchInputEvent()</span><br><span class="line"> --重载--&gt; WindowInputEventReceiver::onInputEvent(event)</span><br><span class="line"> -&gt; ViewRootImpl#enqueueInputEvent()</span><br><span class="line"></span><br><span class="line">InputConsumer::consume()</span><br><span class="line">-&gt; mChannel-&gt;receiveMessage(), 是 socketpair() 客户端</span><br><span class="line">    &#123; UNIX Socket ::recv(mFd) &#125;</span><br></pre></td></tr></table></figure><h1 id="InputReader处理"><a href="#InputReader处理" class="headerlink" title="InputReader处理"></a>InputReader处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">InputReaderThread::processEventsLocked(deviceId, rawEvents, count)</span><br><span class="line">-&gt; --::processEventsForDeviceLocked(deviceId, rawEvent, batchSize) [或 add/remove)DeviceLocked / handleConfigurationChangedLocked]</span><br><span class="line">-&gt; mDevices中取 (InputDevice device)::process(rawEvents, count)</span><br><span class="line">    &#123; for rawEvents: 命令扔掉 or &#123; for mMappers: InputMapper::process(rawEvent) &#125; &#125;</span><br><span class="line">    mMappers 在 InputReader::createDeviceLocked() 中添加, 包括 (Switch/Vibrator/Keyboard/Cursor/MultiTouch/SingleTouch/Joystick)InputMapper</span><br><span class="line">-&gt; InputMapper子类::process(rawEvent), 以Keyboard为例 &#123; mReader-&gt;mQueuedListener::notifyKey(args) &#125;</span><br><span class="line">-&gt; QueuedInputListener::notifyKey(args) &#123; (Vector&lt;NotifyArgs*&gt; mArgsQueue).push(new NotifyKeyArgs(*args)) &#125;</span><br><span class="line"></span><br><span class="line">(QueuedInputListener mQueuedListener)::flush()</span><br><span class="line">-&gt; NotifyArgs::notify(mInnerListener==InputDispatcher)</span><br><span class="line">-&gt; InputDispatcher::notifyKey(NotifyKeyArgs) &#123; mPolicy-&gt;interceptKeyBeforeQueueing(), enqueueInboundEventLocked(newEntry) &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::enqueueInboundEventLocked(entry) &#123; mInboundQueue.enqueueAtTail(entry) &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">InputReaderThread和InputDispatcherThread两线程对 inBoundQueue 的访问是通过 InputDispatcher::mLock 锁来保护的.</span><br></pre></td></tr></table></figure><h1 id="InputDispatcher处理"><a href="#InputDispatcher处理" class="headerlink" title="InputDispatcher处理"></a>InputDispatcher处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">InputDispatcher::dispatchOnce()</span><br><span class="line">    &#123; dispatchOnceInnerLocked() 最终目的 UNIX Socket send 给注册的 inputChannel,</span><br><span class="line">      mLooper-&gt;pollOnce() 最终目的 epoll_wait(inputChannelFd) 确认应用返回的已处理消息 &#125;</span><br><span class="line"></span><br><span class="line">dispatchOnceInnerLocked() [或 runCommandsLockedInterruptible()]</span><br><span class="line">------------------------</span><br><span class="line">    &#123; mInboundQueue.dequeueAtHead() , 以键盘 TYPE_KEY 为例 dispatchKeyLocked() &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::dispatchKeyLocked(currentTime, entry, dopReason, nextWakeupTime)</span><br><span class="line">    &#123; (policy==NIM) intercept key 转为 CommandEntry, 或 扔掉, 或</span><br><span class="line">      findFocusedWindowTargetsLocked(), dispatchEventLocked(currentTime, entry, inputTargets) &#125;</span><br><span class="line">-&gt; dispatchEventLocked() &#123; foreach (InputDispatcher::Connection connection): prepareDispatchCycleLocked() &#125;</span><br><span class="line">-&gt; prepareDispatchCycleLocked()</span><br><span class="line">-&gt; enqueueDispatchEntriesLocked() &#123; enqueueDispatchEntryLocked(), 若之前为空则 startDispatchCycleLocked() &#125;</span><br><span class="line">-&gt; enqueueDispatchEntryLocked() &#123; connection-&gt;outboundQueue.enqueueAtTail(dispatchEntry) &#125;</span><br><span class="line"></span><br><span class="line">(policy==NIM) intercept key</span><br><span class="line">-&gt; InputDispatcher::postCommandLocked()</span><br><span class="line">--重新以CommandEntry形式dispatch--&gt; InputDispatcher::runCommandsLockedInterruptible()</span><br><span class="line">    &#123; (commandEntry-&gt;command函数指针==doInterceptKeyBeforeDispatchingLockedInterruptible)(commandEntry) &#125;</span><br><span class="line">-&gt; (mPolicy==NIM)-&gt;interceptKeyBeforeDispatching()</span><br><span class="line">--JNI回调java--&gt; InputManagerService#interceptKeyBeforeDispatching()</span><br><span class="line">--JAVA--&gt; (mWindowManagerCallbacks==InputMonitor).interceptKeyBeforeDispatching()</span><br><span class="line">-&gt; (WindowManagerService mService).(WindowManagerPolicy mPolicy==Binder通信的PhoneWindowManager).interceptKeyBeforeDispatching()</span><br><span class="line">--Binder通信--&gt; PhoneWindowManager#interceptKeyBeforeDispatching()</span><br><span class="line">    &#123; HOME/MENU/SEARCH 等全局键处理 &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::startDispatchCycleLocked(currentTime, connection)</span><br><span class="line">    &#123; 以键盘 TYPE_KEY 为例 connection-&gt;( InputPublisher inputPublisher ==WRAPS(mChannel)== connection 建立时的 inputChannel == NativeInputChannel 建立时的 inputChannel )-&gt;publishKeyEvent(),</span><br><span class="line">      如果成功则 connection-&gt;outboundQueue.dequeue(dispatchEntry), connection-&gt;waitQueue.enqueueAtTail(dispatchEntry) &#125;</span><br><span class="line">-&gt; InputPublisher::publishKeyEvent()</span><br><span class="line">-&gt; (InputChannel mChannel)::sendMessage(InputMessage::ctor()) &#123; UNIX Socket ::send(mFd, msg ...) &#125;</span><br><span class="line"></span><br><span class="line">InputDispatcher::Connection 类在 InputDispatcher.h 中. 所有的connection在 InputDispatcher::registerInputChannel() 中注册.</span><br><span class="line"></span><br><span class="line">mLooper-&gt;pollOnce()</span><br><span class="line">------------------------</span><br><span class="line">-&gt; Looper::pollInner()</span><br><span class="line">    &#123; epoll_wait(inputChannelFd), foreach event: [pushResponse(events, mRequests[idx])],</span><br><span class="line">      foreach in mMessageEnvelopes: messageEnvelope.handler-&gt;handleMessage(messageEnvelope.messge),</span><br><span class="line">      foreach in mResponses: response.request.callback-&gt;handleEvent() &#125;</span><br><span class="line">-&gt; Looper::pushResponse() &#123; 添加到 mResponses 队列 &#125;</span><br><span class="line">-&gt; response.request.callback-&gt;handleEvent()</span><br><span class="line">-&gt; InputDispatcher::handleReceiveCallback()</span><br><span class="line">    &#123; connection-&gt;inputPublisher.receiveFinishedSignal(), (InputDispatcher d)-&gt;finishDispatchCycleLocked() &#125;</span><br><span class="line"></span><br><span class="line">InputPublisher::receiveFinishedSignal()</span><br><span class="line">-&gt; mChannel-&gt;receiveMessage(), 是 socketpair() 服务器端</span><br><span class="line"></span><br><span class="line">InputDispatcher::finishDispatchCycleLocked()</span><br><span class="line">-&gt; InputDispatcher::onDispatchCycleFinishedLocked() &#123; 通知并准备下个 dispatch cycle &#125;</span><br><span class="line">--mCommandQueue队列--&gt; InputDispatcher::doDispatchCycleFinishedLockedInterruptible()</span><br><span class="line">    &#123; connection-&gt;waitQueue.dequeue(dispatchEntry), startDispatchCycleLocked() &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Looper机制</span><br><span class="line">----------------------------------</span><br><span class="line">ActivityThread#main()</span><br><span class="line">-&gt; Looper#loop() &#123; 无限循环: 处理 (MessageQueue queue).next() &#125;</span><br><span class="line">-&gt; MessageQueue#next()</span><br><span class="line">--JNI--&gt; nativePollOnce()</span><br><span class="line">--C++--&gt; NativeMessageQueue::pollOnce()</span><br><span class="line">-&gt; Looper::pollOnce()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本-android-4-3-r2-2&quot;&gt;&lt;a href=&quot;#版本-android-4-3-r2-2&quot; class=&quot;headerlink&quot; title=&quot;版本 android-4.3_r2.2&quot;&gt;&lt;/a&gt;版本 android-4.3_r2.2&lt;/h1&gt;&lt;h1 i
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>用Octopress在GitHub上搭建博客</title>
    <link href="http://yoursite.com/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/octopress-setup/"/>
    <id>http://yoursite.com/博客搭建/octopress-setup/</id>
    <published>2013-09-01T05:23:00.000Z</published>
    <updated>2019-05-02T15:24:24.550Z</updated>
    
    <content type="html"><![CDATA[<ul><li>目录{:toc}<a id="more"></a></li></ul><h1 id="备料"><a href="#备料" class="headerlink" title="备料"></a>备料</h1><h2 id="注册-GitHub-账户并创建一个空仓库"><a href="#注册-GitHub-账户并创建一个空仓库" class="headerlink" title="注册 GitHub 账户并创建一个空仓库"></a>注册 GitHub 账户并创建一个空仓库</h2><ul><li>(<strong>假定注册名为 yourname, 注册邮箱 yourname@gmail.com</strong>, 下同)</li><li>创建空仓库 yourname.github.io</li></ul><h2 id="下载并配置-Git"><a href="#下载并配置-Git" class="headerlink" title="下载并配置 Git"></a>下载并配置 Git</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><p>Linux</p><ul><li>使用系统包管理安装git</li></ul></li><li><p>Windows</p><ul><li><a href="http://code.google.com/p/msysgit/downloads/list" rel="external nofollow noopener noreferrer" target="_blank">MsysGit</a></li><li>vim着色：MsysGit上的vim着色文件不全, 可从完整vim73的syntax目录拷过来, 如 <code>/usr/share/vim/vim73/syntax</code></li></ul></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>设置 LANG 环境变量(可以不设LC_ALL; 可以不是zh_CN, 后缀是UTF-8即可;)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># locale和中文显示</span></span><br><span class="line">touch ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export LANG="en_US.UTF-8"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">touch ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set meta-flag on'</span> &gt;&gt; ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set convert-meta off'</span> &gt;&gt; ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set input-meta on'</span> &gt;&gt; ~/.inputrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set output-meta on'</span> &gt;&gt; ~/.inputrc</span><br><span class="line">touch ~/.vimrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'set fileencodings=utf-8'</span> &gt;&gt; ~/.vimrc</span><br><span class="line"><span class="comment"># git options</span></span><br><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"yourname@gmail.com"</span></span><br><span class="line">git config core.autocrlf <span class="literal">false</span></span><br><span class="line">git config credential.helper <span class="string">'cache --timeout=3600'</span> <span class="comment"># Keep your password cached in memory</span></span><br><span class="line">git config github.user <span class="string">"yourname"</span></span><br><span class="line"><span class="comment"># ssh key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"yourname@gmail.com"</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub <span class="comment"># 将内容复制到 https://github.com/settings/ssh 上</span></span><br></pre></td></tr></table></figure><h2 id="下载并配置-Ruby-1-9-3"><a href="#下载并配置-Ruby-1-9-3" class="headerlink" title="下载并配置 Ruby(1.9.3)"></a>下载并配置 Ruby(1.9.3)</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><ul><li><a href="http://rubyinstaller.org/downloads" rel="external nofollow noopener noreferrer" target="_blank">Windows</a><ul><li>7zip包解压(假设到 D:\ruby1.9.3), 添加到系统PATH</li><li>下载并配置 DevKit(<a href="http://github.com/oneclick/rubyinstaller/wiki/Development-Kit" rel="external nofollow noopener noreferrer" target="_blank">wiki</a>)<ul><li>1.9.3 配对 <a href="http://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe" rel="external nofollow noopener noreferrer" target="_blank">DevKit-tdm</a>, 解压(假设到 D:\ruby1.9.3-DevKit), 添加到系统PATH</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /D/ruby1.9.3-DevKit</span><br><span class="line">ruby dk.rb init</span><br><span class="line">ruby dk.rb review <span class="comment"># 确认ruby位置正确</span></span><br><span class="line">ruby dk.rb install</span><br><span class="line"><span class="comment"># 验证DevKit</span></span><br><span class="line">gem install json --platform=ruby <span class="comment"># 能看到 build native</span></span><br><span class="line">ruby -rubygems -e <span class="string">"require 'json'; puts JSON.load('[42]').inspect"</span> <span class="comment"># 确认json gem安装成功</span></span><br></pre></td></tr></table></figure><ul><li>Linux<ul><li>使用 <a href="http://rvm.io/rvm/install" rel="external nofollow noopener noreferrer" target="_blank">RVM(Ruby版本管理)</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install RVM stable with ruby in user's $HOME</span></span><br><span class="line">\curl -L http://get.rvm.io | bash -s stable --ruby <span class="comment"># 反斜杠是防止使用到 ~/.curlrc 定义的 alias</span></span><br><span class="line"><span class="comment"># rvm安装完毕</span></span><br><span class="line"><span class="comment"># rvm list known</span></span><br><span class="line">rvm install 1.9.3</span><br><span class="line">rvm use 1.9.3 --default</span><br><span class="line"><span class="comment"># ruby -v</span></span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem更新源</span></span><br><span class="line">gem sources --remove http://rubygems.org/ <span class="comment"># 要包含最后的斜杠</span></span><br><span class="line">gem sources -a http://ruby.taobao.org/</span><br><span class="line">gem sources -l <span class="comment"># 验证源只有 ruby.taobao.org</span></span><br></pre></td></tr></table></figure><h1 id="安装Octopress"><a href="#安装Octopress" class="headerlink" title="安装Octopress"></a>安装Octopress</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/imathis/octopress.git mygithubio</span><br><span class="line"><span class="built_in">cd</span> mygithubio</span><br><span class="line">gem install bundler <span class="comment"># 不是 bundle</span></span><br><span class="line">bundle install <span class="comment"># 下载安装依赖项目(bundle是ruby的依赖管理工具)</span></span><br><span class="line">rake install <span class="comment"># 编译octopress项目(Rake to Ruby == Make to C)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake setup_github_pages</span><br></pre></td></tr></table></figure><ul><li><p><code>hellip; 不是内部命令</code>错误 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><ul><li><code>Rakefile</code>文件 <code>My Octopress Page is coming soon &amp;hellip;</code> 在 <code>&amp;hellip;</code> 前加 <code>^</code> (Windows cmd转义)</li></ul></li><li><p>setup_github_pages目标主要做了2件事:</p><ul><li>将原来git upstream的 origin 改到 octopress</li><li>将你在 GitHub 上的博客地址(如 yourname.github.io) 作为 origin. 验证: <code>git remote -v</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rake new_post['hello octopress'] # 创建新markdown博文</span></span><br><span class="line">rake generate <span class="comment"># 确保 `.gitignore` 包含忽略 _deploy 目录</span></span><br><span class="line"><span class="comment"># rake preview # 可通过本机4000端口预览</span></span><br><span class="line"><span class="comment"># rake deploy # push 到 GitHub 博客项目的 master 分支</span></span><br></pre></td></tr></table></figure><h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><h3 id="找不到python213"><a href="#找不到python213" class="headerlink" title="找不到python213"></a>找不到python2<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Python27</span><br><span class="line">mklink /H python2.exe python.exe</span><br></pre></td></tr></table></figure><h1 id="基本使用和配置"><a href="#基本使用和配置" class="headerlink" title="基本使用和配置"></a>基本使用和配置</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="rake-new-post-39-new-post-today-39-生成新博文"><a href="#rake-new-post-39-new-post-today-39-生成新博文" class="headerlink" title="rake new_post[&#39;new-post-today&#39;] 生成新博文"></a><code>rake new_post[&#39;new-post-today&#39;]</code> 生成新博文</h3><h3 id="rake-new-page-39-new-page-in-here-39-生成新页面-不属于博文系列"><a href="#rake-new-page-39-new-page-in-here-39-生成新页面-不属于博文系列" class="headerlink" title="rake new_page[&#39;new-page-in-here&#39;] 生成新页面(不属于博文系列)"></a><code>rake new_page[&#39;new-page-in-here&#39;]</code> 生成新页面(不属于博文系列)</h3><h2 id="配置2"><a href="#配置2" class="headerlink" title="配置2"></a>配置<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h2><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 博客链接格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/blog/:year/:month-:day-:title.html</span></span><br><span class="line"><span class="comment"># 使用kramdown</span></span><br><span class="line"><span class="attr">markdown:</span> <span class="string">kramdown</span></span><br><span class="line"><span class="comment"># SEO</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">yourname的技术博客</span></span><br></pre></td></tr></table></figure><h3 id="自动生成目录6"><a href="#自动生成目录6" class="headerlink" title="自动生成目录6"></a>自动生成目录<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></h3><h4 id="使用kramdown-下面配置-写博客时加入以下两行即可自动生成目录"><a href="#使用kramdown-下面配置-写博客时加入以下两行即可自动生成目录" class="headerlink" title="使用kramdown(下面配置), 写博客时加入以下两行即可自动生成目录:"></a>使用kramdown(下面配置), 写博客时加入以下两行即可自动生成目录:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* list element with functor item</span><br><span class="line">&#123;:toc&#125;</span><br></pre></td></tr></table></figure><h4 id="目录样式"><a href="#目录样式" class="headerlink" title="目录样式"></a>目录样式</h4><p><code>touch sass/custom/_styles.scss</code>, 添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#markdown-toc</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"TOC"</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-id">#markdown-toc</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">//  float: left;</span><br><span class="line">  <span class="selector-tag">background-color</span>: <span class="selector-tag">LightGray</span>;</span><br><span class="line">  <span class="selector-tag">margin-right</span><span class="selector-pseudo">:2em</span>;</span><br><span class="line">  <span class="selector-tag">border-radius</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line">  <span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span><br><span class="line">  <span class="selector-tag">-moz-box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">  <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧栏"><a href="#侧栏" class="headerlink" title="侧栏"></a>侧栏</h3><h4 id="about-me"><a href="#about-me" class="headerlink" title="about me"></a>about me</h4><h5 id="config-yml-的-default-asides-里添加-custom-asides-about-html"><a href="#config-yml-的-default-asides-里添加-custom-asides-about-html" class="headerlink" title="_config.yml 的 default_asides 里添加 custom/asides/about.html"></a><code>_config.yml</code> 的 <code>default_asides</code> 里添加 <code>custom/asides/about.html</code></h5><h5 id="touch-source-includes-custom-asides-about-html-添加内容"><a href="#touch-source-includes-custom-asides-about-html-添加内容" class="headerlink" title="touch source/_includes/custom/asides/about.html, 添加内容"></a><code>touch source/_includes/custom/asides/about.html</code>, 添加内容</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一句话介绍<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>微博: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://weibo.com/yourname"</span>&gt;</span>@yourweiboname<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>豆瓣: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://douban.com/yourname"</span>&gt;</span>@yourdoubanname<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分类标签-支持中文-categories5"><a href="#分类标签-支持中文-categories5" class="headerlink" title="分类标签(支持中文)/categories5"></a>分类标签(支持中文)/categories<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></h4><p>categories 多个以逗号分隔</p><h5 id="中文支持-确认-plugins-category-generator-rb-中-write-category-indexes-和-category-link-函数包含-to-url-调用-url-不区分大小写-不用再调-downcase"><a href="#中文支持-确认-plugins-category-generator-rb-中-write-category-indexes-和-category-link-函数包含-to-url-调用-url-不区分大小写-不用再调-downcase" class="headerlink" title="中文支持: 确认 plugins/category_generator.rb 中 write_category_indexes 和 category_link 函数包含 to_url 调用 (url 不区分大小写, 不用再调 downcase)"></a>中文支持: 确认 <code>plugins/category_generator.rb</code> 中 <code>write_category_indexes</code> 和 <code>category_link</code> 函数包含 <code>to_url</code> 调用 (url 不区分大小写, 不用再调 downcase)</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 109行附近</span></span><br><span class="line"><span class="keyword">self</span>.write_category_index(File.join(dir, category.to_url), category)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 176行附近</span></span><br><span class="line"><span class="string">"&lt;a class='category' href='/<span class="subst">#&#123;dir&#125;</span>/<span class="subst">#&#123;category.to_url&#125;</span>/'&gt;<span class="subst">#&#123;category&#125;</span>&lt;/a&gt;"</span></span><br></pre></td></tr></table></figure><h5 id="touch-plugins-category-list-tag-rb-添加内容"><a href="#touch-plugins-category-list-tag-rb-添加内容" class="headerlink" title="touch plugins/category_list_tag.rb, 添加内容"></a><code>touch plugins/category_list_tag.rb</code>, 添加内容</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Jekyll</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CategoryListTag</span> &lt; Liquid::Tag</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(context)</span></span></span><br><span class="line">      html = <span class="string">""</span></span><br><span class="line">      categories = context.registers[<span class="symbol">:site</span>].categories.keys</span><br><span class="line">      categories.sort.each <span class="keyword">do</span> <span class="params">|category|</span></span><br><span class="line">        posts_in_category = context.registers[<span class="symbol">:site</span>].categories[category].size</span><br><span class="line">        html &lt;&lt; <span class="string">"&lt;li class='category'&gt;&lt;a href='/blog/categories/<span class="subst">#&#123;category.to_url&#125;</span>/'&gt;<span class="subst">#&#123;category&#125;</span> (<span class="subst">#&#123;posts_in_category&#125;</span>)&lt;/a&gt;&lt;/li&gt;\n"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      html</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Liquid::Template.register_tag(<span class="string">'category_list'</span>, Jekyll::CategoryListTag)</span><br></pre></td></tr></table></figure><h5 id="touch-source-includes-asides-category-list-html-添加内容"><a href="#touch-source-includes-asides-category-list-html-添加内容" class="headerlink" title="touch source/_includes/asides/category_list.html, 添加内容"></a><code>touch source/_includes/asides/category_list.html</code>, 添加内容</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Categories<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"categories"</span>&gt;</span></span><br><span class="line">    &#123;% category_list %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="config-yml-中-default-asides-添加-asides-category-list-html"><a href="#config-yml-中-default-asides-添加-asides-category-list-html" class="headerlink" title="_config.yml 中 default_asides 添加 asides/category_list.html"></a><code>_config.yml</code> 中 <code>default_asides</code> 添加 <code>asides/category_list.html</code></h5><h3 id="Jekyll-lunr-js-即时搜索7"><a href="#Jekyll-lunr-js-即时搜索7" class="headerlink" title="Jekyll+lunr.js 即时搜索7"></a>Jekyll+lunr.js 即时搜索<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></h3><ul><li>下载 <a href="http://github.com/slashdotdash/jekyll-lunr-js-search/raw/master/build/jekyll_lunr_js_search.rb" rel="external nofollow noopener noreferrer" target="_blank">jekyll_lunr_js_search.rb</a> 放到 <code>plugins</code> 目录. 可按 <sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup> 中提示修改一个小bug.</li><li>下载 <a href="http://github.com/slashdotdash/jekyll-lunr-js-search/raw/master/js/jquery.lunr.search.js" rel="external nofollow noopener noreferrer" target="_blank">jquery.lunr.search.js</a> 放到 <code>source/javascripts</code> 目录</li><li>jQuery 已在 Octopress 中内置: <code>source/javascripts/libs/jquery.min.js</code></li><li>下载 以下几个 javascript 依赖, 放到 <code>source/javascripts</code> 目录<ul><li><a href="http://raw.github.com/olivernn/lunr.js/master/lunr.min.js" rel="external nofollow noopener noreferrer" target="_blank">lunr.min.js</a></li><li><a href="http://github.com/janl/mustache.js/raw/master/mustache.js" rel="external nofollow noopener noreferrer" target="_blank">mustache.js</a></li><li><a href="http://stevenlevithan.com/assets/misc/date.format.js" rel="external nofollow noopener noreferrer" target="_blank">date.format.js</a></li><li><a href="http://github.com/medialize/URI.js/raw/gh-pages/src/URI.min.js" rel="external nofollow noopener noreferrer" target="_blank">URI.min.js</a></li></ul></li><li><code>gem install nokogiri json</code> 安装依赖, <code>gem list</code> 查看 nokogiri 版本(假设为 <code>1.6.0</code>)</li><li>修改 <code>Gemfile</code>, 标明依赖 <code>gem &#39;nokogiri&#39;, &#39;~&gt; 1.6.0&#39;</code></li><li><code>rake new_page[&#39;search&#39;]</code>, 编辑 search页(<code>source/search/index.markdown</code>):</li></ul><script src="//gist.github.com/7367525.js"></script><ul><li>屏蔽页面被索引有两种方式<ul><li>每个 markdown页 的 YAML配置头 加 <code>exclude_from_search: true</code></li><li><code>_config.yml</code> 统一添加(即使没有也添加, 防止索引运行出错)</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lunr_search:</span></span><br><span class="line"><span class="attr">  excludes:</span> <span class="string">[rss.xml,</span> <span class="string">atom.xml]</span></span><br></pre></td></tr></table></figure><ul><li>首页添加链接到 search页面</li><li>重新 <code>rake generate</code></li></ul><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><ul><li>about页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake new_page[<span class="string">'about'</span>] <span class="comment"># 生成 source/about/index.markdown</span></span><br></pre></td></tr></table></figure><p>头部导航菜单 <code>/source/_includes/custom/navigation.html</code> 加入 about页面 链接.</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li><code>source/_includes/custom/head.html</code> 全部注释掉, 不装载 Google Webfonts(此字体没有包含中文, 粗体中文显示不出)</li><li><code>sass/custom/_fonts.scss</code> 添加(<a href="http://lifesinger.wordpress.com/2011/04/06/best-web-default-fonts/" rel="external nofollow noopener noreferrer" target="_blank">最佳 Web 中文默认字体</a>)</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$heading-font-family: arial, sans-serif;</span><br><span class="line">$header-title-font-family: arial, sans-serif;</span><br><span class="line">$header-subtitle-font-family: arial, sans-serif;</span><br></pre></td></tr></table></figure><h1 id="社交功能"><a href="#社交功能" class="headerlink" title="社交功能"></a>社交功能</h1><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><h3 id="JiaThis3"><a href="#JiaThis3" class="headerlink" title="JiaThis3"></a><a href="http://www.jiathis.com" rel="external nofollow noopener noreferrer" target="_blank">JiaThis</a><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3><p><code>_config.yml</code> 加入变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JiaThis</span></span><br><span class="line"><span class="attr">jiathis:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>source/_includes/post/sharing.html</code> 尾部 <code>&lt;/div&gt;</code> 之前添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">if</span> <span class="string">site.jiathis</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&#123;%</span> <span class="string">include</span> <span class="string">post/jiathis.html</span> <span class="string">%&#125;</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><p><code>touch source/_includes/post/jiathis.html</code>, 将从 JiaThis 获得的代码放入其中</p><h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><h3 id="多说4"><a href="#多说4" class="headerlink" title="多说4"></a><a href="http://duoshuo.com" rel="external nofollow noopener noreferrer" target="_blank">多说</a><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></h3><p><code>_config.yml</code> 加入变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DuoShuo comments</span></span><br><span class="line"><span class="attr">duoshuo_comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">duoshuo_short_name:</span> <span class="string">yourname</span></span><br></pre></td></tr></table></figure><p><code>source/_layouts/post.html</code> 中 disqus 代码下添加 (单独页面也加评论的话 <code>source/_layouts/page.html</code> 中也放相同代码)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Comments"</span> <span class="attr">aria-live</span>=<span class="string">"polite"</span>&gt;</span>&#123;% include post/duoshuo-thread.html %&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>创建 <code>source/_includes/post/duoshuo-thread.html</code>, 将从多说获得的代码放入其中</p><h2 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h2><h3 id="站长统计"><a href="#站长统计" class="headerlink" title="站长统计"></a><a href="http://www.cnzz.com" rel="external nofollow noopener noreferrer" target="_blank">站长统计</a></h3><p><code>source/_includes/custom/footer.html</code> 中加入注册后给出的统计代码.</p><h1 id="换主题"><a href="#换主题" class="headerlink" title="换主题"></a>换主题</h1><p><a href="http://github.com/bkutil/bootstrap-theme" rel="external nofollow noopener noreferrer" target="_blank">bootstrap-theme</a> , 或者<a href="http://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" rel="external nofollow noopener noreferrer" target="_blank">其他的</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://github.com/bkutil/bootstrap-theme.git .themes/bootstrap-theme</span><br><span class="line">rake install[<span class="string">'bootstrap-theme'</span>] <span class="comment"># 注意: 换主题后所有非custom目录下的内容都会被覆盖掉！！</span></span><br><span class="line">rake generate</span><br></pre></td></tr></table></figure><h1 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h1><p>I forked from <a href="http://github.com/hendricius/jekyll-i18n.git" rel="external nofollow noopener noreferrer" target="_blank">hendricius/jekyll-i18n</a> and adapted to octopress(in <a href="http://github.com/wangmuy/octopress-i18n" rel="external nofollow noopener noreferrer" target="_blank">octopress-i18n</a>).</p><p>However, AFAIK there’s no i18n capable themes right now. You have to create your own theme branch and adapt to i18n.</p><p>html中写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">i18nvar</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><p>, <code>source/_locales/zh_CN.yml</code> 中定义对应变量 <code>i18nvar: 中文名称</code></p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull octopress master <span class="comment"># 自动或手动merge</span></span><br><span class="line">bundle install</span><br><span class="line">rake update_source</span><br><span class="line">rake update_style</span><br></pre></td></tr></table></figure><h1 id="使用-travis-ci-自动编译发布"><a href="#使用-travis-ci-自动编译发布" class="headerlink" title="使用 travis-ci 自动编译发布"></a>使用 travis-ci 自动编译发布</h1><ul><li>登录<a href="https://travis-ci.org" rel="external nofollow noopener noreferrer" target="_blank">Travis-CI</a>, 注册授权,  右上角 Accounts, 对应项目repo 置为 ON</li><li>生成 https 访问 github 所需的 token. 可用<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>中的界面方法, 或<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>中的curl直接获取</li><li><code>gem install travis; travis encrypt GH_TOKEN=&lt;token&gt;</code> 生成加密的token</li><li>修改 .travis.yml, 几点注意:<ul><li>调用 rake 命令时前面要加 <code>bundle exec</code>, 防止 rake 命令版本冲突</li><li>Travis 默认使用 <code>Gemfile.lock</code> 中的信息, 但此文件中包含平台相关的build信息, 会导致nokogiri编译问题<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>. 所以最好是将 <code>Gemfile</code> 拷贝出一份独立的 <code>Gemfile.travis</code> 供 Travis 使用.</li><li><code>Gemfile.travis</code> 中的 <code>source</code> 此时也可改用通用的 <a href="https://rubygems.org" rel="external nofollow noopener noreferrer" target="_blank">rubygems</a></li><li>Travis上构建时如果出现 <code>Liquid Exception: Gist replied with 301</code> 错误提示, 是Octopress的一个bug, 则需要更新一下Octopress<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup></li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">source</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">ruby</span></span><br><span class="line"><span class="attr">rvm:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">1.9</span><span class="number">.3</span></span><br><span class="line"><span class="attr">gemfile:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Gemfile.travis</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"yourname"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"yourname@gmail.com"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">REPO_URL="https://$GH_TOKEN@github.com/$GH_REPO.git"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rake</span> <span class="string">setup_github_pages[$REPO_URL]</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rake</span> <span class="string">generate</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rake</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">GH_REPO="your_github_name/your_github_name.github.io"</span></span><br><span class="line"><span class="attr">  - secure:</span> <span class="string">"&lt;your-travis-encrypted-token&gt;"</span></span><br></pre></td></tr></table></figure><ul><li>修改 Rakefile</li></ul><p>隐藏token</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-      puts "Added remote #&#123;repo_url&#125; as origin"</span></span><br><span class="line"><span class="addition">+      puts "Added remote as origin" # don't put repo_url in travis-ci as it may contains token</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-    system "git push origin #&#123;deploy_branch&#125; --force"</span></span><br><span class="line"><span class="addition">+    system "git push origin #&#123;deploy_branch&#125; --force --quiet" # hide github token</span></span><br></pre></td></tr></table></figure><p>支持https提交</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    puts "(For example, 'git@github.com:yourname/yourname.github.com)"</span></span><br><span class="line"><span class="addition">+    puts "(For example, 'git@github.com:yourname/yourname.github.com' or 'https://github.com/yourname/yourname.github.com')"</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-  user = repo_url.match(/:([^\/]+)/)[1]</span></span><br><span class="line"><span class="addition">+  user = repo_url.match(/[\/:]([^\/]+)\/[^\/]+$/)[1]</span></span><br></pre></td></tr></table></figure><p>跳过不需要触发travis的commit</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    message = "Site updated at #&#123;Time.now.utc&#125;"</span></span><br><span class="line"><span class="addition">+    message = "Site updated at #&#123;Time.now.utc&#125;\n\n[ci skip]"</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-    system "git commit -m \"Octopress init\""</span></span><br><span class="line"><span class="addition">+    system "git commit -m \"Octopress init\n\n[ci skip]\""</span></span><br></pre></td></tr></table></figure><ul><li>README.markdown 加入 build 状态图标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![Build Status](https://travis-ci.org/yourname/yourname.github.io.png?branch=source)](https://travis-ci.org/yourname/yourname.github.io)</span><br></pre></td></tr></table></figure><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://netwjx.github.io/blog/2012/03/18/octopress-note/" rel="external nofollow noopener noreferrer" target="_blank">Octopress 笔记</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.yanjiuyanjiu.com/blog/20130402/" rel="external nofollow noopener noreferrer" target="_blank">我的Octopress配置</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="http://sinosmond.github.io/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/" rel="external nofollow noopener noreferrer" target="_blank">在 Windows7 下从头开始安装部署 Octopress</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://ihavanna.org/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html" rel="external nofollow noopener noreferrer" target="_blank">为 Octopress 添加多说评论系统</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="http://selfecy.com/blog/2013/07/13/rang-octopressyou-zhong-wen-fen-lei-ji-ce-bian-lie/" rel="external nofollow noopener noreferrer" target="_blank">讓Octopress有中文分類及側邊列</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/" rel="external nofollow noopener noreferrer" target="_blank">Table of Contents in Octopress</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;"><a href="http://github.com/slashdotdash/jekyll-lunr-js-search" rel="external nofollow noopener noreferrer" target="_blank">Jekyll+lunr.js</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.hydra1983.com/my%20tech/2013/05/05/create-a-blog-using-jekyll-bootstrap/" rel="external nofollow noopener noreferrer" target="_blank">使用Jekyll-Bootstrap搭建博客时出现的问题</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;"><a href="http://xuhehuan.com/1761.html" rel="external nofollow noopener noreferrer" target="_blank">打造Octopress博客在线写作平台</a></span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;"><a href="http://rogerz.github.io/blog/2013/02/21/prose-io-github-travis-ci/" rel="external nofollow noopener noreferrer" target="_blank">Octopress+Prose+Github+Travis CI = Coders’ Blog</a></span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">11.</span><span style="display: inline-block; vertical-align: top;"><a href="http://github.com/travis-ci/travis-ci/issues/1919" rel="external nofollow noopener noreferrer" target="_blank">travis-ci-nokogiri-LoadError</a></span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">12.</span><span style="display: inline-block; vertical-align: top;"><a href="http://github.com/imathis/octopress/pull/1506/commits" rel="external nofollow noopener noreferrer" target="_blank">octopress-gist-replied-with-301</a></span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">13.</span><span style="display: inline-block; vertical-align: top;"><a href="http://fabian-kostadinov.github.io/2015/01/04/problems-using-syntax-highlighting-with-pygments-on-windows" rel="external nofollow noopener noreferrer" target="_blank">Probmes using syntax highlighting with pygments on windows</a></span><a href="#fnref:13" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      octopress配置
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
</feed>
